{
  "version": 3,
  "sources": ["../../three/src/renderers/common/DataMap.js", "../../three/src/constants.js", "../../three/src/math/Matrix3.js", "../../three/src/math/ColorManagement.js", "../../three/src/math/Color.js", "../../three/src/renderers/common/Color4.js", "../../three/src/nodes/core/constants.js", "../../three/src/math/Quaternion.js", "../../three/src/math/Vector3.js", "../../three/src/math/Matrix4.js", "../../three/src/math/Vector2.js", "../../three/src/math/Vector4.js", "../../three/src/nodes/core/NodeUtils.js", "../../three/src/core/EventDispatcher.js", "../../three/src/nodes/core/Node.js", "../../three/src/nodes/core/TempNode.js", "../../three/src/nodes/utils/ArrayElementNode.js", "../../three/src/nodes/utils/ConvertNode.js", "../../three/src/nodes/utils/JoinNode.js", "../../three/src/nodes/utils/SplitNode.js", "../../three/src/nodes/utils/SetNode.js", "../../three/src/nodes/core/InputNode.js", "../../three/src/nodes/core/ConstNode.js", "../../three/src/nodes/shadernode/ShaderNode.js", "../../three/src/nodes/core/AssignNode.js", "../../three/src/nodes/core/VaryingNode.js", "../../three/src/nodes/core/AttributeNode.js", "../../three/src/nodes/core/BypassNode.js", "../../three/src/nodes/core/CacheNode.js", "../../three/src/nodes/core/ContextNode.js", "../../three/src/nodes/core/IndexNode.js", "../../three/src/nodes/core/LightingModel.js", "../../three/src/nodes/core/VarNode.js", "../../three/src/nodes/core/PropertyNode.js", "../../three/src/nodes/core/ParameterNode.js", "../../three/src/nodes/code/CodeNode.js", "../../three/src/nodes/code/FunctionNode.js", "../../three/src/materials/Material.js", "../../three/src/nodes/core/UniformGroupNode.js", "../../three/src/nodes/core/UniformNode.js", "../../three/src/nodes/accessors/UVNode.js", "../../three/src/nodes/accessors/TextureSizeNode.js", "../../three/src/nodes/math/OperatorNode.js", "../../three/src/nodes/math/MathNode.js", "../../three/src/nodes/display/ColorSpaceNode.js", "../../three/src/nodes/code/ExpressionNode.js", "../../three/src/nodes/utils/MaxMipLevelNode.js", "../../three/src/nodes/accessors/TextureNode.js", "../../three/src/nodes/accessors/BufferNode.js", "../../three/src/nodes/accessors/UniformsNode.js", "../../three/src/nodes/accessors/ReferenceNode.js", "../../three/src/nodes/accessors/MaterialReferenceNode.js", "../../three/src/nodes/accessors/CameraNode.js", "../../three/src/nodes/accessors/Object3DNode.js", "../../three/src/nodes/accessors/ModelNode.js", "../../three/src/nodes/accessors/NormalNode.js", "../../three/src/nodes/accessors/MaterialNode.js", "../../three/src/nodes/accessors/PositionNode.js", "../../three/src/nodes/accessors/ModelViewProjectionNode.js", "../../three/src/extras/DataUtils.js", "../../three/src/utils.js", "../../three/src/core/BufferAttribute.js", "../../three/src/core/InterleavedBufferAttribute.js", "../../three/src/core/InterleavedBuffer.js", "../../three/src/nodes/accessors/BufferAttributeNode.js", "../../three/src/core/InstancedInterleavedBuffer.js", "../../three/src/core/InstancedBufferAttribute.js", "../../three/src/nodes/accessors/InstanceNode.js", "../../three/src/nodes/accessors/TangentNode.js", "../../three/src/nodes/accessors/BatchNode.js", "../../three/src/nodes/accessors/SkinningNode.js", "../../three/src/nodes/utils/LoopNode.js", "../../three/src/extras/ImageUtils.js", "../../three/src/textures/Source.js", "../../three/src/textures/Texture.js", "../../three/src/textures/DataArrayTexture.js", "../../three/src/nodes/accessors/MorphNode.js", "../../three/src/nodes/accessors/ReflectVectorNode.js", "../../three/src/nodes/accessors/CubeTextureNode.js", "../../three/src/nodes/lighting/LightingNode.js", "../../three/src/textures/DepthTexture.js", "../../three/src/nodes/lighting/AnalyticLightNode.js", "../../three/src/nodes/lighting/LightsNode.js", "../../three/src/nodes/lighting/AONode.js", "../../three/src/nodes/lighting/LightingContextNode.js", "../../three/src/nodes/lighting/IrradianceNode.js", "../../three/src/nodes/display/ViewportNode.js", "../../three/src/textures/FramebufferTexture.js", "../../three/src/nodes/display/ViewportTextureNode.js", "../../three/src/nodes/display/ViewportDepthTextureNode.js", "../../three/src/nodes/display/ViewportDepthNode.js", "../../three/src/nodes/accessors/ClippingNode.js", "../../three/src/nodes/display/FrontFacingNode.js", "../../three/src/nodes/materials/NodeMaterial.js", "../../three/src/nodes/math/CondNode.js", "../../three/src/nodes/core/StackNode.js", "../../three/src/nodes/utils/EquirectUVNode.js", "../../three/src/math/Box3.js", "../../three/src/math/Sphere.js", "../../three/src/math/Ray.js", "../../three/src/math/Euler.js", "../../three/src/core/Layers.js", "../../three/src/core/Object3D.js", "../../three/src/math/Triangle.js", "../../three/src/materials/MeshBasicMaterial.js", "../../three/src/core/BufferGeometry.js", "../../three/src/objects/Mesh.js", "../../three/src/renderers/shaders/UniformsUtils.js", "../../three/src/renderers/shaders/ShaderChunk/default_vertex.glsl.js", "../../three/src/renderers/shaders/ShaderChunk/default_fragment.glsl.js", "../../three/src/materials/ShaderMaterial.js", "../../three/src/core/RenderTarget.js", "../../three/src/cameras/Camera.js", "../../three/src/cameras/PerspectiveCamera.js", "../../three/src/nodes/pmrem/PMREMUtils.js", "../../three/src/cameras/OrthographicCamera.js", "../../three/src/renderers/common/extras/PMREMGenerator.js", "../../three/src/nodes/core/NodeFunctionInput.js", "../../three/src/nodes/core/StructTypeNode.js", "../../three/src/nodes/core/OutputStructNode.js", "../../three/src/nodes/core/MRTNode.js", "../../three/src/nodes/math/HashNode.js", "../../three/src/nodes/math/MathUtils.js", "../../three/src/nodes/math/TriNoise3D.js", "../../three/src/nodes/utils/DiscardNode.js", "../../three/src/nodes/utils/FunctionOverloadingNode.js", "../../three/src/nodes/utils/MatcapUVNode.js", "../../three/src/nodes/utils/TimerNode.js", "../../three/src/nodes/utils/OscNode.js", "../../three/src/nodes/utils/PackingNode.js", "../../three/src/nodes/utils/RemapNode.js", "../../three/src/nodes/utils/RotateUVNode.js", "../../three/src/nodes/utils/RotateNode.js", "../../three/src/nodes/utils/SpriteSheetUVNode.js", "../../three/src/nodes/utils/StorageArrayElementNode.js", "../../three/src/nodes/utils/TriplanarTexturesNode.js", "../../three/src/math/Plane.js", "../../three/src/nodes/utils/ReflectorNode.js", "../../three/src/renderers/common/QuadMesh.js", "../../three/src/nodes/utils/RTTNode.js", "../../three/src/nodes/accessors/BitangentNode.js", "../../three/src/nodes/accessors/AccessorsUtils.js", "../../three/src/nodes/accessors/VertexColorNode.js", "../../three/src/nodes/accessors/RendererReferenceNode.js", "../../three/src/nodes/accessors/TextureBicubicNode.js", "../../three/src/nodes/accessors/PointUVNode.js", "../../three/src/nodes/accessors/SceneNode.js", "../../three/src/renderers/webgpu/utils/WebGPUConstants.js", "../../three/src/nodes/accessors/StorageBufferNode.js", "../../three/src/nodes/accessors/StorageTextureNode.js", "../../three/src/nodes/accessors/Texture3DNode.js", "../../three/src/nodes/accessors/UserDataNode.js", "../../three/src/nodes/display/BlendModeNode.js", "../../three/src/nodes/display/BumpMapNode.js", "../../three/src/nodes/display/ColorAdjustmentNode.js", "../../three/src/nodes/display/NormalMapNode.js", "../../three/src/nodes/display/PosterizeNode.js", "../../three/src/nodes/display/ToneMappingNode.js", "../../three/src/nodes/display/ViewportSharedTextureNode.js", "../../three/src/nodes/display/PassNode.js", "../../three/src/nodes/display/GaussianBlurNode.js", "../../three/src/nodes/display/AfterImageNode.js", "../../three/src/nodes/display/AnamorphicNode.js", "../../three/src/nodes/display/SobelOperatorNode.js", "../../three/src/nodes/display/DepthOfFieldNode.js", "../../three/src/nodes/display/DotScreenNode.js", "../../three/src/nodes/display/RGBShiftNode.js", "../../three/src/nodes/display/FilmNode.js", "../../three/src/nodes/display/Lut3DNode.js", "../../three/src/textures/DataTexture.js", "../../three/src/nodes/display/GTAONode.js", "../../three/src/nodes/display/DenoiseNode.js", "../../three/src/nodes/display/FXAANode.js", "../../three/src/nodes/display/BloomNode.js", "../../three/src/nodes/display/TransitionNode.js", "../../three/src/nodes/display/RenderOutputNode.js", "../../three/src/nodes/display/PixelationPassNode.js", "../../three/src/nodes/code/FunctionCallNode.js", "../../three/src/nodes/code/ScriptableValueNode.js", "../../three/src/nodes/code/ScriptableNode.js", "../../three/src/nodes/fog/FogNode.js", "../../three/src/nodes/fog/FogRangeNode.js", "../../three/src/nodes/fog/FogExp2Node.js", "../../three/src/nodes/geometry/RangeNode.js", "../../three/src/nodes/gpgpu/ComputeNode.js", "../../three/src/nodes/lighting/LightNode.js", "../../three/src/nodes/lighting/LightUtils.js", "../../three/src/lights/Light.js", "../../three/src/math/Frustum.js", "../../three/src/lights/LightShadow.js", "../../three/src/lights/PointLightShadow.js", "../../three/src/lights/PointLight.js", "../../three/src/nodes/lighting/PointLightNode.js", "../../three/src/lights/DirectionalLightShadow.js", "../../three/src/lights/DirectionalLight.js", "../../three/src/nodes/lighting/DirectionalLightNode.js", "../../three/src/lights/RectAreaLight.js", "../../three/src/nodes/lighting/RectAreaLightNode.js", "../../three/src/lights/SpotLightShadow.js", "../../three/src/lights/SpotLight.js", "../../three/src/nodes/lighting/SpotLightNode.js", "../../three/src/lights/webgpu/IESSpotLight.js", "../../three/src/nodes/lighting/IESSpotLightNode.js", "../../three/src/lights/AmbientLight.js", "../../three/src/nodes/lighting/AmbientLightNode.js", "../../three/src/lights/HemisphereLight.js", "../../three/src/nodes/lighting/HemisphereLightNode.js", "../../three/src/nodes/pmrem/PMREMNode.js", "../../three/src/nodes/lighting/EnvironmentNode.js", "../../three/src/nodes/lighting/BasicEnvironmentNode.js", "../../three/src/nodes/procedural/CheckerNode.js", "../../three/src/loaders/LoadingManager.js", "../../three/src/loaders/Loader.js", "../../three/src/loaders/Cache.js", "../../three/src/loaders/FileLoader.js", "../../three/src/materials/PointsMaterial.js", "../../three/src/nodes/materials/InstancedPointsNodeMaterial.js", "../../three/src/materials/LineBasicMaterial.js", "../../three/src/nodes/materials/LineBasicNodeMaterial.js", "../../three/src/materials/LineDashedMaterial.js", "../../three/src/nodes/materials/LineDashedNodeMaterial.js", "../../three/src/nodes/materials/Line2NodeMaterial.js", "../../three/src/materials/MeshNormalMaterial.js", "../../three/src/nodes/materials/MeshNormalNodeMaterial.js", "../../three/src/nodes/lighting/BasicLightMapNode.js", "../../three/src/nodes/functions/BasicLightingModel.js", "../../three/src/nodes/materials/MeshBasicNodeMaterial.js", "../../three/src/nodes/functions/BSDF/F_Schlick.js", "../../three/src/nodes/functions/BSDF/BRDF_Lambert.js", "../../three/src/nodes/functions/PhongLightingModel.js", "../../three/src/materials/MeshLambertMaterial.js", "../../three/src/nodes/materials/MeshLambertNodeMaterial.js", "../../three/src/materials/MeshPhongMaterial.js", "../../three/src/nodes/materials/MeshPhongNodeMaterial.js", "../../three/src/nodes/functions/material/getGeometryRoughness.js", "../../three/src/nodes/functions/material/getRoughness.js", "../../three/src/nodes/functions/BSDF/V_GGX_SmithCorrelated.js", "../../three/src/nodes/functions/BSDF/V_GGX_SmithCorrelated_Anisotropic.js", "../../three/src/nodes/functions/BSDF/D_GGX.js", "../../three/src/nodes/functions/BSDF/D_GGX_Anisotropic.js", "../../three/src/nodes/functions/BSDF/BRDF_GGX.js", "../../three/src/nodes/functions/BSDF/DFGApprox.js", "../../three/src/nodes/functions/BSDF/EnvironmentBRDF.js", "../../three/src/nodes/functions/BSDF/Schlick_to_F0.js", "../../three/src/nodes/functions/BSDF/BRDF_Sheen.js", "../../three/src/nodes/functions/BSDF/LTC.js", "../../three/src/nodes/functions/PhysicalLightingModel.js", "../../three/src/materials/MeshStandardMaterial.js", "../../three/src/nodes/materials/MeshStandardNodeMaterial.js", "../../three/src/materials/MeshPhysicalMaterial.js", "../../three/src/nodes/materials/MeshPhysicalNodeMaterial.js", "../../three/src/nodes/materials/MeshSSSNodeMaterial.js", "../../three/src/nodes/functions/ToonLightingModel.js", "../../three/src/materials/MeshToonMaterial.js", "../../three/src/nodes/materials/MeshToonNodeMaterial.js", "../../three/src/materials/MeshMatcapMaterial.js", "../../three/src/nodes/materials/MeshMatcapNodeMaterial.js", "../../three/src/nodes/materials/PointsNodeMaterial.js", "../../three/src/materials/SpriteMaterial.js", "../../three/src/nodes/materials/SpriteNodeMaterial.js", "../../three/src/nodes/functions/ShadowMaskModel.js", "../../three/src/materials/ShadowMaterial.js", "../../three/src/nodes/materials/ShadowNodeMaterial.js", "../../three/src/nodes/materials/VolumeNodeMaterial.js", "../../three/src/materials/RawShaderMaterial.js", "../../three/src/materials/MeshDepthMaterial.js", "../../three/src/materials/MeshDistanceMaterial.js", "../../three/src/loaders/MaterialLoader.js", "../../three/src/nodes/loaders/NodeMaterialLoader.js", "../../three/src/objects/InstancedMesh.js", "../../three/src/objects/BatchedMesh.js", "../../three/src/objects/Sprite.js", "../../three/src/objects/Points.js", "../../three/src/objects/Line.js", "../../three/src/objects/LineSegments.js", "../../three/src/objects/LOD.js", "../../three/src/objects/SkinnedMesh.js", "../../three/src/objects/Skeleton.js", "../../three/src/extras/curves/CatmullRomCurve3.js", "../../three/src/animation/AnimationUtils.js", "../../three/src/math/Interpolant.js", "../../three/src/math/interpolants/CubicInterpolant.js", "../../three/src/math/interpolants/LinearInterpolant.js", "../../three/src/math/interpolants/DiscreteInterpolant.js", "../../three/src/animation/KeyframeTrack.js", "../../three/src/animation/tracks/BooleanKeyframeTrack.js", "../../three/src/animation/tracks/ColorKeyframeTrack.js", "../../three/src/animation/tracks/NumberKeyframeTrack.js", "../../three/src/math/interpolants/QuaternionLinearInterpolant.js", "../../three/src/animation/tracks/QuaternionKeyframeTrack.js", "../../three/src/animation/tracks/StringKeyframeTrack.js", "../../three/src/animation/tracks/VectorKeyframeTrack.js", "../../three/src/geometries/EdgesGeometry.js", "../../three/src/geometries/SphereGeometry.js", "../../three/src/nodes/core/NodeFunction.js", "../../three/src/nodes/materialx/lib/mx_noise.js", "../../three/src/nodes/materialx/lib/mx_hsv.js", "../../three/src/nodes/materialx/lib/mx_transform_color.js", "../../three/src/renderers/common/Background.js"],
  "sourcesContent": ["class DataMap {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.data = new WeakMap();\r\n\r\n\t}\r\n\r\n\tget( object ) {\r\n\r\n\t\tlet map = this.data.get( object );\r\n\r\n\t\tif ( map === undefined ) {\r\n\r\n\t\t\tmap = {};\r\n\t\t\tthis.data.set( object, map );\r\n\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\r\n\t}\r\n\r\n\tdelete( object ) {\r\n\r\n\t\tlet map;\r\n\r\n\t\tif ( this.data.has( object ) ) {\r\n\r\n\t\t\tmap = this.data.get( object );\r\n\r\n\t\t\tthis.data.delete( object );\r\n\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\r\n\t}\r\n\r\n\thas( object ) {\r\n\r\n\t\treturn this.data.has( object );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.data = new WeakMap();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default DataMap;\r\n", "export const REVISION = '167';\r\n\r\nexport const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\r\nexport const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\r\nexport const CullFaceNone = 0;\r\nexport const CullFaceBack = 1;\r\nexport const CullFaceFront = 2;\r\nexport const CullFaceFrontBack = 3;\r\nexport const BasicShadowMap = 0;\r\nexport const PCFShadowMap = 1;\r\nexport const PCFSoftShadowMap = 2;\r\nexport const VSMShadowMap = 3;\r\nexport const FrontSide = 0;\r\nexport const BackSide = 1;\r\nexport const DoubleSide = 2;\r\nexport const NoBlending = 0;\r\nexport const NormalBlending = 1;\r\nexport const AdditiveBlending = 2;\r\nexport const SubtractiveBlending = 3;\r\nexport const MultiplyBlending = 4;\r\nexport const CustomBlending = 5;\r\nexport const AddEquation = 100;\r\nexport const SubtractEquation = 101;\r\nexport const ReverseSubtractEquation = 102;\r\nexport const MinEquation = 103;\r\nexport const MaxEquation = 104;\r\nexport const ZeroFactor = 200;\r\nexport const OneFactor = 201;\r\nexport const SrcColorFactor = 202;\r\nexport const OneMinusSrcColorFactor = 203;\r\nexport const SrcAlphaFactor = 204;\r\nexport const OneMinusSrcAlphaFactor = 205;\r\nexport const DstAlphaFactor = 206;\r\nexport const OneMinusDstAlphaFactor = 207;\r\nexport const DstColorFactor = 208;\r\nexport const OneMinusDstColorFactor = 209;\r\nexport const SrcAlphaSaturateFactor = 210;\r\nexport const ConstantColorFactor = 211;\r\nexport const OneMinusConstantColorFactor = 212;\r\nexport const ConstantAlphaFactor = 213;\r\nexport const OneMinusConstantAlphaFactor = 214;\r\nexport const NeverDepth = 0;\r\nexport const AlwaysDepth = 1;\r\nexport const LessDepth = 2;\r\nexport const LessEqualDepth = 3;\r\nexport const EqualDepth = 4;\r\nexport const GreaterEqualDepth = 5;\r\nexport const GreaterDepth = 6;\r\nexport const NotEqualDepth = 7;\r\nexport const MultiplyOperation = 0;\r\nexport const MixOperation = 1;\r\nexport const AddOperation = 2;\r\nexport const NoToneMapping = 0;\r\nexport const LinearToneMapping = 1;\r\nexport const ReinhardToneMapping = 2;\r\nexport const CineonToneMapping = 3;\r\nexport const ACESFilmicToneMapping = 4;\r\nexport const CustomToneMapping = 5;\r\nexport const AgXToneMapping = 6;\r\nexport const NeutralToneMapping = 7;\r\nexport const AttachedBindMode = 'attached';\r\nexport const DetachedBindMode = 'detached';\r\n\r\nexport const UVMapping = 300;\r\nexport const CubeReflectionMapping = 301;\r\nexport const CubeRefractionMapping = 302;\r\nexport const EquirectangularReflectionMapping = 303;\r\nexport const EquirectangularRefractionMapping = 304;\r\nexport const CubeUVReflectionMapping = 306;\r\nexport const RepeatWrapping = 1000;\r\nexport const ClampToEdgeWrapping = 1001;\r\nexport const MirroredRepeatWrapping = 1002;\r\nexport const NearestFilter = 1003;\r\nexport const NearestMipmapNearestFilter = 1004;\r\nexport const NearestMipMapNearestFilter = 1004;\r\nexport const NearestMipmapLinearFilter = 1005;\r\nexport const NearestMipMapLinearFilter = 1005;\r\nexport const LinearFilter = 1006;\r\nexport const LinearMipmapNearestFilter = 1007;\r\nexport const LinearMipMapNearestFilter = 1007;\r\nexport const LinearMipmapLinearFilter = 1008;\r\nexport const LinearMipMapLinearFilter = 1008;\r\nexport const UnsignedByteType = 1009;\r\nexport const ByteType = 1010;\r\nexport const ShortType = 1011;\r\nexport const UnsignedShortType = 1012;\r\nexport const IntType = 1013;\r\nexport const UnsignedIntType = 1014;\r\nexport const FloatType = 1015;\r\nexport const HalfFloatType = 1016;\r\nexport const UnsignedShort4444Type = 1017;\r\nexport const UnsignedShort5551Type = 1018;\r\nexport const UnsignedInt248Type = 1020;\r\nexport const UnsignedInt5999Type = 35902;\r\nexport const AlphaFormat = 1021;\r\nexport const RGBFormat = 1022;\r\nexport const RGBAFormat = 1023;\r\nexport const LuminanceFormat = 1024;\r\nexport const LuminanceAlphaFormat = 1025;\r\nexport const DepthFormat = 1026;\r\nexport const DepthStencilFormat = 1027;\r\nexport const RedFormat = 1028;\r\nexport const RedIntegerFormat = 1029;\r\nexport const RGFormat = 1030;\r\nexport const RGIntegerFormat = 1031;\r\nexport const RGBIntegerFormat = 1032;\r\nexport const RGBAIntegerFormat = 1033;\r\n\r\nexport const RGB_S3TC_DXT1_Format = 33776;\r\nexport const RGBA_S3TC_DXT1_Format = 33777;\r\nexport const RGBA_S3TC_DXT3_Format = 33778;\r\nexport const RGBA_S3TC_DXT5_Format = 33779;\r\nexport const RGB_PVRTC_4BPPV1_Format = 35840;\r\nexport const RGB_PVRTC_2BPPV1_Format = 35841;\r\nexport const RGBA_PVRTC_4BPPV1_Format = 35842;\r\nexport const RGBA_PVRTC_2BPPV1_Format = 35843;\r\nexport const RGB_ETC1_Format = 36196;\r\nexport const RGB_ETC2_Format = 37492;\r\nexport const RGBA_ETC2_EAC_Format = 37496;\r\nexport const RGBA_ASTC_4x4_Format = 37808;\r\nexport const RGBA_ASTC_5x4_Format = 37809;\r\nexport const RGBA_ASTC_5x5_Format = 37810;\r\nexport const RGBA_ASTC_6x5_Format = 37811;\r\nexport const RGBA_ASTC_6x6_Format = 37812;\r\nexport const RGBA_ASTC_8x5_Format = 37813;\r\nexport const RGBA_ASTC_8x6_Format = 37814;\r\nexport const RGBA_ASTC_8x8_Format = 37815;\r\nexport const RGBA_ASTC_10x5_Format = 37816;\r\nexport const RGBA_ASTC_10x6_Format = 37817;\r\nexport const RGBA_ASTC_10x8_Format = 37818;\r\nexport const RGBA_ASTC_10x10_Format = 37819;\r\nexport const RGBA_ASTC_12x10_Format = 37820;\r\nexport const RGBA_ASTC_12x12_Format = 37821;\r\nexport const RGBA_BPTC_Format = 36492;\r\nexport const RGB_BPTC_SIGNED_Format = 36494;\r\nexport const RGB_BPTC_UNSIGNED_Format = 36495;\r\nexport const RED_RGTC1_Format = 36283;\r\nexport const SIGNED_RED_RGTC1_Format = 36284;\r\nexport const RED_GREEN_RGTC2_Format = 36285;\r\nexport const SIGNED_RED_GREEN_RGTC2_Format = 36286;\r\nexport const LoopOnce = 2200;\r\nexport const LoopRepeat = 2201;\r\nexport const LoopPingPong = 2202;\r\nexport const InterpolateDiscrete = 2300;\r\nexport const InterpolateLinear = 2301;\r\nexport const InterpolateSmooth = 2302;\r\nexport const ZeroCurvatureEnding = 2400;\r\nexport const ZeroSlopeEnding = 2401;\r\nexport const WrapAroundEnding = 2402;\r\nexport const NormalAnimationBlendMode = 2500;\r\nexport const AdditiveAnimationBlendMode = 2501;\r\nexport const TrianglesDrawMode = 0;\r\nexport const TriangleStripDrawMode = 1;\r\nexport const TriangleFanDrawMode = 2;\r\nexport const BasicDepthPacking = 3200;\r\nexport const RGBADepthPacking = 3201;\r\nexport const RGBDepthPacking = 3202;\r\nexport const RGDepthPacking = 3203;\r\nexport const TangentSpaceNormalMap = 0;\r\nexport const ObjectSpaceNormalMap = 1;\r\n\r\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\r\nexport const NoColorSpace = '';\r\nexport const SRGBColorSpace = 'srgb';\r\nexport const LinearSRGBColorSpace = 'srgb-linear';\r\nexport const DisplayP3ColorSpace = 'display-p3';\r\nexport const LinearDisplayP3ColorSpace = 'display-p3-linear';\r\n\r\nexport const LinearTransfer = 'linear';\r\nexport const SRGBTransfer = 'srgb';\r\n\r\nexport const Rec709Primaries = 'rec709';\r\nexport const P3Primaries = 'p3';\r\n\r\nexport const ZeroStencilOp = 0;\r\nexport const KeepStencilOp = 7680;\r\nexport const ReplaceStencilOp = 7681;\r\nexport const IncrementStencilOp = 7682;\r\nexport const DecrementStencilOp = 7683;\r\nexport const IncrementWrapStencilOp = 34055;\r\nexport const DecrementWrapStencilOp = 34056;\r\nexport const InvertStencilOp = 5386;\r\n\r\nexport const NeverStencilFunc = 512;\r\nexport const LessStencilFunc = 513;\r\nexport const EqualStencilFunc = 514;\r\nexport const LessEqualStencilFunc = 515;\r\nexport const GreaterStencilFunc = 516;\r\nexport const NotEqualStencilFunc = 517;\r\nexport const GreaterEqualStencilFunc = 518;\r\nexport const AlwaysStencilFunc = 519;\r\n\r\nexport const NeverCompare = 512;\r\nexport const LessCompare = 513;\r\nexport const EqualCompare = 514;\r\nexport const LessEqualCompare = 515;\r\nexport const GreaterCompare = 516;\r\nexport const NotEqualCompare = 517;\r\nexport const GreaterEqualCompare = 518;\r\nexport const AlwaysCompare = 519;\r\n\r\nexport const StaticDrawUsage = 35044;\r\nexport const DynamicDrawUsage = 35048;\r\nexport const StreamDrawUsage = 35040;\r\nexport const StaticReadUsage = 35045;\r\nexport const DynamicReadUsage = 35049;\r\nexport const StreamReadUsage = 35041;\r\nexport const StaticCopyUsage = 35046;\r\nexport const DynamicCopyUsage = 35050;\r\nexport const StreamCopyUsage = 35042;\r\n\r\nexport const GLSL1 = '100';\r\nexport const GLSL3 = '300 es';\r\n\r\nexport const WebGLCoordinateSystem = 2000;\r\nexport const WebGPUCoordinateSystem = 2001;\r\n", "class Matrix3 {\r\n\r\n\tconstructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tMatrix3.prototype.isMatrix3 = true;\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( n11 !== undefined ) {\r\n\r\n\t\t\tthis.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( m ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\r\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\r\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\textractBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrix3Column( this, 0 );\r\n\t\tyAxis.setFromMatrix3Column( this, 1 );\r\n\t\tzAxis.setFromMatrix3Column( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrix4( m ) {\r\n\r\n\t\tconst me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\r\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\r\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t}\r\n\r\n\tpremultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t}\r\n\r\n\tmultiplyMatrices( a, b ) {\r\n\r\n\t\tconst ae = a.elements;\r\n\t\tconst be = b.elements;\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\r\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\r\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\r\n\r\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\r\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\r\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdeterminant() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\tconst te = this.elements,\r\n\r\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\r\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\r\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\r\n\r\n\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\r\n\r\n\t\tconst detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\tte[ 3 ] = t12 * detInv;\r\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\tte[ 6 ] = t13 * detInv;\r\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranspose() {\r\n\r\n\t\tlet tmp;\r\n\t\tconst m = this.elements;\r\n\r\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetNormalMatrix( matrix4 ) {\r\n\r\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\r\n\r\n\t}\r\n\r\n\ttransposeIntoArray( r ) {\r\n\r\n\t\tconst m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\t\tconst c = Math.cos( rotation );\r\n\t\tconst s = Math.sin( rotation );\r\n\r\n\t\tthis.set(\r\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t\t0, 0, 1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tscale( sx, sy ) {\r\n\r\n\t\tthis.premultiply( _m3.makeScale( sx, sy ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotate( theta ) {\r\n\r\n\t\tthis.premultiply( _m3.makeRotation( - theta ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( tx, ty ) {\r\n\r\n\t\tthis.premultiply( _m3.makeTranslation( tx, ty ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// for 2D Transforms\r\n\r\n\tmakeTranslation( x, y ) {\r\n\r\n\t\tif ( x.isVector2 ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, x.x,\r\n\t\t\t\t0, 1, x.y,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, x,\r\n\t\t\t\t0, 1, y,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotation( theta ) {\r\n\r\n\t\t// counterclockwise\r\n\r\n\t\tconst c = Math.cos( theta );\r\n\t\tconst s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0,\r\n\t\t\ts, c, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeScale( x, y ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0,\r\n\t\t\t0, y, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tequals( matrix ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = matrix.elements;\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _m3 = /*@__PURE__*/ new Matrix3();\r\n\r\nexport { Matrix3 };\r\n", "import { SRGBColorSpace, LinearSRGBColorSpace, DisplayP3ColorSpace, LinearDisplayP3ColorSpace, Rec709Primaries, P3Primaries, SRGBTransfer, LinearTransfer, NoColorSpace, } from '../constants.js';\r\nimport { Matrix3 } from './Matrix3.js';\r\n\r\n/**\r\n * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping\r\n * or clipping. Based on W3C specifications for sRGB and Display P3,\r\n * and ICC specifications for the D50 connection space. Values in/out\r\n * are _linear_ sRGB and _linear_ Display P3.\r\n *\r\n * Note that both sRGB and Display P3 use the sRGB transfer functions.\r\n *\r\n * Reference:\r\n * - http://www.russellcottrell.com/photo/matrixCalculator.htm\r\n */\r\n\r\nconst LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/ new Matrix3().set(\r\n\t0.8224621, 0.177538, 0.0,\r\n\t0.0331941, 0.9668058, 0.0,\r\n\t0.0170827, 0.0723974, 0.9105199,\r\n);\r\n\r\nconst LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/ new Matrix3().set(\r\n\t1.2249401, - 0.2249404, 0.0,\r\n\t- 0.0420569, 1.0420571, 0.0,\r\n\t- 0.0196376, - 0.0786361, 1.0982735\r\n);\r\n\r\n/**\r\n * Defines supported color spaces by transfer function and primaries,\r\n * and provides conversions to/from the Linear-sRGB reference space.\r\n */\r\nconst COLOR_SPACES = {\r\n\t[ LinearSRGBColorSpace ]: {\r\n\t\ttransfer: LinearTransfer,\r\n\t\tprimaries: Rec709Primaries,\r\n\t\tluminanceCoefficients: [ 0.2126, 0.7152, 0.0722 ],\r\n\t\ttoReference: ( color ) => color,\r\n\t\tfromReference: ( color ) => color,\r\n\t},\r\n\t[ SRGBColorSpace ]: {\r\n\t\ttransfer: SRGBTransfer,\r\n\t\tprimaries: Rec709Primaries,\r\n\t\tluminanceCoefficients: [ 0.2126, 0.7152, 0.0722 ],\r\n\t\ttoReference: ( color ) => color.convertSRGBToLinear(),\r\n\t\tfromReference: ( color ) => color.convertLinearToSRGB(),\r\n\t},\r\n\t[ LinearDisplayP3ColorSpace ]: {\r\n\t\ttransfer: LinearTransfer,\r\n\t\tprimaries: P3Primaries,\r\n\t\tluminanceCoefficients: [ 0.2289, 0.6917, 0.0793 ],\r\n\t\ttoReference: ( color ) => color.applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB ),\r\n\t\tfromReference: ( color ) => color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ),\r\n\t},\r\n\t[ DisplayP3ColorSpace ]: {\r\n\t\ttransfer: SRGBTransfer,\r\n\t\tprimaries: P3Primaries,\r\n\t\tluminanceCoefficients: [ 0.2289, 0.6917, 0.0793 ],\r\n\t\ttoReference: ( color ) => color.convertSRGBToLinear().applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB ),\r\n\t\tfromReference: ( color ) => color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ).convertLinearToSRGB(),\r\n\t},\r\n};\r\n\r\nconst SUPPORTED_WORKING_COLOR_SPACES = new Set( [ LinearSRGBColorSpace, LinearDisplayP3ColorSpace ] );\r\n\r\nexport const ColorManagement = {\r\n\r\n\tenabled: true,\r\n\r\n\t_workingColorSpace: LinearSRGBColorSpace,\r\n\r\n\tget workingColorSpace() {\r\n\r\n\t\treturn this._workingColorSpace;\r\n\r\n\t},\r\n\r\n\tset workingColorSpace( colorSpace ) {\r\n\r\n\t\tif ( ! SUPPORTED_WORKING_COLOR_SPACES.has( colorSpace ) ) {\r\n\r\n\t\t\tthrow new Error( `Unsupported working color space, \"${ colorSpace }\".` );\r\n\r\n\t\t}\r\n\r\n\t\tthis._workingColorSpace = colorSpace;\r\n\r\n\t},\r\n\r\n\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\r\n\r\n\t\tif ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\r\n\r\n\t\t\treturn color;\r\n\r\n\t\t}\r\n\r\n\t\tconst sourceToReference = COLOR_SPACES[ sourceColorSpace ].toReference;\r\n\t\tconst targetFromReference = COLOR_SPACES[ targetColorSpace ].fromReference;\r\n\r\n\t\treturn targetFromReference( sourceToReference( color ) );\r\n\r\n\t},\r\n\r\n\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\r\n\r\n\t\treturn this.convert( color, this._workingColorSpace, targetColorSpace );\r\n\r\n\t},\r\n\r\n\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\r\n\r\n\t\treturn this.convert( color, sourceColorSpace, this._workingColorSpace );\r\n\r\n\t},\r\n\r\n\tgetPrimaries: function ( colorSpace ) {\r\n\r\n\t\treturn COLOR_SPACES[ colorSpace ].primaries;\r\n\r\n\t},\r\n\r\n\tgetTransfer: function ( colorSpace ) {\r\n\r\n\t\tif ( colorSpace === NoColorSpace ) return LinearTransfer;\r\n\r\n\t\treturn COLOR_SPACES[ colorSpace ].transfer;\r\n\r\n\t},\r\n\r\n\tgetLuminanceCoefficients: function ( target, colorSpace = this._workingColorSpace ) {\r\n\r\n\t\treturn target.fromArray( COLOR_SPACES[ colorSpace ].luminanceCoefficients );\r\n\r\n\t},\r\n\r\n};\r\n\r\n\r\nexport function SRGBToLinear( c ) {\r\n\r\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\r\n\r\n}\r\n\r\nexport function LinearToSRGB( c ) {\r\n\r\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\r\n\r\n}\r\n", "import { clamp, euclideanModulo, lerp } from './MathUtils.js';\r\nimport { ColorManagement, SRGBToLinear, LinearToSRGB } from './ColorManagement.js';\r\nimport { SRGBColorSpace } from '../constants.js';\r\n\r\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\nconst _hslA = { h: 0, s: 0, l: 0 };\r\nconst _hslB = { h: 0, s: 0, l: 0 };\r\n\r\nfunction hue2rgb( p, q, t ) {\r\n\r\n\tif ( t < 0 ) t += 1;\r\n\tif ( t > 1 ) t -= 1;\r\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\tif ( t < 1 / 2 ) return q;\r\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\treturn p;\r\n\r\n}\r\n\r\nclass Color {\r\n\r\n\tconstructor( r, g, b ) {\r\n\r\n\t\tthis.isColor = true;\r\n\r\n\t\tthis.r = 1;\r\n\t\tthis.g = 1;\r\n\t\tthis.b = 1;\r\n\r\n\t\treturn this.set( r, g, b );\r\n\r\n\t}\r\n\r\n\tset( r, g, b ) {\r\n\r\n\t\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t\t// r is THREE.Color, hex or string\r\n\r\n\t\t\tconst value = r;\r\n\r\n\t\t\tif ( value && value.isColor ) {\r\n\r\n\t\t\t\tthis.copy( value );\r\n\r\n\t\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\t\tthis.setHex( value );\r\n\r\n\t\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\t\tthis.setStyle( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.setRGB( r, g, b );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.r = scalar;\r\n\t\tthis.g = scalar;\r\n\t\tthis.b = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\th = euclideanModulo( h, 1 );\r\n\t\ts = clamp( s, 0, 1 );\r\n\t\tl = clamp( l, 0, 1 );\r\n\r\n\t\tif ( s === 0 ) {\r\n\r\n\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\tconst q = ( 2 * l ) - p;\r\n\r\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t}\r\n\r\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\tif ( string === undefined ) return;\r\n\r\n\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tlet m;\r\n\r\n\t\tif ( m = /^(\\w+)\\(([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t// rgb / hsl\r\n\r\n\t\t\tlet color;\r\n\t\t\tconst name = m[ 1 ];\r\n\t\t\tconst components = m[ 2 ];\r\n\r\n\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\tcase 'rgb':\r\n\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this.setRGB(\r\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,\r\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,\r\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,\r\n\t\t\t\t\t\t\tcolorSpace\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this.setRGB(\r\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,\r\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,\r\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,\r\n\t\t\t\t\t\t\tcolorSpace\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'hsl':\r\n\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this.setHSL(\r\n\t\t\t\t\t\t\tparseFloat( color[ 1 ] ) / 360,\r\n\t\t\t\t\t\t\tparseFloat( color[ 2 ] ) / 100,\r\n\t\t\t\t\t\t\tparseFloat( color[ 3 ] ) / 100,\r\n\t\t\t\t\t\t\tcolorSpace\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color model ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\r\n\r\n\t\t\t// hex color\r\n\r\n\t\t\tconst hex = m[ 1 ];\r\n\t\t\tconst size = hex.length;\r\n\r\n\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t// #ff0\r\n\t\t\t\treturn this.setRGB(\r\n\t\t\t\t\tparseInt( hex.charAt( 0 ), 16 ) / 15,\r\n\t\t\t\t\tparseInt( hex.charAt( 1 ), 16 ) / 15,\r\n\t\t\t\t\tparseInt( hex.charAt( 2 ), 16 ) / 15,\r\n\t\t\t\t\tcolorSpace\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t// #ff0000\r\n\t\t\t\treturn this.setHex( parseInt( hex, 16 ), colorSpace );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Invalid hex color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( style && style.length > 0 ) {\r\n\r\n\t\t\treturn this.setColorName( style, colorSpace );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\t// color keywords\r\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\r\n\r\n\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t// red\r\n\t\t\tthis.setHex( hex, colorSpace );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// unknown color\r\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t}\r\n\r\n\tcopy( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopySRGBToLinear( color ) {\r\n\r\n\t\tthis.r = SRGBToLinear( color.r );\r\n\t\tthis.g = SRGBToLinear( color.g );\r\n\t\tthis.b = SRGBToLinear( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyLinearToSRGB( color ) {\r\n\r\n\t\tthis.r = LinearToSRGB( color.r );\r\n\t\tthis.g = LinearToSRGB( color.g );\r\n\t\tthis.b = LinearToSRGB( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tconvertSRGBToLinear() {\r\n\r\n\t\tthis.copySRGBToLinear( this );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tconvertLinearToSRGB() {\r\n\r\n\t\tthis.copyLinearToSRGB( this );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetHex( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\treturn Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );\r\n\r\n\t}\r\n\r\n\tgetHexString( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );\r\n\r\n\t}\r\n\r\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\r\n\r\n\t\tconst max = Math.max( r, g, b );\r\n\t\tconst min = Math.min( r, g, b );\r\n\r\n\t\tlet hue, saturation;\r\n\t\tconst lightness = ( min + max ) / 2.0;\r\n\r\n\t\tif ( min === max ) {\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst delta = max - min;\r\n\r\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.h = hue;\r\n\t\ttarget.s = saturation;\r\n\t\ttarget.l = lightness;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\ttarget.r = _color.r;\r\n\t\ttarget.g = _color.g;\r\n\t\ttarget.b = _color.b;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetStyle( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\r\n\r\n\t\tif ( colorSpace !== SRGBColorSpace ) {\r\n\r\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\r\n\t\t\treturn `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;\r\n\r\n\t\t}\r\n\r\n\t\treturn `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;\r\n\r\n\t}\r\n\r\n\toffsetHSL( h, s, l ) {\r\n\r\n\t\tthis.getHSL( _hslA );\r\n\r\n\t\treturn this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );\r\n\r\n\t}\r\n\r\n\tadd( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddColors( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( color ) {\r\n\r\n\t\tthis.r = Math.max( 0, this.r - color.r );\r\n\t\tthis.g = Math.max( 0, this.g - color.g );\r\n\t\tthis.b = Math.max( 0, this.b - color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerp( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpColors( color1, color2, alpha ) {\r\n\r\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\r\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\r\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpHSL( color, alpha ) {\r\n\r\n\t\tthis.getHSL( _hslA );\r\n\t\tcolor.getHSL( _hslB );\r\n\r\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\r\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\r\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\r\n\r\n\t\tthis.setHSL( h, s, l );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromVector3( v ) {\r\n\r\n\t\tthis.r = v.x;\r\n\t\tthis.g = v.y;\r\n\t\tthis.b = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst r = this.r, g = this.g, b = this.b;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;\r\n\t\tthis.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;\r\n\t\tthis.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( c ) {\r\n\r\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.r = array[ offset ];\r\n\t\tthis.g = array[ offset + 1 ];\r\n\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.r;\r\n\t\tarray[ offset + 1 ] = this.g;\r\n\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.r = attribute.getX( index );\r\n\t\tthis.g = attribute.getY( index );\r\n\t\tthis.b = attribute.getZ( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\treturn this.getHex();\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.r;\r\n\t\tyield this.g;\r\n\t\tyield this.b;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _color = /*@__PURE__*/ new Color();\r\n\r\nColor.NAMES = _colorKeywords;\r\n\r\nexport { Color };\r\n", "import { Color } from '../../math/Color.js';\r\n\r\nclass Color4 extends Color {\r\n\r\n\tconstructor( r, g, b, a = 1 ) {\r\n\r\n\t\tsuper( r, g, b );\r\n\r\n\t\tthis.a = a;\r\n\r\n\t}\r\n\r\n\tset( r, g, b, a = 1 ) {\r\n\r\n\t\tthis.a = a;\r\n\r\n\t\treturn super.set( r, g, b );\r\n\r\n\t}\r\n\r\n\tcopy( color ) {\r\n\r\n\t\tif ( color.a !== undefined ) this.a = color.a;\r\n\r\n\t\treturn super.copy( color );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b, this.a );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Color4;\r\n", "export const NodeShaderStage = {\r\n\tVERTEX: 'vertex',\r\n\tFRAGMENT: 'fragment'\r\n};\r\n\r\nexport const NodeUpdateType = {\r\n\tNONE: 'none',\r\n\tFRAME: 'frame',\r\n\tRENDER: 'render',\r\n\tOBJECT: 'object'\r\n};\r\n\r\nexport const NodeType = {\r\n\tBOOLEAN: 'bool',\r\n\tINTEGER: 'int',\r\n\tFLOAT: 'float',\r\n\tVECTOR2: 'vec2',\r\n\tVECTOR3: 'vec3',\r\n\tVECTOR4: 'vec4',\r\n\tMATRIX2: 'mat2',\r\n\tMATRIX3: 'mat3',\r\n\tMATRIX4: 'mat4'\r\n};\r\n\r\nexport const defaultShaderStages = [ 'fragment', 'vertex' ];\r\nexport const defaultBuildStages = [ 'setup', 'analyze', 'generate' ];\r\nexport const shaderStages = [ ...defaultShaderStages, 'compute' ];\r\nexport const vectorComponents = [ 'x', 'y', 'z', 'w' ];\r\n", "import * as MathUtils from './MathUtils.js';\r\n\r\nclass Quaternion {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\r\n\r\n\t\tthis.isQuaternion = true;\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t}\r\n\r\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\r\n\r\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\r\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tif ( t === 0 ) {\r\n\r\n\t\t\tdst[ dstOffset + 0 ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tdst[ dstOffset + 0 ] = x1;\r\n\t\t\tdst[ dstOffset + 1 ] = y1;\r\n\t\t\tdst[ dstOffset + 2 ] = z1;\r\n\t\t\tdst[ dstOffset + 3 ] = w1;\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\tlet s = 1 - t;\r\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst tDir = t * dir;\r\n\r\n\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\tx0 *= f;\r\n\t\t\t\ty0 *= f;\r\n\t\t\t\tz0 *= f;\r\n\t\t\t\tw0 *= f;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdst[ dstOffset ] = x0;\r\n\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t}\r\n\r\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\r\n\r\n\t\tconst x0 = src0[ srcOffset0 ];\r\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\r\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\r\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\r\n\r\n\t\tconst x1 = src1[ srcOffset1 ];\r\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\r\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\r\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\r\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\r\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\r\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\r\n\r\n\t\treturn dst;\r\n\r\n\t}\r\n\r\n\tget x() {\r\n\r\n\t\treturn this._x;\r\n\r\n\t}\r\n\r\n\tset x( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget y() {\r\n\r\n\t\treturn this._y;\r\n\r\n\t}\r\n\r\n\tset y( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget z() {\r\n\r\n\t\treturn this._z;\r\n\r\n\t}\r\n\r\n\tset z( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget w() {\r\n\r\n\t\treturn this._w;\r\n\r\n\t}\r\n\r\n\tset w( value ) {\r\n\r\n\t\tthis._w = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tset( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t}\r\n\r\n\tcopy( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromEuler( euler, update = true ) {\r\n\r\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tconst cos = Math.cos;\r\n\t\tconst sin = Math.sin;\r\n\r\n\t\tconst c1 = cos( x / 2 );\r\n\t\tconst c2 = cos( y / 2 );\r\n\t\tconst c3 = cos( z / 2 );\r\n\r\n\t\tconst s1 = sin( x / 2 );\r\n\t\tconst s2 = sin( y / 2 );\r\n\t\tconst s3 = sin( z / 2 );\r\n\r\n\t\tswitch ( order ) {\r\n\r\n\t\t\tcase 'XYZ':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YXZ':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZXY':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZYX':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YZX':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'XZY':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tif ( update === true ) this._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromAxisAngle( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromRotationMatrix( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tconst te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromUnitVectors( vFrom, vTo ) {\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tlet r = vFrom.dot( vTo ) + 1;\r\n\r\n\t\tif ( r < Number.EPSILON ) {\r\n\r\n\t\t\t// vFrom and vTo point in opposite directions\r\n\r\n\t\t\tr = 0;\r\n\r\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\tthis._x = - vFrom.y;\r\n\t\t\t\tthis._y = vFrom.x;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = - vFrom.z;\r\n\t\t\t\tthis._z = vFrom.y;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n\r\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t}\r\n\r\n\tangleTo( q ) {\r\n\r\n\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t}\r\n\r\n\trotateTowards( q, step ) {\r\n\r\n\t\tconst angle = this.angleTo( q );\r\n\r\n\t\tif ( angle === 0 ) return this;\r\n\r\n\t\tconst t = Math.min( 1, step / angle );\r\n\r\n\t\tthis.slerp( q, t );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\treturn this.set( 0, 0, 0, 1 );\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\t// quaternion is assumed to have unit length\r\n\r\n\t\treturn this.conjugate();\r\n\r\n\t}\r\n\r\n\tconjugate() {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t}\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\tlet l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t}\r\n\r\n\tpremultiply( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t}\r\n\r\n\tmultiplyQuaternions( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tslerp( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\tconst s = 1 - t;\r\n\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\tthis.normalize(); // normalize calls _onChangeCallback()\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tslerpQuaternions( qa, qb, t ) {\r\n\r\n\t\treturn this.copy( qa ).slerp( qb, t );\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\t// sets this quaternion to a uniform random unit quaternnion\r\n\r\n\t\t// Ken Shoemake\r\n\t\t// Uniform random rotations\r\n\t\t// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\r\n\r\n\t\tconst theta1 = 2 * Math.PI * Math.random();\r\n\t\tconst theta2 = 2 * Math.PI * Math.random();\r\n\r\n\t\tconst x0 = Math.random();\r\n\t\tconst r1 = Math.sqrt( 1 - x0 );\r\n\t\tconst r2 = Math.sqrt( x0 );\r\n\r\n\t\treturn this.set(\r\n\t\t\tr1 * Math.sin( theta1 ),\r\n\t\t\tr1 * Math.cos( theta1 ),\r\n\t\t\tr2 * Math.sin( theta2 ),\r\n\t\t\tr2 * Math.cos( theta2 ),\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tequals( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis._x = attribute.getX( index );\r\n\t\tthis._y = attribute.getY( index );\r\n\t\tthis._z = attribute.getZ( index );\r\n\t\tthis._w = attribute.getW( index );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\treturn this.toArray();\r\n\r\n\t}\r\n\r\n\t_onChange( callback ) {\r\n\r\n\t\tthis._onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_onChangeCallback() {}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this._x;\r\n\t\tyield this._y;\r\n\t\tyield this._z;\r\n\t\tyield this._w;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Quaternion };\r\n", "import * as MathUtils from './MathUtils.js';\r\nimport { Quaternion } from './Quaternion.js';\r\n\r\nclass Vector3 {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0 ) {\r\n\r\n\t\tVector3.prototype.isVector3 = true;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t}\r\n\r\n\tset( x, y, z ) {\r\n\r\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetZ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyEuler( euler ) {\r\n\r\n\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\r\n\r\n\t}\r\n\r\n\tapplyAxisAngle( axis, angle ) {\r\n\r\n\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\treturn this.applyMatrix3( m ).normalize();\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\t// quaternion q is assumed to have unit length\r\n\r\n\t\tconst vx = this.x, vy = this.y, vz = this.z;\r\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t// t = 2 * cross( q.xyz, v );\r\n\t\tconst tx = 2 * ( qy * vz - qz * vy );\r\n\t\tconst ty = 2 * ( qz * vx - qx * vz );\r\n\t\tconst tz = 2 * ( qx * vy - qy * vx );\r\n\r\n\t\t// v + q.w * t + cross( q.xyz, t );\r\n\t\tthis.x = vx + qw * tx + qy * tz - qz * ty;\r\n\t\tthis.y = vy + qw * ty + qz * tx - qx * tz;\r\n\t\tthis.z = vz + qw * tz + qx * ty - qy * tx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tproject( camera ) {\r\n\r\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t}\r\n\r\n\tunproject( camera ) {\r\n\r\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\r\n\r\n\t}\r\n\r\n\ttransformDirection( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t}\r\n\r\n\tdivide( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t}\r\n\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\troundToZero() {\r\n\r\n\t\tthis.x = Math.trunc( this.x );\r\n\t\tthis.y = Math.trunc( this.y );\r\n\t\tthis.z = Math.trunc( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t}\r\n\r\n\t// TODO lengthSquared?\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t}\r\n\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcross( v ) {\r\n\r\n\t\treturn this.crossVectors( this, v );\r\n\r\n\t}\r\n\r\n\tcrossVectors( a, b ) {\r\n\r\n\t\tconst ax = a.x, ay = a.y, az = a.z;\r\n\t\tconst bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tprojectOnVector( v ) {\r\n\r\n\t\tconst denominator = v.lengthSq();\r\n\r\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\r\n\r\n\t\tconst scalar = v.dot( this ) / denominator;\r\n\r\n\t\treturn this.copy( v ).multiplyScalar( scalar );\r\n\r\n\t}\r\n\r\n\tprojectOnPlane( planeNormal ) {\r\n\r\n\t\t_vector.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\treturn this.sub( _vector );\r\n\r\n\t}\r\n\r\n\treflect( normal ) {\r\n\r\n\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t// normal is assumed to have unit length\r\n\r\n\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t}\r\n\r\n\tangleTo( v ) {\r\n\r\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\tif ( denominator === 0 ) return Math.PI / 2;\r\n\r\n\t\tconst theta = this.dot( v ) / denominator;\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\r\n\r\n\t}\r\n\r\n\tdistanceTo( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t}\r\n\r\n\tdistanceToSquared( v ) {\r\n\r\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t}\r\n\r\n\tmanhattanDistanceTo( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t}\r\n\r\n\tsetFromSpherical( s ) {\r\n\r\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t}\r\n\r\n\tsetFromSphericalCoords( radius, phi, theta ) {\r\n\r\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCylindrical( c ) {\r\n\r\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t}\r\n\r\n\tsetFromCylindricalCoords( radius, theta, y ) {\r\n\r\n\t\tthis.x = radius * Math.sin( theta );\r\n\t\tthis.y = y;\r\n\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixPosition( m ) {\r\n\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 12 ];\r\n\t\tthis.y = e[ 13 ];\r\n\t\tthis.z = e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixScale( m ) {\r\n\r\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixColumn( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t}\r\n\r\n\tsetFromMatrix3Column( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 3 );\r\n\r\n\t}\r\n\r\n\tsetFromEuler( e ) {\r\n\r\n\t\tthis.x = e._x;\r\n\t\tthis.y = e._y;\r\n\t\tthis.z = e._z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromColor( c ) {\r\n\r\n\t\tthis.x = c.r;\r\n\t\tthis.y = c.g;\r\n\t\tthis.z = c.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\t\tthis.z = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandomDirection() {\r\n\r\n\t\t// https://mathworld.wolfram.com/SpherePointPicking.html\r\n\r\n\t\tconst theta = Math.random() * Math.PI * 2;\r\n\t\tconst u = Math.random() * 2 - 1;\r\n\t\tconst c = Math.sqrt( 1 - u * u );\r\n\r\n\t\tthis.x = c * Math.cos( theta );\r\n\t\tthis.y = u;\r\n\t\tthis.z = c * Math.sin( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\t\tyield this.z;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nexport { Vector3 };\r\n", "import { WebGLCoordinateSystem, WebGPUCoordinateSystem } from '../constants.js';\r\nimport { Vector3 } from './Vector3.js';\r\n\r\nclass Matrix4 {\r\n\r\n\tconstructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tMatrix4.prototype.isMatrix4 = true;\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( n11 !== undefined ) {\r\n\r\n\t\t\tthis.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t}\r\n\r\n\tcopy( m ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyPosition( m ) {\r\n\r\n\t\tconst te = this.elements, me = m.elements;\r\n\r\n\t\tte[ 12 ] = me[ 12 ];\r\n\t\tte[ 13 ] = me[ 13 ];\r\n\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrix3( m ) {\r\n\r\n\t\tconst me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\r\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\r\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\textractBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tthis.set(\r\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\textractRotation( m ) {\r\n\r\n\t\t// this method does not support reflection matrices\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tconst scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\tconst scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\tconst scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\tte[ 3 ] = 0;\r\n\r\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\tte[ 7 ] = 0;\r\n\r\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationFromEuler( euler ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\r\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\r\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\r\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - c * f;\r\n\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\tte[ 1 ] = a * f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\tte[ 4 ] = - a * f;\r\n\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\tte[ 2 ] = - a * d;\r\n\t\t\tte[ 6 ] = b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\tte[ 1 ] = c * f;\r\n\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\tte[ 2 ] = - d;\r\n\t\t\tte[ 6 ] = b * c;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\tte[ 1 ] = f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\tte[ 2 ] = - d * e;\r\n\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - f;\r\n\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\tte[ 6 ] = b * e;\r\n\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\t// bottom row\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// last column\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationFromQuaternion( q ) {\r\n\r\n\t\treturn this.compose( _zero, q, _one );\r\n\r\n\t}\r\n\r\n\tlookAt( eye, target, up ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\t_z.subVectors( eye, target );\r\n\r\n\t\tif ( _z.lengthSq() === 0 ) {\r\n\r\n\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t_z.z = 1;\r\n\r\n\t\t}\r\n\r\n\t\t_z.normalize();\r\n\t\t_x.crossVectors( up, _z );\r\n\r\n\t\tif ( _x.lengthSq() === 0 ) {\r\n\r\n\t\t\t// up and z are parallel\r\n\r\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t_z.x += 0.0001;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_z.z += 0.0001;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_z.normalize();\r\n\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t}\r\n\r\n\t\t_x.normalize();\r\n\t\t_y.crossVectors( _z, _x );\r\n\r\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\r\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\r\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t}\r\n\r\n\tpremultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t}\r\n\r\n\tmultiplyMatrices( a, b ) {\r\n\r\n\t\tconst ae = a.elements;\r\n\t\tconst be = b.elements;\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdeterminant() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t - n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t - n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t - n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t + n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n\ttranspose() {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tlet tmp;\r\n\r\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetPosition( x, y, z ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\tte[ 12 ] = x.x;\r\n\t\t\tte[ 13 ] = x.y;\r\n\t\t\tte[ 14 ] = x.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tte[ 12 ] = x;\r\n\t\t\tte[ 13 ] = y;\r\n\t\t\tte[ 14 ] = z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tconst te = this.elements,\r\n\r\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\r\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\r\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\r\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\r\n\r\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\r\n\r\n\t\tconst detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 4 ] = t12 * detInv;\r\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 8 ] = t13 * detInv;\r\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\tte[ 12 ] = t14 * detInv;\r\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tscale( v ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetMaxScaleOnAxis() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t}\r\n\r\n\tmakeTranslation( x, y, z ) {\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x.x,\r\n\t\t\t\t0, 1, 0, x.y,\r\n\t\t\t\t0, 0, 1, x.z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x,\r\n\t\t\t\t0, 1, 0, y,\r\n\t\t\t\t0, 0, 1, z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationX( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, c, - s, 0,\r\n\t\t\t0, s, c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationY( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t- s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationZ( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0, 0,\r\n\t\t\ts, c, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationAxis( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tconst c = Math.cos( angle );\r\n\t\tconst s = Math.sin( angle );\r\n\t\tconst t = 1 - c;\r\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\r\n\t\tconst tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeScale( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, yx, zx, 0,\r\n\t\t\txy, 1, zy, 0,\r\n\t\t\txz, yz, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcompose( position, quaternion, scale ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t\tte[ 1 ] = ( xy + wz ) * sx;\r\n\t\tte[ 2 ] = ( xz - wy ) * sx;\r\n\t\tte[ 3 ] = 0;\r\n\r\n\t\tte[ 4 ] = ( xy - wz ) * sy;\r\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t\tte[ 6 ] = ( yz + wx ) * sy;\r\n\t\tte[ 7 ] = 0;\r\n\r\n\t\tte[ 8 ] = ( xz + wy ) * sz;\r\n\t\tte[ 9 ] = ( yz - wx ) * sz;\r\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\tte[ 12 ] = position.x;\r\n\t\tte[ 13 ] = position.y;\r\n\t\tte[ 14 ] = position.z;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdecompose( position, quaternion, scale ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tlet sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\tconst sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\tconst sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t// if determine is negative, we need to invert one scale\r\n\t\tconst det = this.determinant();\r\n\t\tif ( det < 0 ) sx = - sx;\r\n\r\n\t\tposition.x = te[ 12 ];\r\n\t\tposition.y = te[ 13 ];\r\n\t\tposition.z = te[ 14 ];\r\n\r\n\t\t// scale the rotation part\r\n\t\t_m1.copy( this );\r\n\r\n\t\tconst invSX = 1 / sx;\r\n\t\tconst invSY = 1 / sy;\r\n\t\tconst invSZ = 1 / sz;\r\n\r\n\t\t_m1.elements[ 0 ] *= invSX;\r\n\t\t_m1.elements[ 1 ] *= invSX;\r\n\t\t_m1.elements[ 2 ] *= invSX;\r\n\r\n\t\t_m1.elements[ 4 ] *= invSY;\r\n\t\t_m1.elements[ 5 ] *= invSY;\r\n\t\t_m1.elements[ 6 ] *= invSY;\r\n\r\n\t\t_m1.elements[ 8 ] *= invSZ;\r\n\t\t_m1.elements[ 9 ] *= invSZ;\r\n\t\t_m1.elements[ 10 ] *= invSZ;\r\n\r\n\t\tquaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\tscale.x = sx;\r\n\t\tscale.y = sy;\r\n\t\tscale.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst x = 2 * near / ( right - left );\r\n\t\tconst y = 2 * near / ( top - bottom );\r\n\r\n\t\tconst a = ( right + left ) / ( right - left );\r\n\t\tconst b = ( top + bottom ) / ( top - bottom );\r\n\r\n\t\tlet c, d;\r\n\r\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tc = - ( far + near ) / ( far - near );\r\n\t\t\td = ( - 2 * far * near ) / ( far - near );\r\n\r\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\tc = - far / ( far - near );\r\n\t\t\td = ( - far * near ) / ( far - near );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );\r\n\r\n\t\t}\r\n\r\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a; \tte[ 12 ] = 0;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b; \tte[ 13 ] = 0;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c; \tte[ 14 ] = d;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst w = 1.0 / ( right - left );\r\n\t\tconst h = 1.0 / ( top - bottom );\r\n\t\tconst p = 1.0 / ( far - near );\r\n\r\n\t\tconst x = ( right + left ) * w;\r\n\t\tconst y = ( top + bottom ) * h;\r\n\r\n\t\tlet z, zInv;\r\n\r\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tz = ( far + near ) * p;\r\n\t\t\tzInv = - 2 * p;\r\n\r\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\tz = near * p;\r\n\t\t\tzInv = - 1 * p;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );\r\n\r\n\t\t}\r\n\r\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\t\tte[ 8 ] = 0; \t\tte[ 12 ] = - x;\r\n\t\tte[ 1 ] = 0; \t\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0; \t\tte[ 13 ] = - y;\r\n\t\tte[ 2 ] = 0; \t\tte[ 6 ] = 0;\t\tte[ 10 ] = zInv;\tte[ 14 ] = - z;\r\n\t\tte[ 3 ] = 0; \t\tte[ 7 ] = 0;\t\tte[ 11 ] = 0;\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( matrix ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = matrix.elements;\r\n\r\n\t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\r\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\r\nconst _x = /*@__PURE__*/ new Vector3();\r\nconst _y = /*@__PURE__*/ new Vector3();\r\nconst _z = /*@__PURE__*/ new Vector3();\r\n\r\nexport { Matrix4 };\r\n", "import * as MathUtils from './MathUtils.js';\r\n\r\nclass Vector2 {\r\n\r\n\tconstructor( x = 0, y = 0 ) {\r\n\r\n\t\tVector2.prototype.isVector2 = true;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t}\r\n\r\n\tget width() {\r\n\r\n\t\treturn this.x;\r\n\r\n\t}\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.x = value;\r\n\r\n\t}\r\n\r\n\tget height() {\r\n\r\n\t\treturn this.y;\r\n\r\n\t}\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.y = value;\r\n\r\n\t}\r\n\r\n\tset( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivide( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t}\r\n\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\troundToZero() {\r\n\r\n\t\tthis.x = Math.trunc( this.x );\r\n\t\tthis.y = Math.trunc( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t}\r\n\r\n\tcross( v ) {\r\n\r\n\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t}\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t}\r\n\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\tangle() {\r\n\r\n\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\r\n\r\n\t\treturn angle;\r\n\r\n\t}\r\n\r\n\tangleTo( v ) {\r\n\r\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\tif ( denominator === 0 ) return Math.PI / 2;\r\n\r\n\t\tconst theta = this.dot( v ) / denominator;\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\r\n\r\n\t}\r\n\r\n\tdistanceTo( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t}\r\n\r\n\tdistanceToSquared( v ) {\r\n\r\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t}\r\n\r\n\tmanhattanDistanceTo( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t}\r\n\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateAround( center, angle ) {\r\n\r\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\tconst x = this.x - center.x;\r\n\t\tconst y = this.y - center.y;\r\n\r\n\t\tthis.x = x * c - y * s + center.x;\r\n\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Vector2 };\r\n", "class Vector4 {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\r\n\r\n\t\tVector4.prototype.isVector4 = true;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t}\r\n\r\n\tget width() {\r\n\r\n\t\treturn this.z;\r\n\r\n\t}\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.z = value;\r\n\r\n\t}\r\n\r\n\tget height() {\r\n\r\n\t\treturn this.w;\r\n\r\n\t}\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.w = value;\r\n\r\n\t}\r\n\r\n\tset( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\t\tthis.w = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetZ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetW( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\t\tthis.w += v.w * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\t\tthis.w -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\t\tthis.w *= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\t\tthis.w *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\tsetAxisAngleFromQuaternion( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\tthis.x = 1;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = q.x / s;\r\n\t\t\tthis.y = q.y / s;\r\n\t\t\tthis.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetAxisAngleFromRotationMatrix( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tlet angle, x, y, z; // variables for result\r\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tconst xx = ( m11 + 1 ) / 2;\r\n\t\t\tconst yy = ( m22 + 1 ) / 2;\r\n\t\t\tconst zz = ( m33 + 1 ) / 2;\r\n\t\t\tconst xy = ( m12 + m21 ) / 4;\r\n\t\t\tconst xz = ( m13 + m31 ) / 4;\r\n\t\t\tconst yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixPosition( m ) {\r\n\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 12 ];\r\n\t\tthis.y = e[ 13 ];\r\n\t\tthis.z = e[ 14 ];\r\n\t\tthis.w = e[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t}\r\n\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\t\tthis.w = Math.round( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\troundToZero() {\r\n\r\n\t\tthis.x = Math.trunc( this.x );\r\n\t\tthis.y = Math.trunc( this.y );\r\n\t\tthis.z = Math.trunc( this.z );\r\n\t\tthis.w = Math.trunc( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\t\tthis.w = - this.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t}\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t}\r\n\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\r\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\t\tthis.w = attribute.getW( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\t\tthis.z = Math.random();\r\n\t\tthis.w = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\t\tyield this.z;\r\n\t\tyield this.w;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Vector4 };\r\n", "import { Color } from '../../math/Color.js';\r\nimport { Matrix3 } from '../../math/Matrix3.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\nexport function getCacheKey( object, force = false ) {\r\n\r\n\tlet cacheKey = '{';\r\n\r\n\tif ( object.isNode === true ) {\r\n\r\n\t\tcacheKey += object.id;\r\n\r\n\t}\r\n\r\n\tfor ( const { property, childNode } of getNodeChildren( object ) ) {\r\n\r\n\t\tcacheKey += ',' + property.slice( 0, - 4 ) + ':' + childNode.getCacheKey( force );\r\n\r\n\t}\r\n\r\n\tcacheKey += '}';\r\n\r\n\treturn cacheKey;\r\n\r\n}\r\n\r\nexport function* getNodeChildren( node, toJSON = false ) {\r\n\r\n\tfor ( const property in node ) {\r\n\r\n\t\t// Ignore private properties.\r\n\t\tif ( property.startsWith( '_' ) === true ) continue;\r\n\r\n\t\tconst object = node[ property ];\r\n\r\n\t\tif ( Array.isArray( object ) === true ) {\r\n\r\n\t\t\tfor ( let i = 0; i < object.length; i ++ ) {\r\n\r\n\t\t\t\tconst child = object[ i ];\r\n\r\n\t\t\t\tif ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {\r\n\r\n\t\t\t\t\tyield { property, index: i, childNode: child };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object && object.isNode === true ) {\r\n\r\n\t\t\tyield { property, childNode: object };\r\n\r\n\t\t} else if ( typeof object === 'object' ) {\r\n\r\n\t\t\tfor ( const subProperty in object ) {\r\n\r\n\t\t\t\tconst child = object[ subProperty ];\r\n\r\n\t\t\t\tif ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {\r\n\r\n\t\t\t\t\tyield { property, index: subProperty, childNode: child };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function getValueType( value ) {\r\n\r\n\tif ( value === undefined || value === null ) return null;\r\n\r\n\tconst typeOf = typeof value;\r\n\r\n\tif ( value.isNode === true ) {\r\n\r\n\t\treturn 'node';\r\n\r\n\t} else if ( typeOf === 'number' ) {\r\n\r\n\t\treturn 'float';\r\n\r\n\t} else if ( typeOf === 'boolean' ) {\r\n\r\n\t\treturn 'bool';\r\n\r\n\t} else if ( typeOf === 'string' ) {\r\n\r\n\t\treturn 'string';\r\n\r\n\t} else if ( typeOf === 'function' ) {\r\n\r\n\t\treturn 'shader';\r\n\r\n\t} else if ( value.isVector2 === true ) {\r\n\r\n\t\treturn 'vec2';\r\n\r\n\t} else if ( value.isVector3 === true ) {\r\n\r\n\t\treturn 'vec3';\r\n\r\n\t} else if ( value.isVector4 === true ) {\r\n\r\n\t\treturn 'vec4';\r\n\r\n\t} else if ( value.isMatrix3 === true ) {\r\n\r\n\t\treturn 'mat3';\r\n\r\n\t} else if ( value.isMatrix4 === true ) {\r\n\r\n\t\treturn 'mat4';\r\n\r\n\t} else if ( value.isColor === true ) {\r\n\r\n\t\treturn 'color';\r\n\r\n\t} else if ( value instanceof ArrayBuffer ) {\r\n\r\n\t\treturn 'ArrayBuffer';\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n}\r\n\r\nexport function getValueFromType( type, ...params ) {\r\n\r\n\tconst last4 = type ? type.slice( - 4 ) : undefined;\r\n\r\n\tif ( params.length === 1 ) { // ensure same behaviour as in NodeBuilder.format()\r\n\r\n\t\tif ( last4 === 'vec2' ) params = [ params[ 0 ], params[ 0 ] ];\r\n\t\telse if ( last4 === 'vec3' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ] ];\r\n\t\telse if ( last4 === 'vec4' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ], params[ 0 ] ];\r\n\r\n\t}\r\n\r\n\tif ( type === 'color' ) {\r\n\r\n\t\treturn new Color( ...params );\r\n\r\n\t} else if ( last4 === 'vec2' ) {\r\n\r\n\t\treturn new Vector2( ...params );\r\n\r\n\t} else if ( last4 === 'vec3' ) {\r\n\r\n\t\treturn new Vector3( ...params );\r\n\r\n\t} else if ( last4 === 'vec4' ) {\r\n\r\n\t\treturn new Vector4( ...params );\r\n\r\n\t} else if ( last4 === 'mat3' ) {\r\n\r\n\t\treturn new Matrix3( ...params );\r\n\r\n\t} else if ( last4 === 'mat4' ) {\r\n\r\n\t\treturn new Matrix4( ...params );\r\n\r\n\t} else if ( type === 'bool' ) {\r\n\r\n\t\treturn params[ 0 ] || false;\r\n\r\n\t} else if ( ( type === 'float' ) || ( type === 'int' ) || ( type === 'uint' ) ) {\r\n\r\n\t\treturn params[ 0 ] || 0;\r\n\r\n\t} else if ( type === 'string' ) {\r\n\r\n\t\treturn params[ 0 ] || '';\r\n\r\n\t} else if ( type === 'ArrayBuffer' ) {\r\n\r\n\t\treturn base64ToArrayBuffer( params[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n}\r\n\r\nexport function arrayBufferToBase64( arrayBuffer ) {\r\n\r\n\tlet chars = '';\r\n\r\n\tconst array = new Uint8Array( arrayBuffer );\r\n\r\n\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\tchars += String.fromCharCode( array[ i ] );\r\n\r\n\t}\r\n\r\n\treturn btoa( chars );\r\n\r\n}\r\n\r\nexport function base64ToArrayBuffer( base64 ) {\r\n\r\n\treturn Uint8Array.from( atob( base64 ), c => c.charCodeAt( 0 ) ).buffer;\r\n\r\n}\r\n", "/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\r\n\r\nclass EventDispatcher {\r\n\r\n\taddEventListener( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\r\n\t\tconst listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\thasEventListener( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return false;\r\n\r\n\t\tconst listeners = this._listeners;\r\n\r\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\r\n\r\n\t}\r\n\r\n\tremoveEventListener( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tconst listeners = this._listeners;\r\n\t\tconst listenerArray = listeners[ type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tconst index = listenerArray.indexOf( listener );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdispatchEvent( event ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tconst listeners = this._listeners;\r\n\t\tconst listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\t// Make a copy, in case listeners are removed while iterating.\r\n\t\t\tconst array = listenerArray.slice( 0 );\r\n\r\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tevent.target = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { EventDispatcher };\r\n", "import { NodeUpdateType } from './constants.js';\r\nimport { getNodeChildren, getCacheKey } from './NodeUtils.js';\r\n\r\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\r\nimport { MathUtils } from '../../math/MathUtils.js';\r\n\r\nconst NodeClasses = new Map();\r\n\r\nlet _nodeId = 0;\r\n\r\nclass Node extends EventDispatcher {\r\n\r\n\tconstructor( nodeType = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.nodeType = nodeType;\r\n\r\n\t\tthis.updateType = NodeUpdateType.NONE;\r\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\r\n\t\tthis.updateAfterType = NodeUpdateType.NONE;\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis._cacheKey = null;\r\n\t\tthis._cacheKeyVersion = 0;\r\n\r\n\t\tthis.global = false;\r\n\r\n\t\tthis.isNode = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _nodeId ++ } );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tget type() {\r\n\r\n\t\treturn this.constructor.type;\r\n\r\n\t}\r\n\r\n\tonUpdate( callback, updateType ) {\r\n\r\n\t\tthis.updateType = updateType;\r\n\t\tthis.update = callback.bind( this.getSelf() );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tonFrameUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.FRAME );\r\n\r\n\t}\r\n\r\n\tonRenderUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.RENDER );\r\n\r\n\t}\r\n\r\n\tonObjectUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.OBJECT );\r\n\r\n\t}\r\n\r\n\tonReference( callback ) {\r\n\r\n\t\tthis.updateReference = callback.bind( this.getSelf() );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetSelf() {\r\n\r\n\t\t// Returns non-node object.\r\n\r\n\t\treturn this.self || this;\r\n\r\n\t}\r\n\r\n\tupdateReference( /*state*/ ) {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisGlobal( /*builder*/ ) {\r\n\r\n\t\treturn this.global;\r\n\r\n\t}\r\n\r\n\t* getChildren() {\r\n\r\n\t\tfor ( const { childNode } of getNodeChildren( this ) ) {\r\n\r\n\t\t\tyield childNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\ttraverse( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tfor ( const childNode of this.getChildren() ) {\r\n\r\n\t\t\tchildNode.traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetCacheKey( force = false ) {\r\n\r\n\t\tforce = force || this.version !== this._cacheKeyVersion;\r\n\r\n\t\tif ( force === true || this._cacheKey === null ) {\r\n\r\n\t\t\tthis._cacheKey = getCacheKey( this, force );\r\n\t\t\tthis._cacheKeyVersion = this.version;\r\n\r\n\t\t}\r\n\r\n\t\treturn this._cacheKey;\r\n\r\n\t}\r\n\r\n\tgetHash( /*builder*/ ) {\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tgetUpdateType() {\r\n\r\n\t\treturn this.updateType;\r\n\r\n\t}\r\n\r\n\tgetUpdateBeforeType() {\r\n\r\n\t\treturn this.updateBeforeType;\r\n\r\n\t}\r\n\r\n\tgetUpdateAfterType() {\r\n\r\n\t\treturn this.updateAfterType;\r\n\r\n\t}\r\n\r\n\tgetElementType( builder ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst elementType = builder.getElementType( type );\r\n\r\n\t\treturn elementType;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( nodeProperties.outputNode ) {\r\n\r\n\t\t\treturn nodeProperties.outputNode.getNodeType( builder );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\tgetShared( builder ) {\r\n\r\n\t\tconst hash = this.getHash( builder );\r\n\t\tconst nodeFromHash = builder.getNodeFromHash( hash );\r\n\r\n\t\treturn nodeFromHash || this;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\tlet index = 0;\r\n\r\n\t\tfor ( const childNode of this.getChildren() ) {\r\n\r\n\t\t\tnodeProperties[ 'node' + index ++ ] = childNode;\r\n\r\n\t\t}\r\n\r\n\t\t// return a outputNode if exists\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\tincreaseUsage( builder ) {\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\t\tnodeData.usageCount = nodeData.usageCount === undefined ? 1 : nodeData.usageCount + 1;\r\n\r\n\t\treturn nodeData.usageCount;\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tconst usageCount = this.increaseUsage( builder );\r\n\r\n\t\tif ( usageCount === 1 ) {\r\n\r\n\t\t\t// node flow children\r\n\r\n\t\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\t\tfor ( const childNode of Object.values( nodeProperties ) ) {\r\n\r\n\t\t\t\tif ( childNode && childNode.isNode === true ) {\r\n\r\n\t\t\t\t\tchildNode.build( builder );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { outputNode } = builder.getNodeProperties( this );\r\n\r\n\t\tif ( outputNode && outputNode.isNode === true ) {\r\n\r\n\t\t\treturn outputNode.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateBefore( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tupdateAfter( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\tbuild( builder, output = null ) {\r\n\r\n\t\tconst refNode = this.getShared( builder );\r\n\r\n\t\tif ( this !== refNode ) {\r\n\r\n\t\t\treturn refNode.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.addNode( this );\r\n\t\tbuilder.addChain( this );\r\n\r\n\t\t/* Build stages expected results:\r\n\t\t\t- \"setup\"\t\t-> Node\r\n\t\t\t- \"analyze\"\t\t-> null\r\n\t\t\t- \"generate\"\t-> String\r\n\t\t*/\r\n\t\tlet result = null;\r\n\r\n\t\tconst buildStage = builder.getBuildStage();\r\n\r\n\t\tif ( buildStage === 'setup' ) {\r\n\r\n\t\t\tthis.updateReference( builder );\r\n\r\n\t\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\t\tif ( properties.initialized !== true ) {\r\n\r\n\t\t\t\tconst stackNodesBeforeSetup = builder.stack.nodes.length;\r\n\r\n\t\t\t\tproperties.initialized = true;\r\n\t\t\t\tproperties.outputNode = this.setup( builder );\r\n\r\n\t\t\t\tif ( properties.outputNode !== null && builder.stack.nodes.length !== stackNodesBeforeSetup ) {\r\n\r\n\t\t\t\t\tproperties.outputNode = builder.stack;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( const childNode of Object.values( properties ) ) {\r\n\r\n\t\t\t\t\tif ( childNode && childNode.isNode === true ) {\r\n\r\n\t\t\t\t\t\tchildNode.build( builder );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( buildStage === 'analyze' ) {\r\n\r\n\t\t\tthis.analyze( builder );\r\n\r\n\t\t} else if ( buildStage === 'generate' ) {\r\n\r\n\t\t\tconst isGenerateOnce = this.generate.length === 1;\r\n\r\n\t\t\tif ( isGenerateOnce ) {\r\n\r\n\t\t\t\tconst type = this.getNodeType( builder );\r\n\t\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\t\tresult = nodeData.snippet;\r\n\r\n\t\t\t\tif ( result === undefined ) {\r\n\r\n\t\t\t\t\tresult = this.generate( builder ) || '';\r\n\r\n\t\t\t\t\tnodeData.snippet = result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = builder.format( result, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = this.generate( builder, output ) || '';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.removeChain( this );\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tgetSerializeChildren() {\r\n\r\n\t\treturn getNodeChildren( this );\r\n\r\n\t}\r\n\r\n\tserialize( json ) {\r\n\r\n\t\tconst nodeChildren = this.getSerializeChildren();\r\n\r\n\t\tconst inputNodes = {};\r\n\r\n\t\tfor ( const { property, index, childNode } of nodeChildren ) {\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tif ( inputNodes[ property ] === undefined ) {\r\n\r\n\t\t\t\t\tinputNodes[ property ] = Number.isInteger( index ) ? [] : {};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinputNodes[ property ][ index ] = childNode.toJSON( json.meta ).uuid;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tinputNodes[ property ] = childNode.toJSON( json.meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( inputNodes ).length > 0 ) {\r\n\r\n\t\t\tjson.inputNodes = inputNodes;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdeserialize( json ) {\r\n\r\n\t\tif ( json.inputNodes !== undefined ) {\r\n\r\n\t\t\tconst nodes = json.meta.nodes;\r\n\r\n\t\t\tfor ( const property in json.inputNodes ) {\r\n\r\n\t\t\t\tif ( Array.isArray( json.inputNodes[ property ] ) ) {\r\n\r\n\t\t\t\t\tconst inputArray = [];\r\n\r\n\t\t\t\t\tfor ( const uuid of json.inputNodes[ property ] ) {\r\n\r\n\t\t\t\t\t\tinputArray.push( nodes[ uuid ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis[ property ] = inputArray;\r\n\r\n\t\t\t\t} else if ( typeof json.inputNodes[ property ] === 'object' ) {\r\n\r\n\t\t\t\t\tconst inputObject = {};\r\n\r\n\t\t\t\t\tfor ( const subProperty in json.inputNodes[ property ] ) {\r\n\r\n\t\t\t\t\t\tconst uuid = json.inputNodes[ property ][ subProperty ];\r\n\r\n\t\t\t\t\t\tinputObject[ subProperty ] = nodes[ uuid ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis[ property ] = inputObject;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconst uuid = json.inputNodes[ property ];\r\n\r\n\t\t\t\t\tthis[ property ] = nodes[ uuid ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst { uuid, type } = this;\r\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\r\n\t\tlet data = meta.nodes[ uuid ];\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tdata = {\r\n\t\t\t\tuuid,\r\n\t\t\t\ttype,\r\n\t\t\t\tmeta,\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.6,\r\n\t\t\t\t\ttype: 'Node',\r\n\t\t\t\t\tgenerator: 'Node.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tif ( isRoot !== true ) meta.nodes[ data.uuid ] = data;\r\n\r\n\t\t\tthis.serialize( data );\r\n\r\n\t\t\tdelete data.meta;\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Node;\r\n\r\nexport function addNodeClass( type, nodeClass ) {\r\n\r\n\tif ( typeof nodeClass !== 'function' || ! type ) throw new Error( `Node class ${ type } is not a class` );\r\n\tif ( NodeClasses.has( type ) ) {\r\n\r\n\t\tconsole.warn( `Redefinition of node class ${ type }` );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tNodeClasses.set( type, nodeClass );\r\n\tnodeClass.type = type;\r\n\r\n}\r\n\r\nexport function createNodeFromType( type ) {\r\n\r\n\tconst Class = NodeClasses.get( type );\r\n\r\n\tif ( Class !== undefined ) {\r\n\r\n\t\treturn new Class();\r\n\r\n\t}\r\n\r\n}\r\n", "import Node, { addNodeClass } from './Node.js';\r\n\r\nclass TempNode extends Node {\r\n\r\n\tconstructor( type ) {\r\n\r\n\t\tsuper( type );\r\n\r\n\t\tthis.isTempNode = true;\r\n\r\n\t}\r\n\r\n\thasDependencies( builder ) {\r\n\r\n\t\treturn builder.getDataFromNode( this ).usageCount > 1;\r\n\r\n\t}\r\n\r\n\tbuild( builder, output ) {\r\n\r\n\t\tconst buildStage = builder.getBuildStage();\r\n\r\n\t\tif ( buildStage === 'generate' ) {\r\n\r\n\t\t\tconst type = builder.getVectorType( this.getNodeType( builder, output ) );\r\n\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\tif ( nodeData.propertyName !== undefined ) {\r\n\r\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\r\n\r\n\t\t\t} else if ( type !== 'void' && output !== 'void' && this.hasDependencies( builder ) ) {\r\n\r\n\t\t\t\tconst snippet = super.build( builder, type );\r\n\r\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, null, type );\r\n\t\t\t\tconst propertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}` );\r\n\r\n\t\t\t\tnodeData.snippet = snippet;\r\n\t\t\t\tnodeData.propertyName = propertyName;\r\n\r\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn super.build( builder, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TempNode;\r\n\r\naddNodeClass( 'TempNode', TempNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\n\r\nclass ArrayElementNode extends Node { // @TODO: If extending from TempNode it breaks webgpu_compute\r\n\r\n\tconstructor( node, indexNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.indexNode = indexNode;\r\n\r\n\t\tthis.isArrayElementNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getElementType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst nodeSnippet = this.node.build( builder );\r\n\t\tconst indexSnippet = this.indexNode.build( builder, 'uint' );\r\n\r\n\t\treturn `${nodeSnippet}[ ${indexSnippet} ]`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ArrayElementNode;\r\n\r\naddNodeClass( 'ArrayElementNode', ArrayElementNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\n\r\nclass ConvertNode extends Node {\r\n\r\n\tconstructor( node, convertTo ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.convertTo = convertTo;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst requestType = this.node.getNodeType( builder );\r\n\r\n\t\tlet convertTo = null;\r\n\r\n\t\tfor ( const overloadingType of this.convertTo.split( '|' ) ) {\r\n\r\n\t\t\tif ( convertTo === null || builder.getTypeLength( requestType ) === builder.getTypeLength( overloadingType ) ) {\r\n\r\n\t\t\t\tconvertTo = overloadingType;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn convertTo;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.convertTo = this.convertTo;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.convertTo = data.convertTo;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst node = this.node;\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tconst snippet = node.build( builder, type );\r\n\r\n\t\treturn builder.format( snippet, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ConvertNode;\r\n\r\naddNodeClass( 'ConvertNode', ConvertNode );\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport TempNode from '../core/TempNode.js';\r\n\r\nclass JoinNode extends TempNode {\r\n\r\n\tconstructor( nodes = [], nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.nodes = nodes;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.nodeType !== null ) {\r\n\r\n\t\t\treturn builder.getVectorType( this.nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getTypeFromLength( this.nodes.reduce( ( count, cur ) => count + builder.getTypeLength( cur.getNodeType( builder ) ), 0 ) );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst nodes = this.nodes;\r\n\r\n\t\tconst primitiveType = builder.getComponentType( type );\r\n\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tfor ( const input of nodes ) {\r\n\r\n\t\t\tlet inputSnippet = input.build( builder );\r\n\r\n\t\t\tconst inputPrimitiveType = builder.getComponentType( input.getNodeType( builder ) );\r\n\r\n\t\t\tif ( inputPrimitiveType !== primitiveType ) {\r\n\r\n\t\t\t\tinputSnippet = builder.format( inputSnippet, inputPrimitiveType, primitiveType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsnippetValues.push( inputSnippet );\r\n\r\n\t\t}\r\n\r\n\t\tconst snippet = `${ builder.getType( type ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t\treturn builder.format( snippet, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default JoinNode;\r\n\r\naddNodeClass( 'JoinNode', JoinNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nconst stringVectorComponents = vectorComponents.join( '' );\r\n\r\nclass SplitNode extends Node {\r\n\r\n\tconstructor( node, components = 'x' ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.components = components;\r\n\r\n\t\tthis.isSplitNode = true;\r\n\r\n\t}\r\n\r\n\tgetVectorLength() {\r\n\r\n\t\tlet vectorLength = this.components.length;\r\n\r\n\t\tfor ( const c of this.components ) {\r\n\r\n\t\t\tvectorLength = Math.max( vectorComponents.indexOf( c ) + 1, vectorLength );\r\n\r\n\t\t}\r\n\r\n\t\treturn vectorLength;\r\n\r\n\t}\r\n\r\n\tgetComponentType( builder ) {\r\n\r\n\t\treturn builder.getComponentType( this.node.getNodeType( builder ) );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn builder.getTypeFromLength( this.components.length, this.getComponentType( builder ) );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst node = this.node;\r\n\t\tconst nodeTypeLength = builder.getTypeLength( node.getNodeType( builder ) );\r\n\r\n\t\tlet snippet = null;\r\n\r\n\t\tif ( nodeTypeLength > 1 ) {\r\n\r\n\t\t\tlet type = null;\r\n\r\n\t\t\tconst componentsLength = this.getVectorLength();\r\n\r\n\t\t\tif ( componentsLength >= nodeTypeLength ) {\r\n\r\n\t\t\t\t// needed expand the input node\r\n\r\n\t\t\t\ttype = builder.getTypeFromLength( this.getVectorLength(), this.getComponentType( builder ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst nodeSnippet = node.build( builder, type );\r\n\r\n\t\t\tif ( this.components.length === nodeTypeLength && this.components === stringVectorComponents.slice( 0, this.components.length ) ) {\r\n\r\n\t\t\t\t// unnecessary swizzle\r\n\r\n\t\t\t\tsnippet = builder.format( nodeSnippet, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippet = builder.format( `${nodeSnippet}.${this.components}`, this.getNodeType( builder ), output );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// ignore .components if .node returns float/integer\r\n\r\n\t\t\tsnippet = node.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.components = this.components;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.components = data.components;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SplitNode;\r\n\r\naddNodeClass( 'SplitNode', SplitNode );\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport TempNode from '../core/TempNode.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nclass SetNode extends TempNode {\r\n\r\n\tconstructor( sourceNode, components, targetNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.sourceNode = sourceNode;\r\n\t\tthis.components = components;\r\n\t\tthis.targetNode = targetNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.sourceNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { sourceNode, components, targetNode } = this;\r\n\r\n\t\tconst sourceType = this.getNodeType( builder );\r\n\t\tconst targetType = builder.getTypeFromLength( components.length );\r\n\r\n\t\tconst targetSnippet = targetNode.build( builder, targetType );\r\n\t\tconst sourceSnippet = sourceNode.build( builder, sourceType );\r\n\r\n\t\tconst length = builder.getTypeLength( sourceType );\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tconst component = vectorComponents[ i ];\r\n\r\n\t\t\tif ( component === components[ 0 ] ) {\r\n\r\n\t\t\t\tsnippetValues.push( targetSnippet );\r\n\r\n\t\t\t\ti += components.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippetValues.push( sourceSnippet + '.' + component );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SetNode;\r\n\r\naddNodeClass( 'SetNode', SetNode );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { getValueType, getValueFromType, arrayBufferToBase64 } from './NodeUtils.js';\r\n\r\nclass InputNode extends Node {\r\n\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.isInputNode = true;\r\n\r\n\t\tthis.value = value;\r\n\t\tthis.precision = null;\r\n\r\n\t}\r\n\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\tif ( this.nodeType === null ) {\r\n\r\n\t\t\treturn getValueType( this.value );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\tgetInputType( builder ) {\r\n\r\n\t\treturn this.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetPrecision( precision ) {\r\n\r\n\t\tthis.precision = precision;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.value = this.value;\r\n\r\n\t\tif ( this.value && this.value.toArray ) data.value = this.value.toArray();\r\n\r\n\t\tdata.valueType = getValueType( this.value );\r\n\t\tdata.nodeType = this.nodeType;\r\n\r\n\t\tif ( data.valueType === 'ArrayBuffer' ) data.value = arrayBufferToBase64( data.value );\r\n\r\n\t\tdata.precision = this.precision;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.nodeType = data.nodeType;\r\n\t\tthis.value = Array.isArray( data.value ) ? getValueFromType( data.valueType, ...data.value ) : data.value;\r\n\r\n\t\tthis.precision = data.precision || null;\r\n\r\n\t\tif ( this.value && this.value.fromArray ) this.value = this.value.fromArray( data.value );\r\n\r\n\t}\r\n\r\n\tgenerate( /*builder, output*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default InputNode;\r\n\r\naddNodeClass( 'InputNode', InputNode );\r\n", "import InputNode from './InputNode.js';\r\nimport { addNodeClass } from './Node.js';\r\n\r\nclass ConstNode extends InputNode {\r\n\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( value, nodeType );\r\n\r\n\t\tthis.isConstNode = true;\r\n\r\n\t}\r\n\r\n\tgenerateConst( builder ) {\r\n\r\n\t\treturn builder.generateConst( this.getNodeType( builder ), this.value );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\treturn builder.format( this.generateConst( builder ), type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ConstNode;\r\n\r\naddNodeClass( 'ConstNode', ConstNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\nimport ConvertNode from '../utils/ConvertNode.js';\r\nimport JoinNode from '../utils/JoinNode.js';\r\nimport SplitNode from '../utils/SplitNode.js';\r\nimport SetNode from '../utils/SetNode.js';\r\nimport ConstNode from '../core/ConstNode.js';\r\nimport { getValueFromType, getValueType } from '../core/NodeUtils.js';\r\n\r\n//\r\n\r\nlet currentStack = null;\r\n\r\nconst NodeElements = new Map(); // @TODO: Currently only a few nodes are added, probably also add others\r\n\r\nexport function addNodeElement( name, nodeElement ) {\r\n\r\n\tif ( NodeElements.has( name ) ) {\r\n\r\n\t\tconsole.warn( `Redefinition of node element ${ name }` );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tif ( typeof nodeElement !== 'function' ) throw new Error( `Node element ${ name } is not a function` );\r\n\r\n\tNodeElements.set( name, nodeElement );\r\n\r\n}\r\n\r\nconst parseSwizzle = ( props ) => props.replace( /r|s/g, 'x' ).replace( /g|t/g, 'y' ).replace( /b|p/g, 'z' ).replace( /a|q/g, 'w' );\r\n\r\nconst shaderNodeHandler = {\r\n\r\n\tsetup( NodeClosure, params ) {\r\n\r\n\t\tconst inputs = params.shift();\r\n\r\n\t\treturn NodeClosure( nodeObjects( inputs ), ...params );\r\n\r\n\t},\r\n\r\n\tget( node, prop, nodeObj ) {\r\n\r\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\r\n\r\n\t\t\tif ( node.isStackNode !== true && prop === 'assign' ) {\r\n\r\n\t\t\t\treturn ( ...params ) => {\r\n\r\n\t\t\t\t\tcurrentStack.assign( nodeObj, ...params );\r\n\r\n\t\t\t\t\treturn nodeObj;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( NodeElements.has( prop ) ) {\r\n\r\n\t\t\t\tconst nodeElement = NodeElements.get( prop );\r\n\r\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.add( nodeElement( ...params ) ) : ( ...params ) => nodeElement( nodeObj, ...params );\r\n\r\n\t\t\t} else if ( prop === 'self' ) {\r\n\r\n\t\t\t\treturn node;\r\n\r\n\t\t\t} else if ( prop.endsWith( 'Assign' ) && NodeElements.has( prop.slice( 0, prop.length - 'Assign'.length ) ) ) {\r\n\r\n\t\t\t\tconst nodeElement = NodeElements.get( prop.slice( 0, prop.length - 'Assign'.length ) );\r\n\r\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.assign( params[ 0 ], nodeElement( ...params ) ) : ( ...params ) => nodeObj.assign( nodeElement( nodeObj, ...params ) );\r\n\r\n\t\t\t} else if ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// accessing properties ( swizzle )\r\n\r\n\t\t\t\tprop = parseSwizzle( prop );\r\n\r\n\t\t\t\treturn nodeObject( new SplitNode( nodeObj, prop ) );\r\n\r\n\t\t\t} else if ( /^set[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// set properties ( swizzle )\r\n\r\n\t\t\t\tprop = parseSwizzle( prop.slice( 3 ).toLowerCase() );\r\n\r\n\t\t\t\t// sort to xyzw sequence\r\n\r\n\t\t\t\tprop = prop.split( '' ).sort().join( '' );\r\n\r\n\t\t\t\treturn ( value ) => nodeObject( new SetNode( node, prop, value ) );\r\n\r\n\t\t\t} else if ( prop === 'width' || prop === 'height' || prop === 'depth' ) {\r\n\r\n\t\t\t\t// accessing property\r\n\r\n\t\t\t\tif ( prop === 'width' ) prop = 'x';\r\n\t\t\t\telse if ( prop === 'height' ) prop = 'y';\r\n\t\t\t\telse if ( prop === 'depth' ) prop = 'z';\r\n\r\n\t\t\t\treturn nodeObject( new SplitNode( node, prop ) );\r\n\r\n\t\t\t} else if ( /^\\d+$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// accessing array\r\n\r\n\t\t\t\treturn nodeObject( new ArrayElementNode( nodeObj, new ConstNode( Number( prop ), 'uint' ) ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Reflect.get( node, prop, nodeObj );\r\n\r\n\t},\r\n\r\n\tset( node, prop, value, nodeObj ) {\r\n\r\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\r\n\r\n\t\t\t// setting properties\r\n\r\n\t\t\tif ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true || prop === 'width' || prop === 'height' || prop === 'depth' || /^\\d+$/.test( prop ) === true ) {\r\n\r\n\t\t\t\tnodeObj[ prop ].assign( value );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Reflect.set( node, prop, value, nodeObj );\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst nodeObjectsCacheMap = new WeakMap();\r\nconst nodeBuilderFunctionsCacheMap = new WeakMap();\r\n\r\nconst ShaderNodeObject = function ( obj, altType = null ) {\r\n\r\n\tconst type = getValueType( obj );\r\n\r\n\tif ( type === 'node' ) {\r\n\r\n\t\tlet nodeObject = nodeObjectsCacheMap.get( obj );\r\n\r\n\t\tif ( nodeObject === undefined ) {\r\n\r\n\t\t\tnodeObject = new Proxy( obj, shaderNodeHandler );\r\n\r\n\t\t\tnodeObjectsCacheMap.set( obj, nodeObject );\r\n\t\t\tnodeObjectsCacheMap.set( nodeObject, nodeObject );\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeObject;\r\n\r\n\t} else if ( ( altType === null && ( type === 'float' || type === 'boolean' ) ) || ( type && type !== 'shader' && type !== 'string' ) ) {\r\n\r\n\t\treturn nodeObject( getConstNode( obj, altType ) );\r\n\r\n\t} else if ( type === 'shader' ) {\r\n\r\n\t\treturn tslFn( obj );\r\n\r\n\t}\r\n\r\n\treturn obj;\r\n\r\n};\r\n\r\nconst ShaderNodeObjects = function ( objects, altType = null ) {\r\n\r\n\tfor ( const name in objects ) {\r\n\r\n\t\tobjects[ name ] = nodeObject( objects[ name ], altType );\r\n\r\n\t}\r\n\r\n\treturn objects;\r\n\r\n};\r\n\r\nconst ShaderNodeArray = function ( array, altType = null ) {\r\n\r\n\tconst len = array.length;\r\n\r\n\tfor ( let i = 0; i < len; i ++ ) {\r\n\r\n\t\tarray[ i ] = nodeObject( array[ i ], altType );\r\n\r\n\t}\r\n\r\n\treturn array;\r\n\r\n};\r\n\r\nconst ShaderNodeProxy = function ( NodeClass, scope = null, factor = null, settings = null ) {\r\n\r\n\tconst assignNode = ( node ) => nodeObject( settings !== null ? Object.assign( node, settings ) : node );\r\n\r\n\tif ( scope === null ) {\r\n\r\n\t\treturn ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( ...nodeArray( params ) ) );\r\n\r\n\t\t};\r\n\r\n\t} else if ( factor !== null ) {\r\n\r\n\t\tfactor = nodeObject( factor );\r\n\r\n\t\treturn ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( params ), factor ) );\r\n\r\n\t\t};\r\n\r\n\t} else {\r\n\r\n\t\treturn ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( params ) ) );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst ShaderNodeImmutable = function ( NodeClass, ...params ) {\r\n\r\n\treturn nodeObject( new NodeClass( ...nodeArray( params ) ) );\r\n\r\n};\r\n\r\nclass ShaderCallNodeInternal extends Node {\r\n\r\n\tconstructor( shaderNode, inputNodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.shaderNode = shaderNode;\r\n\t\tthis.inputNodes = inputNodes;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( properties.outputNode === null ) {\r\n\r\n\t\t\tproperties.outputNode = this.setupOutput( builder );\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.outputNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tcall( builder ) {\r\n\r\n\t\tconst { shaderNode, inputNodes } = this;\r\n\r\n\t\tif ( shaderNode.layout ) {\r\n\r\n\t\t\tlet functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get( builder.constructor );\r\n\r\n\t\t\tif ( functionNodesCacheMap === undefined ) {\r\n\r\n\t\t\t\tfunctionNodesCacheMap = new WeakMap();\r\n\r\n\t\t\t\tnodeBuilderFunctionsCacheMap.set( builder.constructor, functionNodesCacheMap );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet functionNode = functionNodesCacheMap.get( shaderNode );\r\n\r\n\t\t\tif ( functionNode === undefined ) {\r\n\r\n\t\t\t\tfunctionNode = nodeObject( builder.buildFunctionNode( shaderNode ) );\r\n\r\n\t\t\t\tfunctionNodesCacheMap.set( shaderNode, functionNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( builder.currentFunctionNode !== null ) {\r\n\r\n\t\t\t\tbuilder.currentFunctionNode.includes.push( functionNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn nodeObject( functionNode.call( inputNodes ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst jsFunc = shaderNode.jsFunc;\r\n\t\tconst outputNode = inputNodes !== null ? jsFunc( inputNodes, builder.stack, builder ) : jsFunc( builder.stack, builder );\r\n\r\n\t\treturn nodeObject( outputNode );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { outputNode } = builder.getNodeProperties( this );\r\n\r\n\t\treturn outputNode || this.setupOutput( builder );\r\n\r\n\t}\r\n\r\n\tsetupOutput( builder ) {\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tbuilder.stack.outputNode = this.call( builder );\r\n\r\n\t\treturn builder.removeStack();\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { outputNode } = builder.getNodeProperties( this );\r\n\r\n\t\tif ( outputNode === null ) {\r\n\r\n\t\t\t// TSL: It's recommended to use `tslFn` in setup() pass.\r\n\r\n\t\t\treturn this.call( builder ).build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn super.generate( builder, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ShaderNodeInternal extends Node {\r\n\r\n\tconstructor( jsFunc ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.jsFunc = jsFunc;\r\n\t\tthis.layout = null;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t}\r\n\r\n\tget isArrayInput() {\r\n\r\n\t\treturn /^\\((\\s+)?\\[/.test( this.jsFunc.toString() );\r\n\r\n\t}\r\n\r\n\tsetLayout( layout ) {\r\n\r\n\t\tthis.layout = layout;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcall( inputs = null ) {\r\n\r\n\t\tnodeObjects( inputs );\r\n\r\n\t\treturn nodeObject( new ShaderCallNodeInternal( this, inputs ) );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.call();\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst bools = [ false, true ];\r\nconst uints = [ 0, 1, 2, 3 ];\r\nconst ints = [ - 1, - 2 ];\r\nconst floats = [ 0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / ( Math.PI * 2 ), Math.PI / 2 ];\r\n\r\nconst boolsCacheMap = new Map();\r\nfor ( const bool of bools ) boolsCacheMap.set( bool, new ConstNode( bool ) );\r\n\r\nconst uintsCacheMap = new Map();\r\nfor ( const uint of uints ) uintsCacheMap.set( uint, new ConstNode( uint, 'uint' ) );\r\n\r\nconst intsCacheMap = new Map( [ ...uintsCacheMap ].map( el => new ConstNode( el.value, 'int' ) ) );\r\nfor ( const int of ints ) intsCacheMap.set( int, new ConstNode( int, 'int' ) );\r\n\r\nconst floatsCacheMap = new Map( [ ...intsCacheMap ].map( el => new ConstNode( el.value ) ) );\r\nfor ( const float of floats ) floatsCacheMap.set( float, new ConstNode( float ) );\r\nfor ( const float of floats ) floatsCacheMap.set( - float, new ConstNode( - float ) );\r\n\r\nconst cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };\r\n\r\nconst constNodesCacheMap = new Map( [ ...boolsCacheMap, ...floatsCacheMap ] );\r\n\r\nconst getConstNode = ( value, type ) => {\r\n\r\n\tif ( constNodesCacheMap.has( value ) ) {\r\n\r\n\t\treturn constNodesCacheMap.get( value );\r\n\r\n\t} else if ( value.isNode === true ) {\r\n\r\n\t\treturn value;\r\n\r\n\t} else {\r\n\r\n\t\treturn new ConstNode( value, type );\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst safeGetNodeType = ( node ) => {\r\n\r\n\ttry {\r\n\r\n\t\treturn node.getNodeType();\r\n\r\n\t} catch ( _ ) {\r\n\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst ConvertType = function ( type, cacheMap = null ) {\r\n\r\n\treturn ( ...params ) => {\r\n\r\n\t\tif ( params.length === 0 || ( ! [ 'bool', 'float', 'int', 'uint' ].includes( type ) && params.every( param => typeof param !== 'object' ) ) ) {\r\n\r\n\t\t\tparams = [ getValueFromType( type, ...params ) ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( params.length === 1 && cacheMap !== null && cacheMap.has( params[ 0 ] ) ) {\r\n\r\n\t\t\treturn nodeObject( cacheMap.get( params[ 0 ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( params.length === 1 ) {\r\n\r\n\t\t\tconst node = getConstNode( params[ 0 ], type );\r\n\t\t\tif ( safeGetNodeType( node ) === type ) return nodeObject( node );\r\n\t\t\treturn nodeObject( new ConvertNode( node, type ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst nodes = params.map( param => getConstNode( param ) );\r\n\t\treturn nodeObject( new JoinNode( nodes, type ) );\r\n\r\n\t};\r\n\r\n};\r\n\r\n// exports\r\n\r\nexport const defined = ( value ) => value && value.value;\r\n\r\n// utils\r\n\r\nexport const getConstNodeType = ( value ) => ( value !== undefined && value !== null ) ? ( value.nodeType || value.convertTo || ( typeof value === 'string' ? value : null ) ) : null;\r\n\r\n// shader node base\r\n\r\nexport function ShaderNode( jsFunc ) {\r\n\r\n\treturn new Proxy( new ShaderNodeInternal( jsFunc ), shaderNodeHandler );\r\n\r\n}\r\n\r\nexport const nodeObject = ( val, altType = null ) => /* new */ ShaderNodeObject( val, altType );\r\nexport const nodeObjects = ( val, altType = null ) => new ShaderNodeObjects( val, altType );\r\nexport const nodeArray = ( val, altType = null ) => new ShaderNodeArray( val, altType );\r\nexport const nodeProxy = ( ...params ) => new ShaderNodeProxy( ...params );\r\nexport const nodeImmutable = ( ...params ) => new ShaderNodeImmutable( ...params );\r\n\r\nexport const tslFn = ( jsFunc ) => {\r\n\r\n\tconst shaderNode = new ShaderNode( jsFunc );\r\n\r\n\tconst fn = ( ...params ) => {\r\n\r\n\t\tlet inputs;\r\n\r\n\t\tnodeObjects( params );\r\n\r\n\t\tif ( params[ 0 ] && params[ 0 ].isNode ) {\r\n\r\n\t\t\tinputs = [ ...params ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tinputs = params[ 0 ];\r\n\r\n\t\t}\r\n\r\n\t\treturn shaderNode.call( inputs );\r\n\r\n\t};\r\n\r\n\tfn.shaderNode = shaderNode;\r\n\tfn.setLayout = ( layout ) => {\r\n\r\n\t\tshaderNode.setLayout( layout );\r\n\r\n\t\treturn fn;\r\n\r\n\t};\r\n\r\n\treturn fn;\r\n\r\n};\r\n\r\naddNodeClass( 'ShaderNode', ShaderNode );\r\n\r\n//\r\n\r\naddNodeElement( 'toGlobal', ( node ) => {\r\n\r\n\tnode.global = true;\r\n\r\n\treturn node;\r\n\r\n} );\r\n\r\n//\r\n\r\nexport const setCurrentStack = ( stack ) => {\r\n\r\n\tif ( currentStack === stack ) {\r\n\r\n\t\t//throw new Error( 'Stack already defined.' );\r\n\r\n\t}\r\n\r\n\tcurrentStack = stack;\r\n\r\n};\r\n\r\nexport const getCurrentStack = () => currentStack;\r\n\r\nexport const If = ( ...params ) => currentStack.if( ...params );\r\n\r\nexport function append( node ) {\r\n\r\n\tif ( currentStack ) currentStack.add( node );\r\n\r\n\treturn node;\r\n\r\n}\r\n\r\naddNodeElement( 'append', append );\r\n\r\n// types\r\n// @TODO: Maybe export from ConstNode.js?\r\n\r\nexport const color = new ConvertType( 'color' );\r\n\r\nexport const float = new ConvertType( 'float', cacheMaps.float );\r\nexport const int = new ConvertType( 'int', cacheMaps.ints );\r\nexport const uint = new ConvertType( 'uint', cacheMaps.uint );\r\nexport const bool = new ConvertType( 'bool', cacheMaps.bool );\r\n\r\nexport const vec2 = new ConvertType( 'vec2' );\r\nexport const ivec2 = new ConvertType( 'ivec2' );\r\nexport const uvec2 = new ConvertType( 'uvec2' );\r\nexport const bvec2 = new ConvertType( 'bvec2' );\r\n\r\nexport const vec3 = new ConvertType( 'vec3' );\r\nexport const ivec3 = new ConvertType( 'ivec3' );\r\nexport const uvec3 = new ConvertType( 'uvec3' );\r\nexport const bvec3 = new ConvertType( 'bvec3' );\r\n\r\nexport const vec4 = new ConvertType( 'vec4' );\r\nexport const ivec4 = new ConvertType( 'ivec4' );\r\nexport const uvec4 = new ConvertType( 'uvec4' );\r\nexport const bvec4 = new ConvertType( 'bvec4' );\r\n\r\nexport const mat2 = new ConvertType( 'mat2' );\r\nexport const imat2 = new ConvertType( 'imat2' );\r\nexport const umat2 = new ConvertType( 'umat2' );\r\nexport const bmat2 = new ConvertType( 'bmat2' );\r\n\r\nexport const mat3 = new ConvertType( 'mat3' );\r\nexport const imat3 = new ConvertType( 'imat3' );\r\nexport const umat3 = new ConvertType( 'umat3' );\r\nexport const bmat3 = new ConvertType( 'bmat3' );\r\n\r\nexport const mat4 = new ConvertType( 'mat4' );\r\nexport const imat4 = new ConvertType( 'imat4' );\r\nexport const umat4 = new ConvertType( 'umat4' );\r\nexport const bmat4 = new ConvertType( 'bmat4' );\r\n\r\nexport const string = ( value = '' ) => nodeObject( new ConstNode( value, 'string' ) );\r\nexport const arrayBuffer = ( value ) => nodeObject( new ConstNode( value, 'ArrayBuffer' ) );\r\n\r\naddNodeElement( 'toColor', color );\r\naddNodeElement( 'toFloat', float );\r\naddNodeElement( 'toInt', int );\r\naddNodeElement( 'toUint', uint );\r\naddNodeElement( 'toBool', bool );\r\naddNodeElement( 'toVec2', vec2 );\r\naddNodeElement( 'toIvec2', ivec2 );\r\naddNodeElement( 'toUvec2', uvec2 );\r\naddNodeElement( 'toBvec2', bvec2 );\r\naddNodeElement( 'toVec3', vec3 );\r\naddNodeElement( 'toIvec3', ivec3 );\r\naddNodeElement( 'toUvec3', uvec3 );\r\naddNodeElement( 'toBvec3', bvec3 );\r\naddNodeElement( 'toVec4', vec4 );\r\naddNodeElement( 'toIvec4', ivec4 );\r\naddNodeElement( 'toUvec4', uvec4 );\r\naddNodeElement( 'toBvec4', bvec4 );\r\naddNodeElement( 'toMat2', mat2 );\r\naddNodeElement( 'toImat2', imat2 );\r\naddNodeElement( 'toUmat2', umat2 );\r\naddNodeElement( 'toBmat2', bmat2 );\r\naddNodeElement( 'toMat3', mat3 );\r\naddNodeElement( 'toImat3', imat3 );\r\naddNodeElement( 'toUmat3', umat3 );\r\naddNodeElement( 'toBmat3', bmat3 );\r\naddNodeElement( 'toMat4', mat4 );\r\naddNodeElement( 'toImat4', imat4 );\r\naddNodeElement( 'toUmat4', umat4 );\r\naddNodeElement( 'toBmat4', bmat4 );\r\n\r\n// basic nodes\r\n// HACK - we cannot export them from the corresponding files because of the cyclic dependency\r\nexport const element = nodeProxy( ArrayElementNode );\r\nexport const convert = ( node, types ) => nodeObject( new ConvertNode( nodeObject( node ), types ) );\r\nexport const split = ( node, channels ) => nodeObject( new SplitNode( nodeObject( node ), channels ) );\r\n\r\naddNodeElement( 'element', element );\r\naddNodeElement( 'convert', convert );\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport TempNode from '../core/TempNode.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nclass AssignNode extends TempNode {\r\n\r\n\tconstructor( targetNode, sourceNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.targetNode = targetNode;\r\n\t\tthis.sourceNode = sourceNode;\r\n\r\n\t}\r\n\r\n\thasDependencies() {\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder, output ) {\r\n\r\n\t\treturn output !== 'void' ? this.targetNode.getNodeType( builder ) : 'void';\r\n\r\n\t}\r\n\r\n\tneedsSplitAssign( builder ) {\r\n\r\n\t\tconst { targetNode } = this;\r\n\r\n\t\tif ( builder.isAvailable( 'swizzleAssign' ) === false && targetNode.isSplitNode && targetNode.components.length > 1 ) {\r\n\r\n\t\t\tconst targetLength = builder.getTypeLength( targetNode.node.getNodeType( builder ) );\r\n\t\t\tconst assignDiferentVector = vectorComponents.join( '' ).slice( 0, targetLength ) !== targetNode.components;\r\n\r\n\t\t\treturn assignDiferentVector;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { targetNode, sourceNode } = this;\r\n\r\n\t\tconst needsSplitAssign = this.needsSplitAssign( builder );\r\n\r\n\t\tconst targetType = targetNode.getNodeType( builder );\r\n\r\n\t\tconst target = targetNode.context( { assign: true } ).build( builder );\r\n\t\tconst source = sourceNode.build( builder, targetType );\r\n\r\n\t\tconst sourceType = sourceNode.getNodeType( builder );\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t//\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tif ( nodeData.initialized === true ) {\r\n\r\n\t\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\t\tsnippet = target;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( needsSplitAssign ) {\r\n\r\n\t\t\tconst sourceVar = builder.getVarFromNode( this, null, targetType );\r\n\t\t\tconst sourceProperty = builder.getPropertyName( sourceVar );\r\n\r\n\t\t\tbuilder.addLineFlowCode( `${ sourceProperty } = ${ source }` );\r\n\r\n\t\t\tconst targetRoot = targetNode.node.context( { assign: true } ).build( builder );\r\n\r\n\t\t\tfor ( let i = 0; i < targetNode.components.length; i ++ ) {\r\n\r\n\t\t\t\tconst component = targetNode.components[ i ];\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${ targetRoot }.${ component } = ${ sourceProperty }[ ${ i } ]` );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\t\tsnippet = target;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = `${ target } = ${ source }`;\r\n\r\n\t\t\tif ( output === 'void' || sourceType === 'void' ) {\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( snippet );\r\n\r\n\t\t\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\t\t\tsnippet = target;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tnodeData.initialized = true;\r\n\r\n\t\treturn builder.format( snippet, targetType, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AssignNode;\r\n\r\nexport const assign = nodeProxy( AssignNode );\r\n\r\naddNodeClass( 'AssignNode', AssignNode );\r\n\r\naddNodeElement( 'assign', assign );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { NodeShaderStage } from './constants.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass VaryingNode extends Node {\r\n\r\n\tconstructor( node, name = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.isVaryingNode = true;\r\n\r\n\t}\r\n\r\n\tisGlobal() {\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.name || super.getHash( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\t// VaryingNode is auto type\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetupVarying( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tlet varying = properties.varying;\r\n\r\n\t\tif ( varying === undefined ) {\r\n\r\n\t\t\tconst name = this.name;\r\n\t\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\t\tproperties.varying = varying = builder.getVaryingFromNode( this, name, type );\r\n\t\t\tproperties.node = this.node;\r\n\r\n\t\t}\r\n\r\n\t\t// this property can be used to check if the varying can be optimized for a variable\r\n\t\tvarying.needsInterpolation || ( varying.needsInterpolation = ( builder.shaderStage === 'fragment' ) );\r\n\r\n\t\treturn varying;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.setupVarying( builder );\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tthis.setupVarying( builder );\r\n\r\n\t\treturn this.node.analyze( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tconst varying = this.setupVarying( builder );\r\n\r\n\t\tif ( properties.propertyName === undefined ) {\r\n\r\n\t\t\tconst type = this.getNodeType( builder );\r\n\t\t\tconst propertyName = builder.getPropertyName( varying, NodeShaderStage.VERTEX );\r\n\r\n\t\t\t// force node run in vertex stage\r\n\t\t\tbuilder.flowNodeFromShaderStage( NodeShaderStage.VERTEX, this.node, type, propertyName );\r\n\r\n\t\t\tproperties.propertyName = propertyName;\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getPropertyName( varying );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VaryingNode;\r\n\r\nexport const varying = nodeProxy( VaryingNode );\r\n\r\naddNodeElement( 'varying', varying );\r\n\r\naddNodeClass( 'VaryingNode', VaryingNode );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { varying } from './VaryingNode.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass AttributeNode extends Node {\r\n\r\n\tconstructor( attributeName, nodeType = null, defaultNode = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.defaultNode = defaultNode;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t\tthis._attributeName = attributeName;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.getAttributeName( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tlet nodeType = super.getNodeType( builder );\r\n\r\n\t\tif ( nodeType === null ) {\r\n\r\n\t\t\tconst attributeName = this.getAttributeName( builder );\r\n\r\n\t\t\tif ( builder.hasGeometryAttribute( attributeName ) ) {\r\n\r\n\t\t\t\tconst attribute = builder.geometry.getAttribute( attributeName );\r\n\r\n\t\t\t\tnodeType = builder.getTypeFromAttribute( attribute );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnodeType = 'float';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeType;\r\n\r\n\t}\r\n\r\n\tsetAttributeName( attributeName ) {\r\n\r\n\t\tthis._attributeName = attributeName;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetAttributeName( /*builder*/ ) {\r\n\r\n\t\treturn this._attributeName;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst attributeName = this.getAttributeName( builder );\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\t\tconst geometryAttribute = builder.hasGeometryAttribute( attributeName );\r\n\r\n\t\tif ( geometryAttribute === true ) {\r\n\r\n\t\t\tconst attribute = builder.geometry.getAttribute( attributeName );\r\n\t\t\tconst attributeType = builder.getTypeFromAttribute( attribute );\r\n\r\n\t\t\tconst nodeAttribute = builder.getAttribute( attributeName, attributeType );\r\n\r\n\t\t\tif ( builder.shaderStage === 'vertex' ) {\r\n\r\n\t\t\t\treturn builder.format( nodeAttribute.name, attributeType, nodeType );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst nodeVarying = varying( this );\r\n\r\n\t\t\t\treturn nodeVarying.build( builder, nodeType );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( `AttributeNode: Vertex attribute \"${ attributeName }\" not found on geometry.` );\r\n\r\n\t\t\tconst { defaultNode } = this;\r\n\r\n\t\t\tif ( defaultNode !== null ) {\r\n\r\n\t\t\t\treturn defaultNode.build( builder, nodeType );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn builder.generateConst( nodeType );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.global = this.global;\r\n\t\tdata._attributeName = this._attributeName;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.global = data.global;\r\n\t\tthis._attributeName = data._attributeName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AttributeNode;\r\n\r\nexport const attribute = ( name, nodeType, defaultNode ) => nodeObject( new AttributeNode( name, nodeType, nodeObject( defaultNode ) ) );\r\n\r\naddNodeClass( 'AttributeNode', AttributeNode );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass BypassNode extends Node {\r\n\r\n\tconstructor( returnNode, callNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isBypassNode = true;\r\n\r\n\t\tthis.outputNode = returnNode;\r\n\t\tthis.callNode = callNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.outputNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = this.callNode.build( builder, 'void' );\r\n\r\n\t\tif ( snippet !== '' ) {\r\n\r\n\t\t\tbuilder.addLineFlowCode( snippet );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.outputNode.build( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BypassNode;\r\n\r\nexport const bypass = nodeProxy( BypassNode );\r\n\r\naddNodeElement( 'bypass', bypass );\r\n\r\naddNodeClass( 'BypassNode', BypassNode );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { addNodeElement, nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass CacheNode extends Node {\r\n\r\n\tconstructor( node, parent = true ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.parent = parent;\r\n\r\n\t\tthis.isCacheNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tbuild( builder, ...params ) {\r\n\r\n\t\tconst previousCache = builder.getCache();\r\n\t\tconst cache = builder.getCacheFromNode( this, parent );\r\n\r\n\t\tbuilder.setCache( cache );\r\n\r\n\t\tconst data = this.node.build( builder, ...params );\r\n\r\n\t\tbuilder.setCache( previousCache );\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CacheNode;\r\n\r\nexport const cache = ( node, ...params ) => nodeObject( new CacheNode( nodeObject( node ), ...params ) );\r\n\r\naddNodeElement( 'cache', cache );\r\n\r\naddNodeClass( 'CacheNode', CacheNode );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass ContextNode extends Node {\r\n\r\n\tconstructor( node, context = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isContextNode = true;\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.context = context;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tthis.node.build( builder );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst previousContext = builder.getContext();\r\n\r\n\t\tbuilder.setContext( { ...builder.context, ...this.context } );\r\n\r\n\t\tconst node = this.node.build( builder );\r\n\r\n\t\tbuilder.setContext( previousContext );\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst previousContext = builder.getContext();\r\n\r\n\t\tbuilder.setContext( { ...builder.context, ...this.context } );\r\n\r\n\t\tconst snippet = this.node.build( builder, output );\r\n\r\n\t\tbuilder.setContext( previousContext );\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ContextNode;\r\n\r\nexport const context = nodeProxy( ContextNode );\r\nexport const label = ( node, name ) => context( node, { label: name } );\r\n\r\naddNodeElement( 'context', context );\r\naddNodeElement( 'label', label );\r\n\r\naddNodeClass( 'ContextNode', ContextNode );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { varying } from './VaryingNode.js';\r\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\r\n\r\nclass IndexNode extends Node {\r\n\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper( 'uint' );\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t\tthis.isInstanceIndexNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet propertyName;\r\n\r\n\t\tif ( scope === IndexNode.VERTEX ) {\r\n\r\n\t\t\tpropertyName = builder.getVertexIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.INSTANCE ) {\r\n\r\n\t\t\tpropertyName = builder.getInstanceIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.DRAW ) {\r\n\r\n\t\t\tpropertyName = builder.getDrawIndex();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.IndexNode: Unknown scope: ' + scope );\r\n\r\n\t\t}\r\n\r\n\t\tlet output;\r\n\r\n\t\tif ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {\r\n\r\n\t\t\toutput = propertyName;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeVarying = varying( this );\r\n\r\n\t\t\toutput = nodeVarying.build( builder, nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nIndexNode.VERTEX = 'vertex';\r\nIndexNode.INSTANCE = 'instance';\r\nIndexNode.DRAW = 'draw';\r\n\r\nexport default IndexNode;\r\n\r\nexport const vertexIndex = nodeImmutable( IndexNode, IndexNode.VERTEX );\r\nexport const instanceIndex = nodeImmutable( IndexNode, IndexNode.INSTANCE );\r\nexport const drawIndex = nodeImmutable( IndexNode, IndexNode.DRAW );\r\n\r\naddNodeClass( 'IndexNode', IndexNode );\r\n", "class LightingModel {\r\n\r\n\tstart( /*input, stack, builder*/ ) { }\r\n\r\n\tfinish( /*input, stack, builder*/ ) { }\r\n\r\n\tdirect( /*input, stack, builder*/ ) { }\r\n\r\n\tdirectRectArea( /*input, stack, builder*/ ) {}\r\n\r\n\tindirect( /*input, stack, builder*/ ) { }\r\n\r\n\tambientOcclusion( /*input, stack, builder*/ ) { }\r\n\r\n}\r\n\r\nexport default LightingModel;\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass VarNode extends Node {\r\n\r\n\tconstructor( node, name = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t\tthis.isVarNode = true;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.name || super.getHash( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { node, name } = this;\r\n\r\n\t\tconst nodeVar = builder.getVarFromNode( this, name, builder.getVectorType( this.getNodeType( builder ) ) );\r\n\r\n\t\tconst propertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\tconst snippet = node.build( builder, nodeVar.type );\r\n\r\n\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}` );\r\n\r\n\t\treturn propertyName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VarNode;\r\n\r\nexport const temp = nodeProxy( VarNode );\r\n\r\naddNodeElement( 'temp', temp ); // @TODO: Will be removed in the future\r\naddNodeElement( 'toVar', ( ...params ) => temp( ...params ).append() );\r\n\r\naddNodeClass( 'VarNode', VarNode );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { nodeImmutable, nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass PropertyNode extends Node {\r\n\r\n\tconstructor( nodeType, name = null, varying = false ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.varying = varying;\r\n\r\n\t\tthis.isPropertyNode = true;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.name || super.getHash( builder );\r\n\r\n\t}\r\n\r\n\tisGlobal( /*builder*/ ) {\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tlet nodeVar;\r\n\r\n\t\tif ( this.varying === true ) {\r\n\r\n\t\t\tnodeVar = builder.getVaryingFromNode( this, this.name );\r\n\t\t\tnodeVar.needsInterpolation = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnodeVar = builder.getVarFromNode( this, this.name );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getPropertyName( nodeVar );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PropertyNode;\r\n\r\nexport const property = ( type, name ) => nodeObject( new PropertyNode( type, name ) );\r\nexport const varyingProperty = ( type, name ) => nodeObject( new PropertyNode( type, name, true ) );\r\n\r\nexport const diffuseColor = nodeImmutable( PropertyNode, 'vec4', 'DiffuseColor' );\r\nexport const emissive = nodeImmutable( PropertyNode, 'vec3', 'EmissiveColor' );\r\nexport const roughness = nodeImmutable( PropertyNode, 'float', 'Roughness' );\r\nexport const metalness = nodeImmutable( PropertyNode, 'float', 'Metalness' );\r\nexport const clearcoat = nodeImmutable( PropertyNode, 'float', 'Clearcoat' );\r\nexport const clearcoatRoughness = nodeImmutable( PropertyNode, 'float', 'ClearcoatRoughness' );\r\nexport const sheen = nodeImmutable( PropertyNode, 'vec3', 'Sheen' );\r\nexport const sheenRoughness = nodeImmutable( PropertyNode, 'float', 'SheenRoughness' );\r\nexport const iridescence = nodeImmutable( PropertyNode, 'float', 'Iridescence' );\r\nexport const iridescenceIOR = nodeImmutable( PropertyNode, 'float', 'IridescenceIOR' );\r\nexport const iridescenceThickness = nodeImmutable( PropertyNode, 'float', 'IridescenceThickness' );\r\nexport const alphaT = nodeImmutable( PropertyNode, 'float', 'AlphaT' );\r\nexport const anisotropy = nodeImmutable( PropertyNode, 'float', 'Anisotropy' );\r\nexport const anisotropyT = nodeImmutable( PropertyNode, 'vec3', 'AnisotropyT' );\r\nexport const anisotropyB = nodeImmutable( PropertyNode, 'vec3', 'AnisotropyB' );\r\nexport const specularColor = nodeImmutable( PropertyNode, 'color', 'SpecularColor' );\r\nexport const specularF90 = nodeImmutable( PropertyNode, 'float', 'SpecularF90' );\r\nexport const shininess = nodeImmutable( PropertyNode, 'float', 'Shininess' );\r\nexport const output = nodeImmutable( PropertyNode, 'vec4', 'Output' );\r\nexport const dashSize = nodeImmutable( PropertyNode, 'float', 'dashSize' );\r\nexport const gapSize = nodeImmutable( PropertyNode, 'float', 'gapSize' );\r\nexport const pointWidth = nodeImmutable( PropertyNode, 'float', 'pointWidth' );\r\nexport const ior = nodeImmutable( PropertyNode, 'float', 'IOR' );\r\nexport const transmission = nodeImmutable( PropertyNode, 'float', 'Transmission' );\r\nexport const thickness = nodeImmutable( PropertyNode, 'float', 'Thickness' );\r\nexport const attenuationDistance = nodeImmutable( PropertyNode, 'float', 'AttenuationDistance' );\r\nexport const attenuationColor = nodeImmutable( PropertyNode, 'color', 'AttenuationColor' );\r\nexport const dispersion = nodeImmutable( PropertyNode, 'float', 'Dispersion' );\r\n\r\naddNodeClass( 'PropertyNode', PropertyNode );\r\n", "import { addNodeClass } from './Node.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\nimport PropertyNode from './PropertyNode.js';\r\n\r\nclass ParameterNode extends PropertyNode {\r\n\r\n\tconstructor( nodeType, name = null ) {\r\n\r\n\t\tsuper( nodeType, name );\r\n\r\n\t\tthis.isParameterNode = true;\r\n\r\n\t}\r\n\r\n\tgetHash() {\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tgenerate() {\r\n\r\n\t\treturn this.name;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ParameterNode;\r\n\r\nexport const parameter = ( type, name ) => nodeObject( new ParameterNode( type, name ) );\r\n\r\naddNodeClass( 'ParameterNode', ParameterNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass CodeNode extends Node {\r\n\r\n\tconstructor( code = '', includes = [], language = '' ) {\r\n\r\n\t\tsuper( 'code' );\r\n\r\n\t\tthis.isCodeNode = true;\r\n\r\n\t\tthis.code = code;\r\n\t\tthis.language = language;\r\n\r\n\t\tthis.includes = includes;\r\n\r\n\t}\r\n\r\n\tisGlobal() {\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tsetIncludes( includes ) {\r\n\r\n\t\tthis.includes = includes;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetIncludes( /*builder*/ ) {\r\n\r\n\t\treturn this.includes;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst includes = this.getIncludes( builder );\r\n\r\n\t\tfor ( const include of includes ) {\r\n\r\n\t\t\tinclude.build( builder );\r\n\r\n\t\t}\r\n\r\n\t\tconst nodeCode = builder.getCodeFromNode( this, this.getNodeType( builder ) );\r\n\t\tnodeCode.code = this.code;\r\n\r\n\t\treturn nodeCode.code;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.code = this.code;\r\n\t\tdata.language = this.language;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.code = data.code;\r\n\t\tthis.language = data.language;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CodeNode;\r\n\r\nexport const code = nodeProxy( CodeNode );\r\n\r\nexport const js = ( src, includes ) => code( src, includes, 'js' );\r\nexport const wgsl = ( src, includes ) => code( src, includes, 'wgsl' );\r\nexport const glsl = ( src, includes ) => code( src, includes, 'glsl' );\r\n\r\naddNodeClass( 'CodeNode', CodeNode );\r\n", "import CodeNode from './CodeNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass FunctionNode extends CodeNode {\r\n\r\n\tconstructor( code = '', includes = [], language = '' ) {\r\n\r\n\t\tsuper( code, includes, language );\r\n\r\n\t\tthis.keywords = {};\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.getNodeFunction( builder ).type;\r\n\r\n\t}\r\n\r\n\tgetInputs( builder ) {\r\n\r\n\t\treturn this.getNodeFunction( builder ).inputs;\r\n\r\n\t}\r\n\r\n\tgetNodeFunction( builder ) {\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\tlet nodeFunction = nodeData.nodeFunction;\r\n\r\n\t\tif ( nodeFunction === undefined ) {\r\n\r\n\t\t\tnodeFunction = builder.parser.parseFunction( this.code );\r\n\r\n\t\t\tnodeData.nodeFunction = nodeFunction;\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeFunction;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tsuper.generate( builder );\r\n\r\n\t\tconst nodeFunction = this.getNodeFunction( builder );\r\n\r\n\t\tconst name = nodeFunction.name;\r\n\t\tconst type = nodeFunction.type;\r\n\r\n\t\tconst nodeCode = builder.getCodeFromNode( this, type );\r\n\r\n\t\tif ( name !== '' ) {\r\n\r\n\t\t\t// use a custom property name\r\n\r\n\t\t\tnodeCode.name = name;\r\n\r\n\t\t}\r\n\r\n\t\tconst propertyName = builder.getPropertyName( nodeCode );\r\n\r\n\t\tlet code = this.getNodeFunction( builder ).getCode( propertyName );\r\n\r\n\t\tconst keywords = this.keywords;\r\n\t\tconst keywordsProperties = Object.keys( keywords );\r\n\r\n\t\tif ( keywordsProperties.length > 0 ) {\r\n\r\n\t\t\tfor ( const property of keywordsProperties ) {\r\n\r\n\t\t\t\tconst propertyRegExp = new RegExp( `\\\\b${property}\\\\b`, 'g' );\r\n\t\t\t\tconst nodeProperty = keywords[ property ].build( builder, 'property' );\r\n\r\n\t\t\t\tcode = code.replace( propertyRegExp, nodeProperty );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tnodeCode.code = code + '\\n';\r\n\r\n\t\tif ( output === 'property' ) {\r\n\r\n\t\t\treturn propertyName;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn builder.format( `${ propertyName }()`, type, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FunctionNode;\r\n\r\nconst nativeFn = ( code, includes = [], language = '' ) => {\r\n\r\n\tfor ( let i = 0; i < includes.length; i ++ ) {\r\n\r\n\t\tconst include = includes[ i ];\r\n\r\n\t\t// TSL Function: glslFn, wgslFn\r\n\r\n\t\tif ( typeof include === 'function' ) {\r\n\r\n\t\t\tincludes[ i ] = include.functionNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst functionNode = nodeObject( new FunctionNode( code, includes, language ) );\r\n\r\n\tconst fn = ( ...params ) => functionNode.call( ...params );\r\n\tfn.functionNode = functionNode;\r\n\r\n\treturn fn;\r\n\r\n};\r\n\r\nexport const glslFn = ( code, includes ) => nativeFn( code, includes, 'glsl' );\r\nexport const wgslFn = ( code, includes ) => nativeFn( code, includes, 'wgsl' );\r\n\r\naddNodeClass( 'FunctionNode', FunctionNode );\r\n", "import { Color } from '../math/Color.js';\r\nimport { EventDispatcher } from '../core/EventDispatcher.js';\r\nimport { FrontSide, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nlet _materialId = 0;\r\n\r\nclass Material extends EventDispatcher {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMaterial = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _materialId ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Material';\r\n\r\n\t\tthis.blending = NormalBlending;\r\n\t\tthis.side = FrontSide;\r\n\t\tthis.vertexColors = false;\r\n\r\n\t\tthis.opacity = 1;\r\n\t\tthis.transparent = false;\r\n\t\tthis.alphaHash = false;\r\n\r\n\t\tthis.blendSrc = SrcAlphaFactor;\r\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\r\n\t\tthis.blendEquation = AddEquation;\r\n\t\tthis.blendSrcAlpha = null;\r\n\t\tthis.blendDstAlpha = null;\r\n\t\tthis.blendEquationAlpha = null;\r\n\t\tthis.blendColor = new Color( 0, 0, 0 );\r\n\t\tthis.blendAlpha = 0;\r\n\r\n\t\tthis.depthFunc = LessEqualDepth;\r\n\t\tthis.depthTest = true;\r\n\t\tthis.depthWrite = true;\r\n\r\n\t\tthis.stencilWriteMask = 0xff;\r\n\t\tthis.stencilFunc = AlwaysStencilFunc;\r\n\t\tthis.stencilRef = 0;\r\n\t\tthis.stencilFuncMask = 0xff;\r\n\t\tthis.stencilFail = KeepStencilOp;\r\n\t\tthis.stencilZFail = KeepStencilOp;\r\n\t\tthis.stencilZPass = KeepStencilOp;\r\n\t\tthis.stencilWrite = false;\r\n\r\n\t\tthis.clippingPlanes = null;\r\n\t\tthis.clipIntersection = false;\r\n\t\tthis.clipShadows = false;\r\n\r\n\t\tthis.shadowSide = null;\r\n\r\n\t\tthis.colorWrite = true;\r\n\r\n\t\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\t\tthis.polygonOffset = false;\r\n\t\tthis.polygonOffsetFactor = 0;\r\n\t\tthis.polygonOffsetUnits = 0;\r\n\r\n\t\tthis.dithering = false;\r\n\r\n\t\tthis.alphaToCoverage = false;\r\n\t\tthis.premultipliedAlpha = false;\r\n\t\tthis.forceSinglePass = false;\r\n\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.toneMapped = true;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis._alphaTest = 0;\r\n\r\n\t}\r\n\r\n\tget alphaTest() {\r\n\r\n\t\treturn this._alphaTest;\r\n\r\n\t}\r\n\r\n\tset alphaTest( value ) {\r\n\r\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._alphaTest = value;\r\n\r\n\t}\r\n\r\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\r\n\r\n\tcustomProgramCacheKey() {\r\n\r\n\t\treturn this.onBeforeCompile.toString();\r\n\r\n\t}\r\n\r\n\tsetValues( values ) {\r\n\r\n\t\tif ( values === undefined ) return;\r\n\r\n\t\tfor ( const key in values ) {\r\n\r\n\t\t\tconst newValue = values[ key ];\r\n\r\n\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( currentValue && currentValue.isColor ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'Material',\r\n\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Material serialization\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\r\n\r\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\r\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\r\n\r\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\r\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\r\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\r\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\r\n\t\tif ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\r\n\r\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\r\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\r\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\r\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\r\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\r\n\r\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.dispersion !== undefined ) data.dispersion = this.dispersion;\r\n\r\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\r\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\r\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\r\n\r\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\r\n\r\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\r\n\r\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;\r\n\t\tif ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;\r\n\r\n\t\tif ( this.anisotropyMap && this.anisotropyMap.isTexture ) {\r\n\r\n\t\t\tdata.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\r\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\r\n\r\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\r\n\r\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\r\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\r\n\r\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\r\n\r\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.normalMapType = this.normalMapType;\r\n\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\r\n\r\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.envMap && this.envMap.isTexture ) {\r\n\r\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\r\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();\r\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\r\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\r\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\r\n\r\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\r\n\r\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\r\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\r\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\r\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\r\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\r\n\r\n\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\r\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\r\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\r\n\t\tif ( this.vertexColors === true ) data.vertexColors = true;\r\n\r\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\tif ( this.transparent === true ) data.transparent = true;\r\n\r\n\t\tif ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;\r\n\t\tif ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;\r\n\t\tif ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;\r\n\t\tif ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;\r\n\t\tif ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;\r\n\t\tif ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;\r\n\t\tif ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();\r\n\t\tif ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;\r\n\r\n\t\tif ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;\r\n\t\tif ( this.depthTest === false ) data.depthTest = this.depthTest;\r\n\t\tif ( this.depthWrite === false ) data.depthWrite = this.depthWrite;\r\n\t\tif ( this.colorWrite === false ) data.colorWrite = this.colorWrite;\r\n\r\n\t\tif ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;\r\n\t\tif ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;\r\n\t\tif ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;\r\n\t\tif ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;\r\n\t\tif ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;\r\n\t\tif ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;\r\n\t\tif ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;\r\n\t\tif ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;\r\n\r\n\t\t// rotation (SpriteMaterial)\r\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\r\n\r\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\r\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\r\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\r\n\r\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\r\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\r\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\r\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\r\n\r\n\t\tif ( this.dithering === true ) data.dithering = true;\r\n\r\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\tif ( this.alphaHash === true ) data.alphaHash = true;\r\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = true;\r\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;\r\n\t\tif ( this.forceSinglePass === true ) data.forceSinglePass = true;\r\n\r\n\t\tif ( this.wireframe === true ) data.wireframe = true;\r\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\r\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\t\tif ( this.flatShading === true ) data.flatShading = true;\r\n\r\n\t\tif ( this.visible === false ) data.visible = false;\r\n\r\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\r\n\r\n\t\tif ( this.fog === false ) data.fog = false;\r\n\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.blending = source.blending;\r\n\t\tthis.side = source.side;\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\r\n\t\tthis.opacity = source.opacity;\r\n\t\tthis.transparent = source.transparent;\r\n\r\n\t\tthis.blendSrc = source.blendSrc;\r\n\t\tthis.blendDst = source.blendDst;\r\n\t\tthis.blendEquation = source.blendEquation;\r\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\t\tthis.blendColor.copy( source.blendColor );\r\n\t\tthis.blendAlpha = source.blendAlpha;\r\n\r\n\t\tthis.depthFunc = source.depthFunc;\r\n\t\tthis.depthTest = source.depthTest;\r\n\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\r\n\t\tthis.stencilFunc = source.stencilFunc;\r\n\t\tthis.stencilRef = source.stencilRef;\r\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\r\n\t\tthis.stencilFail = source.stencilFail;\r\n\t\tthis.stencilZFail = source.stencilZFail;\r\n\t\tthis.stencilZPass = source.stencilZPass;\r\n\t\tthis.stencilWrite = source.stencilWrite;\r\n\r\n\t\tconst srcPlanes = source.clippingPlanes;\r\n\t\tlet dstPlanes = null;\r\n\r\n\t\tif ( srcPlanes !== null ) {\r\n\r\n\t\t\tconst n = srcPlanes.length;\r\n\t\t\tdstPlanes = new Array( n );\r\n\r\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.clippingPlanes = dstPlanes;\r\n\t\tthis.clipIntersection = source.clipIntersection;\r\n\t\tthis.clipShadows = source.clipShadows;\r\n\r\n\t\tthis.shadowSide = source.shadowSide;\r\n\r\n\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\tthis.precision = source.precision;\r\n\r\n\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\tthis.dithering = source.dithering;\r\n\r\n\t\tthis.alphaTest = source.alphaTest;\r\n\t\tthis.alphaHash = source.alphaHash;\r\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\r\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\t\tthis.forceSinglePass = source.forceSinglePass;\r\n\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.toneMapped = source.toneMapped;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\tonBuild( /* shaderobject, renderer */ ) {\r\n\r\n\t\tconsole.warn( 'Material: onBuild() has been removed.' ); // @deprecated, r166\r\n\r\n\t}\r\n\r\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {\r\n\r\n\t\tconsole.warn( 'Material: onBeforeRender() has been removed.' ); // @deprecated, r166\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport { Material };\r\n", "import Node from './Node.js';\r\nimport { addNodeClass } from './Node.js';\r\n\r\nclass UniformGroupNode extends Node {\r\n\r\n\tconstructor( name, shared = false ) {\r\n\r\n\t\tsuper( 'string' );\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis.shared = shared;\r\n\r\n\t\tthis.isUniformGroup = true;\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.name = this.name;\r\n\t\tdata.version = this.version;\r\n\t\tdata.shared = this.shared;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.name = data.name;\r\n\t\tthis.version = data.version;\r\n\t\tthis.shared = data.shared;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const uniformGroup = ( name ) => new UniformGroupNode( name );\r\nexport const sharedUniformGroup = ( name ) => new UniformGroupNode( name, true );\r\n\r\nexport const frameGroup = sharedUniformGroup( 'frame' );\r\nexport const renderGroup = sharedUniformGroup( 'render' );\r\nexport const objectGroup = uniformGroup( 'object' );\r\n\r\nexport default UniformGroupNode;\r\n\r\naddNodeClass( 'UniformGroupNode', UniformGroupNode );\r\n", "import InputNode from './InputNode.js';\r\nimport { objectGroup } from './UniformGroupNode.js';\r\nimport { addNodeClass } from './Node.js';\r\nimport { nodeObject, getConstNodeType } from '../shadernode/ShaderNode.js';\r\n\r\nclass UniformNode extends InputNode {\r\n\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( value, nodeType );\r\n\r\n\t\tthis.isUniformNode = true;\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.groupNode = objectGroup;\r\n\r\n\t}\r\n\r\n\tlabel( name ) {\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetGroup( group ) {\r\n\r\n\t\tthis.groupNode = group;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetGroup() {\r\n\r\n\t\treturn this.groupNode;\r\n\r\n\t}\r\n\r\n\tgetUniformHash( builder ) {\r\n\r\n\t\treturn this.getHash( builder );\r\n\r\n\t}\r\n\r\n\tonUpdate( callback, updateType ) {\r\n\r\n\t\tconst self = this.getSelf();\r\n\r\n\t\tcallback = callback.bind( self );\r\n\r\n\t\treturn super.onUpdate( ( frame ) => {\r\n\r\n\t\t\tconst value = callback( frame, self );\r\n\r\n\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\tthis.value = value;\r\n\r\n\t\t\t}\r\n\r\n\t \t}, updateType );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tconst hash = this.getUniformHash( builder );\r\n\r\n\t\tlet sharedNode = builder.getNodeFromHash( hash );\r\n\r\n\t\tif ( sharedNode === undefined ) {\r\n\r\n\t\t\tbuilder.setHashNode( this, hash );\r\n\r\n\t\t\tsharedNode = this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sharedNodeType = sharedNode.getInputType( builder );\r\n\r\n\t\tconst nodeUniform = builder.getUniformFromNode( sharedNode, sharedNodeType, builder.shaderStage, this.name || builder.context.label );\r\n\t\tconst propertyName = builder.getPropertyName( nodeUniform );\r\n\r\n\t\tif ( builder.context.label !== undefined ) delete builder.context.label;\r\n\r\n\t\treturn builder.format( propertyName, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default UniformNode;\r\n\r\nexport const uniform = ( arg1, arg2 ) => {\r\n\r\n\tconst nodeType = getConstNodeType( arg2 || arg1 );\r\n\r\n\t// @TODO: get ConstNode from .traverse() in the future\r\n\tconst value = ( arg1 && arg1.isNode === true ) ? ( arg1.node && arg1.node.value ) || arg1.value : arg1;\r\n\r\n\treturn nodeObject( new UniformNode( value, nodeType ) );\r\n\r\n};\r\n\r\naddNodeClass( 'UniformNode', UniformNode );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\n\r\nexport const uv = ( index ) => attribute( 'uv' + ( index > 0 ? index : '' ), 'vec2' );\r\n", "import Node from '../core/Node.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass TextureSizeNode extends Node {\r\n\r\n\tconstructor( textureNode, levelNode = null ) {\r\n\r\n\t\tsuper( 'uvec2' );\r\n\r\n\t\tthis.isTextureSizeNode = true;\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.levelNode = levelNode;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst textureProperty = this.textureNode.build( builder, 'property' );\r\n\t\tconst levelNode = this.levelNode.build( builder, 'int' );\r\n\r\n\t\treturn builder.format( `${ builder.getMethod( 'textureDimensions' ) }( ${ textureProperty }, ${ levelNode } )`, this.getNodeType( builder ), output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TextureSizeNode;\r\n\r\nexport const textureSize = nodeProxy( TextureSizeNode );\r\n\r\naddNodeElement( 'textureSize', textureSize );\r\n\r\naddNodeClass( 'TextureSizeNode', TextureSizeNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass OperatorNode extends TempNode {\r\n\r\n\tconstructor( op, aNode, bNode, ...params ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tif ( params.length > 0 ) {\r\n\r\n\t\t\tlet finalOp = new OperatorNode( op, aNode, bNode );\r\n\r\n\t\t\tfor ( let i = 0; i < params.length - 1; i ++ ) {\r\n\r\n\t\t\t\tfinalOp = new OperatorNode( op, finalOp, params[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\taNode = finalOp;\r\n\t\t\tbNode = params[ params.length - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.op = op;\r\n\t\tthis.aNode = aNode;\r\n\t\tthis.bNode = bNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder, output ) {\r\n\r\n\t\tconst op = this.op;\r\n\r\n\t\tconst aNode = this.aNode;\r\n\t\tconst bNode = this.bNode;\r\n\r\n\t\tconst typeA = aNode.getNodeType( builder );\r\n\t\tconst typeB = typeof bNode !== 'undefined' ? bNode.getNodeType( builder ) : null;\r\n\r\n\t\tif ( typeA === 'void' || typeB === 'void' ) {\r\n\r\n\t\t\treturn 'void';\r\n\r\n\t\t} else if ( op === '%' ) {\r\n\r\n\t\t\treturn typeA;\r\n\r\n\t\t} else if ( op === '~' || op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<' ) {\r\n\r\n\t\t\treturn builder.getIntegerType( typeA );\r\n\r\n\t\t} else if ( op === '!' || op === '==' || op === '&&' || op === '||' || op === '^^' ) {\r\n\r\n\t\t\treturn 'bool';\r\n\r\n\t\t} else if ( op === '<' || op === '>' || op === '<=' || op === '>=' ) {\r\n\r\n\t\t\tconst typeLength = output ? builder.getTypeLength( output ) : Math.max( builder.getTypeLength( typeA ), builder.getTypeLength( typeB ) );\r\n\r\n\t\t\treturn typeLength > 1 ? `bvec${ typeLength }` : 'bool';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( typeA === 'float' && builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\treturn typeB;\r\n\r\n\t\t\t} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {\r\n\r\n\t\t\t\t// matrix x vector\r\n\r\n\t\t\t\treturn builder.getVectorFromMatrix( typeA );\r\n\r\n\t\t\t} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\t// vector x matrix\r\n\r\n\t\t\t\treturn builder.getVectorFromMatrix( typeB );\r\n\r\n\t\t\t} else if ( builder.getTypeLength( typeB ) > builder.getTypeLength( typeA ) ) {\r\n\r\n\t\t\t\t// anytype x anytype: use the greater length vector\r\n\r\n\t\t\t\treturn typeB;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn typeA;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst op = this.op;\r\n\r\n\t\tconst aNode = this.aNode;\r\n\t\tconst bNode = this.bNode;\r\n\r\n\t\tconst type = this.getNodeType( builder, output );\r\n\r\n\t\tlet typeA = null;\r\n\t\tlet typeB = null;\r\n\r\n\t\tif ( type !== 'void' ) {\r\n\r\n\t\t\ttypeA = aNode.getNodeType( builder );\r\n\t\t\ttypeB = typeof bNode !== 'undefined' ? bNode.getNodeType( builder ) : null;\r\n\r\n\t\t\tif ( op === '<' || op === '>' || op === '<=' || op === '>=' || op === '==' ) {\r\n\r\n\t\t\t\tif ( builder.isVector( typeA ) ) {\r\n\r\n\t\t\t\t\ttypeB = typeA;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttypeA = typeB = 'float';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( op === '>>' || op === '<<' ) {\r\n\r\n\t\t\t\ttypeA = type;\r\n\t\t\t\ttypeB = builder.changeComponentType( typeB, 'uint' );\r\n\r\n\t\t\t} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {\r\n\r\n\t\t\t\t// matrix x vector\r\n\r\n\t\t\t\ttypeB = builder.getVectorFromMatrix( typeA );\r\n\r\n\t\t\t} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\t// vector x matrix\r\n\r\n\t\t\t\ttypeA = builder.getVectorFromMatrix( typeB );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// anytype x anytype\r\n\r\n\t\t\t\ttypeA = typeB = type;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttypeA = typeB = type;\r\n\r\n\t\t}\r\n\r\n\t\tconst a = aNode.build( builder, typeA );\r\n\t\tconst b = typeof bNode !== 'undefined' ? bNode.build( builder, typeB ) : null;\r\n\r\n\t\tconst outputLength = builder.getTypeLength( output );\r\n\t\tconst fnOpSnippet = builder.getFunctionOperator( op );\r\n\r\n\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\tif ( op === '<' && outputLength > 1 ) {\r\n\r\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'lessThan' ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else if ( op === '<=' && outputLength > 1 ) {\r\n\r\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'lessThanEqual' ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else if ( op === '>' && outputLength > 1 ) {\r\n\r\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'greaterThan' ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else if ( op === '>=' && outputLength > 1 ) {\r\n\r\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'greaterThanEqual' ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else if ( op === '!' || op === '~' ) {\r\n\r\n\t\t\t\treturn builder.format( `(${op}${a})`, typeA, output );\r\n\r\n\t\t\t} else if ( fnOpSnippet ) {\r\n\r\n\t\t\t\treturn builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn builder.format( `( ${ a } ${ op } ${ b } )`, type, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( typeA !== 'void' ) {\r\n\r\n\t\t\tif ( fnOpSnippet ) {\r\n\r\n\t\t\t\treturn builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn builder.format( `${ a } ${ op } ${ b }`, type, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.op = this.op;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.op = data.op;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default OperatorNode;\r\n\r\nexport const add = nodeProxy( OperatorNode, '+' );\r\nexport const sub = nodeProxy( OperatorNode, '-' );\r\nexport const mul = nodeProxy( OperatorNode, '*' );\r\nexport const div = nodeProxy( OperatorNode, '/' );\r\nexport const remainder = nodeProxy( OperatorNode, '%' );\r\nexport const equal = nodeProxy( OperatorNode, '==' );\r\nexport const notEqual = nodeProxy( OperatorNode, '!=' );\r\nexport const lessThan = nodeProxy( OperatorNode, '<' );\r\nexport const greaterThan = nodeProxy( OperatorNode, '>' );\r\nexport const lessThanEqual = nodeProxy( OperatorNode, '<=' );\r\nexport const greaterThanEqual = nodeProxy( OperatorNode, '>=' );\r\nexport const and = nodeProxy( OperatorNode, '&&' );\r\nexport const or = nodeProxy( OperatorNode, '||' );\r\nexport const not = nodeProxy( OperatorNode, '!' );\r\nexport const xor = nodeProxy( OperatorNode, '^^' );\r\nexport const bitAnd = nodeProxy( OperatorNode, '&' );\r\nexport const bitNot = nodeProxy( OperatorNode, '~' );\r\nexport const bitOr = nodeProxy( OperatorNode, '|' );\r\nexport const bitXor = nodeProxy( OperatorNode, '^' );\r\nexport const shiftLeft = nodeProxy( OperatorNode, '<<' );\r\nexport const shiftRight = nodeProxy( OperatorNode, '>>' );\r\n\r\naddNodeElement( 'add', add );\r\naddNodeElement( 'sub', sub );\r\naddNodeElement( 'mul', mul );\r\naddNodeElement( 'div', div );\r\naddNodeElement( 'remainder', remainder );\r\naddNodeElement( 'equal', equal );\r\naddNodeElement( 'notEqual', notEqual );\r\naddNodeElement( 'lessThan', lessThan );\r\naddNodeElement( 'greaterThan', greaterThan );\r\naddNodeElement( 'lessThanEqual', lessThanEqual );\r\naddNodeElement( 'greaterThanEqual', greaterThanEqual );\r\naddNodeElement( 'and', and );\r\naddNodeElement( 'or', or );\r\naddNodeElement( 'not', not );\r\naddNodeElement( 'xor', xor );\r\naddNodeElement( 'bitAnd', bitAnd );\r\naddNodeElement( 'bitNot', bitNot );\r\naddNodeElement( 'bitOr', bitOr );\r\naddNodeElement( 'bitXor', bitXor );\r\naddNodeElement( 'shiftLeft', shiftLeft );\r\naddNodeElement( 'shiftRight', shiftRight );\r\n\r\naddNodeClass( 'OperatorNode', OperatorNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { sub, mul, div } from './OperatorNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeObject, nodeProxy, float, vec2, vec3, vec4, tslFn } from '../shadernode/ShaderNode.js';\r\n\r\nclass MathNode extends TempNode {\r\n\r\n\tconstructor( method, aNode, bNode = null, cNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.method = method;\r\n\r\n\t\tthis.aNode = aNode;\r\n\t\tthis.bNode = bNode;\r\n\t\tthis.cNode = cNode;\r\n\r\n\t}\r\n\r\n\tgetInputType( builder ) {\r\n\r\n\t\tconst aType = this.aNode.getNodeType( builder );\r\n\t\tconst bType = this.bNode ? this.bNode.getNodeType( builder ) : null;\r\n\t\tconst cType = this.cNode ? this.cNode.getNodeType( builder ) : null;\r\n\r\n\t\tconst aLen = builder.isMatrix( aType ) ? 0 : builder.getTypeLength( aType );\r\n\t\tconst bLen = builder.isMatrix( bType ) ? 0 : builder.getTypeLength( bType );\r\n\t\tconst cLen = builder.isMatrix( cType ) ? 0 : builder.getTypeLength( cType );\r\n\r\n\t\tif ( aLen > bLen && aLen > cLen ) {\r\n\r\n\t\t\treturn aType;\r\n\r\n\t\t} else if ( bLen > cLen ) {\r\n\r\n\t\t\treturn bType;\r\n\r\n\t\t} else if ( cLen > aLen ) {\r\n\r\n\t\t\treturn cType;\r\n\r\n\t\t}\r\n\r\n\t\treturn aType;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst method = this.method;\r\n\r\n\t\tif ( method === MathNode.LENGTH || method === MathNode.DISTANCE || method === MathNode.DOT ) {\r\n\r\n\t\t\treturn 'float';\r\n\r\n\t\t} else if ( method === MathNode.CROSS ) {\r\n\r\n\t\t\treturn 'vec3';\r\n\r\n\t\t} else if ( method === MathNode.ALL ) {\r\n\r\n\t\t\treturn 'bool';\r\n\r\n\t\t} else if ( method === MathNode.EQUALS ) {\r\n\r\n\t\t\treturn builder.changeComponentType( this.aNode.getNodeType( builder ), 'bool' );\r\n\r\n\t\t} else if ( method === MathNode.MOD ) {\r\n\r\n\t\t\treturn this.aNode.getNodeType( builder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn this.getInputType( builder );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst method = this.method;\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst inputType = this.getInputType( builder );\r\n\r\n\t\tconst a = this.aNode;\r\n\t\tconst b = this.bNode;\r\n\t\tconst c = this.cNode;\r\n\r\n\t\tconst isWebGL = builder.renderer.isWebGLRenderer === true;\r\n\r\n\t\tif ( method === MathNode.TRANSFORM_DIRECTION ) {\r\n\r\n\t\t\t// dir can be either a direction vector or a normal vector\r\n\t\t\t// upper-left 3x3 of matrix is assumed to be orthogonal\r\n\r\n\t\t\tlet tA = a;\r\n\t\t\tlet tB = b;\r\n\r\n\t\t\tif ( builder.isMatrix( tA.getNodeType( builder ) ) ) {\r\n\r\n\t\t\t\ttB = vec4( vec3( tB ), 0.0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttA = vec4( vec3( tA ), 0.0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst mulNode = mul( tA, tB ).xyz;\r\n\r\n\t\t\treturn normalize( mulNode ).build( builder, output );\r\n\r\n\t\t} else if ( method === MathNode.NEGATE ) {\r\n\r\n\t\t\treturn builder.format( '( - ' + a.build( builder, inputType ) + ' )', type, output );\r\n\r\n\t\t} else if ( method === MathNode.ONE_MINUS ) {\r\n\r\n\t\t\treturn sub( 1.0, a ).build( builder, output );\r\n\r\n\t\t} else if ( method === MathNode.RECIPROCAL ) {\r\n\r\n\t\t\treturn div( 1.0, a ).build( builder, output );\r\n\r\n\t\t} else if ( method === MathNode.DIFFERENCE ) {\r\n\r\n\t\t\treturn abs( sub( a, b ) ).build( builder, output );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst params = [];\r\n\r\n\t\t\tif ( method === MathNode.CROSS || method === MathNode.MOD ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, type ),\r\n\t\t\t\t\tb.build( builder, type )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( method === MathNode.STEP ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, builder.getTypeLength( a.getNodeType( builder ) ) === 1 ? 'float' : inputType ),\r\n\t\t\t\t\tb.build( builder, inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( ( isWebGL && ( method === MathNode.MIN || method === MathNode.MAX ) ) || method === MathNode.MOD ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, builder.getTypeLength( b.getNodeType( builder ) ) === 1 ? 'float' : inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( method === MathNode.REFRACT ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, inputType ),\r\n\t\t\t\t\tc.build( builder, 'float' )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( method === MathNode.MIX ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, inputType ),\r\n\t\t\t\t\tc.build( builder, builder.getTypeLength( c.getNodeType( builder ) ) === 1 ? 'float' : inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tparams.push( a.build( builder, inputType ) );\r\n\t\t\t\tif ( b !== null ) params.push( b.build( builder, inputType ) );\r\n\t\t\t\tif ( c !== null ) params.push( c.build( builder, inputType ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn builder.format( `${ builder.getMethod( method, type ) }( ${params.join( ', ' )} )`, type, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.method = this.method;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.method = data.method;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// 1 input\r\n\r\nMathNode.ALL = 'all';\r\nMathNode.ANY = 'any';\r\nMathNode.EQUALS = 'equals';\r\n\r\nMathNode.RADIANS = 'radians';\r\nMathNode.DEGREES = 'degrees';\r\nMathNode.EXP = 'exp';\r\nMathNode.EXP2 = 'exp2';\r\nMathNode.LOG = 'log';\r\nMathNode.LOG2 = 'log2';\r\nMathNode.SQRT = 'sqrt';\r\nMathNode.INVERSE_SQRT = 'inversesqrt';\r\nMathNode.FLOOR = 'floor';\r\nMathNode.CEIL = 'ceil';\r\nMathNode.NORMALIZE = 'normalize';\r\nMathNode.FRACT = 'fract';\r\nMathNode.SIN = 'sin';\r\nMathNode.COS = 'cos';\r\nMathNode.TAN = 'tan';\r\nMathNode.ASIN = 'asin';\r\nMathNode.ACOS = 'acos';\r\nMathNode.ATAN = 'atan';\r\nMathNode.ABS = 'abs';\r\nMathNode.SIGN = 'sign';\r\nMathNode.LENGTH = 'length';\r\nMathNode.NEGATE = 'negate';\r\nMathNode.ONE_MINUS = 'oneMinus';\r\nMathNode.DFDX = 'dFdx';\r\nMathNode.DFDY = 'dFdy';\r\nMathNode.ROUND = 'round';\r\nMathNode.RECIPROCAL = 'reciprocal';\r\nMathNode.TRUNC = 'trunc';\r\nMathNode.FWIDTH = 'fwidth';\r\nMathNode.BITCAST = 'bitcast';\r\nMathNode.TRANSPOSE = 'transpose';\r\n\r\n// 2 inputs\r\n\r\nMathNode.ATAN2 = 'atan2';\r\nMathNode.MIN = 'min';\r\nMathNode.MAX = 'max';\r\nMathNode.MOD = 'mod';\r\nMathNode.STEP = 'step';\r\nMathNode.REFLECT = 'reflect';\r\nMathNode.DISTANCE = 'distance';\r\nMathNode.DIFFERENCE = 'difference';\r\nMathNode.DOT = 'dot';\r\nMathNode.CROSS = 'cross';\r\nMathNode.POW = 'pow';\r\nMathNode.TRANSFORM_DIRECTION = 'transformDirection';\r\n\r\n// 3 inputs\r\n\r\nMathNode.MIX = 'mix';\r\nMathNode.CLAMP = 'clamp';\r\nMathNode.REFRACT = 'refract';\r\nMathNode.SMOOTHSTEP = 'smoothstep';\r\nMathNode.FACEFORWARD = 'faceforward';\r\n\r\nexport default MathNode;\r\n\r\nexport const EPSILON = float( 1e-6 );\r\nexport const INFINITY = float( 1e6 );\r\nexport const PI = float( Math.PI );\r\nexport const PI2 = float( Math.PI * 2 );\r\n\r\nexport const all = nodeProxy( MathNode, MathNode.ALL );\r\nexport const any = nodeProxy( MathNode, MathNode.ANY );\r\nexport const equals = nodeProxy( MathNode, MathNode.EQUALS );\r\n\r\nexport const radians = nodeProxy( MathNode, MathNode.RADIANS );\r\nexport const degrees = nodeProxy( MathNode, MathNode.DEGREES );\r\nexport const exp = nodeProxy( MathNode, MathNode.EXP );\r\nexport const exp2 = nodeProxy( MathNode, MathNode.EXP2 );\r\nexport const log = nodeProxy( MathNode, MathNode.LOG );\r\nexport const log2 = nodeProxy( MathNode, MathNode.LOG2 );\r\nexport const sqrt = nodeProxy( MathNode, MathNode.SQRT );\r\nexport const inverseSqrt = nodeProxy( MathNode, MathNode.INVERSE_SQRT );\r\nexport const floor = nodeProxy( MathNode, MathNode.FLOOR );\r\nexport const ceil = nodeProxy( MathNode, MathNode.CEIL );\r\nexport const normalize = nodeProxy( MathNode, MathNode.NORMALIZE );\r\nexport const fract = nodeProxy( MathNode, MathNode.FRACT );\r\nexport const sin = nodeProxy( MathNode, MathNode.SIN );\r\nexport const cos = nodeProxy( MathNode, MathNode.COS );\r\nexport const tan = nodeProxy( MathNode, MathNode.TAN );\r\nexport const asin = nodeProxy( MathNode, MathNode.ASIN );\r\nexport const acos = nodeProxy( MathNode, MathNode.ACOS );\r\nexport const atan = nodeProxy( MathNode, MathNode.ATAN );\r\nexport const abs = nodeProxy( MathNode, MathNode.ABS );\r\nexport const sign = nodeProxy( MathNode, MathNode.SIGN );\r\nexport const length = nodeProxy( MathNode, MathNode.LENGTH );\r\nexport const negate = nodeProxy( MathNode, MathNode.NEGATE );\r\nexport const oneMinus = nodeProxy( MathNode, MathNode.ONE_MINUS );\r\nexport const dFdx = nodeProxy( MathNode, MathNode.DFDX );\r\nexport const dFdy = nodeProxy( MathNode, MathNode.DFDY );\r\nexport const round = nodeProxy( MathNode, MathNode.ROUND );\r\nexport const reciprocal = nodeProxy( MathNode, MathNode.RECIPROCAL );\r\nexport const trunc = nodeProxy( MathNode, MathNode.TRUNC );\r\nexport const fwidth = nodeProxy( MathNode, MathNode.FWIDTH );\r\nexport const bitcast = nodeProxy( MathNode, MathNode.BITCAST );\r\nexport const transpose = nodeProxy( MathNode, MathNode.TRANSPOSE );\r\n\r\nexport const atan2 = nodeProxy( MathNode, MathNode.ATAN2 );\r\nexport const min = nodeProxy( MathNode, MathNode.MIN );\r\nexport const max = nodeProxy( MathNode, MathNode.MAX );\r\nexport const mod = nodeProxy( MathNode, MathNode.MOD );\r\nexport const step = nodeProxy( MathNode, MathNode.STEP );\r\nexport const reflect = nodeProxy( MathNode, MathNode.REFLECT );\r\nexport const distance = nodeProxy( MathNode, MathNode.DISTANCE );\r\nexport const difference = nodeProxy( MathNode, MathNode.DIFFERENCE );\r\nexport const dot = nodeProxy( MathNode, MathNode.DOT );\r\nexport const cross = nodeProxy( MathNode, MathNode.CROSS );\r\nexport const pow = nodeProxy( MathNode, MathNode.POW );\r\nexport const pow2 = nodeProxy( MathNode, MathNode.POW, 2 );\r\nexport const pow3 = nodeProxy( MathNode, MathNode.POW, 3 );\r\nexport const pow4 = nodeProxy( MathNode, MathNode.POW, 4 );\r\nexport const transformDirection = nodeProxy( MathNode, MathNode.TRANSFORM_DIRECTION );\r\n\r\nexport const cbrt = ( a ) => mul( sign( a ), pow( abs( a ), 1.0 / 3.0 ) );\r\nexport const lengthSq = ( a ) => dot( a, a );\r\nexport const mix = nodeProxy( MathNode, MathNode.MIX );\r\nexport const clamp = ( value, low = 0, high = 1 ) => nodeObject( new MathNode( MathNode.CLAMP, nodeObject( value ), nodeObject( low ), nodeObject( high ) ) );\r\nexport const saturate = ( value ) => clamp( value );\r\nexport const refract = nodeProxy( MathNode, MathNode.REFRACT );\r\nexport const smoothstep = nodeProxy( MathNode, MathNode.SMOOTHSTEP );\r\nexport const faceForward = nodeProxy( MathNode, MathNode.FACEFORWARD );\r\n\r\nexport const rand = tslFn( ( [ uv ] ) => {\r\n\r\n\tconst a = 12.9898, b = 78.233, c = 43758.5453;\r\n\tconst dt = dot( uv.xy, vec2( a, b ) ), sn = mod( dt, PI );\r\n\r\n\treturn fract( sin( sn ).mul( c ) );\r\n\r\n} );\r\n\r\nexport const mixElement = ( t, e1, e2 ) => mix( e1, e2, t );\r\nexport const smoothstepElement = ( x, low, high ) => smoothstep( low, high, x );\r\n\r\naddNodeElement( 'all', all );\r\naddNodeElement( 'any', any );\r\naddNodeElement( 'equals', equals );\r\n\r\naddNodeElement( 'radians', radians );\r\naddNodeElement( 'degrees', degrees );\r\naddNodeElement( 'exp', exp );\r\naddNodeElement( 'exp2', exp2 );\r\naddNodeElement( 'log', log );\r\naddNodeElement( 'log2', log2 );\r\naddNodeElement( 'sqrt', sqrt );\r\naddNodeElement( 'inverseSqrt', inverseSqrt );\r\naddNodeElement( 'floor', floor );\r\naddNodeElement( 'ceil', ceil );\r\naddNodeElement( 'normalize', normalize );\r\naddNodeElement( 'fract', fract );\r\naddNodeElement( 'sin', sin );\r\naddNodeElement( 'cos', cos );\r\naddNodeElement( 'tan', tan );\r\naddNodeElement( 'asin', asin );\r\naddNodeElement( 'acos', acos );\r\naddNodeElement( 'atan', atan );\r\naddNodeElement( 'abs', abs );\r\naddNodeElement( 'sign', sign );\r\naddNodeElement( 'length', length );\r\naddNodeElement( 'lengthSq', lengthSq );\r\naddNodeElement( 'negate', negate );\r\naddNodeElement( 'oneMinus', oneMinus );\r\naddNodeElement( 'dFdx', dFdx );\r\naddNodeElement( 'dFdy', dFdy );\r\naddNodeElement( 'round', round );\r\naddNodeElement( 'reciprocal', reciprocal );\r\naddNodeElement( 'trunc', trunc );\r\naddNodeElement( 'fwidth', fwidth );\r\naddNodeElement( 'atan2', atan2 );\r\naddNodeElement( 'min', min );\r\naddNodeElement( 'max', max );\r\naddNodeElement( 'mod', mod );\r\naddNodeElement( 'step', step );\r\naddNodeElement( 'reflect', reflect );\r\naddNodeElement( 'distance', distance );\r\naddNodeElement( 'dot', dot );\r\naddNodeElement( 'cross', cross );\r\naddNodeElement( 'pow', pow );\r\naddNodeElement( 'pow2', pow2 );\r\naddNodeElement( 'pow3', pow3 );\r\naddNodeElement( 'pow4', pow4 );\r\naddNodeElement( 'transformDirection', transformDirection );\r\naddNodeElement( 'mix', mixElement );\r\naddNodeElement( 'clamp', clamp );\r\naddNodeElement( 'refract', refract );\r\naddNodeElement( 'smoothstep', smoothstepElement );\r\naddNodeElement( 'faceForward', faceForward );\r\naddNodeElement( 'difference', difference );\r\naddNodeElement( 'saturate', saturate );\r\naddNodeElement( 'cbrt', cbrt );\r\naddNodeElement( 'transpose', transpose );\r\naddNodeElement( 'rand', rand );\r\n\r\naddNodeClass( 'MathNode', MathNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, tslFn, nodeObject, nodeProxy, vec4 } from '../shadernode/ShaderNode.js';\r\n\r\nimport { LinearSRGBColorSpace, SRGBColorSpace } from '../../constants.js';\r\n\r\nconst sRGBToLinearShader = tslFn( ( inputs ) => {\r\n\r\n\tconst { value } = inputs;\r\n\tconst { rgb } = value;\r\n\r\n\tconst a = rgb.mul( 0.9478672986 ).add( 0.0521327014 ).pow( 2.4 );\r\n\tconst b = rgb.mul( 0.0773993808 );\r\n\tconst factor = rgb.lessThanEqual( 0.04045 );\r\n\r\n\tconst rgbResult = mix( a, b, factor );\r\n\r\n\treturn vec4( rgbResult, value.a );\r\n\r\n} );\r\n\r\nconst LinearTosRGBShader = tslFn( ( inputs ) => {\r\n\r\n\tconst { value } = inputs;\r\n\tconst { rgb } = value;\r\n\r\n\tconst a = rgb.pow( 0.41666 ).mul( 1.055 ).sub( 0.055 );\r\n\tconst b = rgb.mul( 12.92 );\r\n\tconst factor = rgb.lessThanEqual( 0.0031308 );\r\n\r\n\tconst rgbResult = mix( a, b, factor );\r\n\r\n\treturn vec4( rgbResult, value.a );\r\n\r\n} );\r\n\r\nconst getColorSpaceMethod = ( colorSpace ) => {\r\n\r\n\tlet method = null;\r\n\r\n\tif ( colorSpace === LinearSRGBColorSpace ) {\r\n\r\n\t\tmethod = 'Linear';\r\n\r\n\t} else if ( colorSpace === SRGBColorSpace ) {\r\n\r\n\t\tmethod = 'sRGB';\r\n\r\n\t}\r\n\r\n\treturn method;\r\n\r\n};\r\n\r\nconst getMethod = ( source, target ) => {\r\n\r\n\treturn getColorSpaceMethod( source ) + 'To' + getColorSpaceMethod( target );\r\n\r\n};\r\n\r\nclass ColorSpaceNode extends TempNode {\r\n\r\n\tconstructor( method, node ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.method = method;\r\n\t\tthis.node = node;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { method, node } = this;\r\n\r\n\t\tif ( method === ColorSpaceNode.LINEAR_TO_LINEAR )\r\n\t\t\treturn node;\r\n\r\n\t\treturn Methods[ method ]( { value: node } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nColorSpaceNode.LINEAR_TO_LINEAR = 'LinearToLinear';\r\nColorSpaceNode.LINEAR_TO_sRGB = 'LinearTosRGB';\r\nColorSpaceNode.sRGB_TO_LINEAR = 'sRGBToLinear';\r\n\r\nconst Methods = {\r\n\t[ ColorSpaceNode.LINEAR_TO_sRGB ]: LinearTosRGBShader,\r\n\t[ ColorSpaceNode.sRGB_TO_LINEAR ]: sRGBToLinearShader\r\n};\r\n\r\nexport default ColorSpaceNode;\r\n\r\nexport const linearToColorSpace = ( node, colorSpace ) => nodeObject( new ColorSpaceNode( getMethod( LinearSRGBColorSpace, colorSpace ), nodeObject( node ) ) );\r\nexport const colorSpaceToLinear = ( node, colorSpace ) => nodeObject( new ColorSpaceNode( getMethod( colorSpace, LinearSRGBColorSpace ), nodeObject( node ) ) );\r\n\r\nexport const linearTosRGB = nodeProxy( ColorSpaceNode, ColorSpaceNode.LINEAR_TO_sRGB );\r\nexport const sRGBToLinear = nodeProxy( ColorSpaceNode, ColorSpaceNode.sRGB_TO_LINEAR );\r\n\r\naddNodeElement( 'linearTosRGB', linearTosRGB );\r\naddNodeElement( 'sRGBToLinear', sRGBToLinear );\r\naddNodeElement( 'linearToColorSpace', linearToColorSpace );\r\naddNodeElement( 'colorSpaceToLinear', colorSpaceToLinear );\r\n\r\naddNodeClass( 'ColorSpaceNode', ColorSpaceNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass ExpressionNode extends Node {\r\n\r\n\tconstructor( snippet = '', nodeType = 'void' ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.snippet = snippet;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst snippet = this.snippet;\r\n\r\n\t\tif ( type === 'void' ) {\r\n\r\n\t\t\tbuilder.addLineFlowCode( snippet );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn builder.format( `( ${ snippet } )`, type, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ExpressionNode;\r\n\r\nexport const expression = nodeProxy( ExpressionNode );\r\n\r\naddNodeClass( 'ExpressionNode', ExpressionNode );\r\n", "import UniformNode from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nclass MaxMipLevelNode extends UniformNode {\r\n\r\n\tconstructor( textureNode ) {\r\n\r\n\t\tsuper( 0 );\r\n\r\n\t\tthis._textureNode = textureNode;\r\n\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\tget textureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tget texture() {\r\n\r\n\t\treturn this._textureNode.value;\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst texture = this.texture;\r\n\t\tconst images = texture.images;\r\n\t\tconst image = ( images && images.length > 0 ) ? ( ( images[ 0 ] && images[ 0 ].image ) || images[ 0 ] ) : texture.image;\r\n\r\n\t\tif ( image && image.width !== undefined ) {\r\n\r\n\t\t\tconst { width, height } = image;\r\n\r\n\t\t\tthis.value = Math.log2( Math.max( width, height ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MaxMipLevelNode;\r\n\r\nexport const maxMipLevel = nodeProxy( MaxMipLevelNode );\r\n\r\naddNodeClass( 'MaxMipLevelNode', MaxMipLevelNode );\r\n", "import UniformNode, { uniform } from '../core/UniformNode.js';\r\nimport { uv } from './UVNode.js';\r\nimport { textureSize } from './TextureSizeNode.js';\r\nimport { colorSpaceToLinear } from '../display/ColorSpaceNode.js';\r\nimport { expression } from '../code/ExpressionNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { maxMipLevel } from '../utils/MaxMipLevelNode.js';\r\nimport { addNodeElement, nodeProxy, vec3, nodeObject } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\n\r\nimport { IntType, UnsignedIntType } from '../../constants.js';\r\n\r\nclass TextureNode extends UniformNode {\r\n\r\n\tconstructor( value, uvNode = null, levelNode = null, biasNode = null ) {\r\n\r\n\t\tsuper( value );\r\n\r\n\t\tthis.isTextureNode = true;\r\n\r\n\t\tthis.uvNode = uvNode;\r\n\t\tthis.levelNode = levelNode;\r\n\t\tthis.biasNode = biasNode;\r\n\t\tthis.compareNode = null;\r\n\t\tthis.depthNode = null;\r\n\t\tthis.gradNode = null;\r\n\r\n\t\tthis.sampler = true;\r\n\t\tthis.updateMatrix = false;\r\n\t\tthis.updateType = NodeUpdateType.NONE;\r\n\r\n\t\tthis.referenceNode = null;\r\n\r\n\t\tthis._value = value;\r\n\t\tthis._matrixUniform = null;\r\n\r\n\t\tthis.setUpdateMatrix( uvNode === null );\r\n\r\n\t}\r\n\r\n\tset value( value ) {\r\n\r\n\t\tif ( this.referenceNode ) {\r\n\r\n\t\t\tthis.referenceNode.value = value;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._value = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tget value() {\r\n\r\n\t\treturn this.referenceNode ? this.referenceNode.value : this._value;\r\n\r\n\t}\r\n\r\n\tgetUniformHash( /*builder*/ ) {\r\n\r\n\t\treturn this.value.uuid;\r\n\r\n\t}\r\n\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\tif ( this.value.isDepthTexture === true ) return 'float';\r\n\r\n\t\tif ( this.value.type === UnsignedIntType ) {\r\n\r\n\t\t\treturn 'uvec4';\r\n\r\n\t\t} else if ( this.value.type === IntType ) {\r\n\r\n\t\t\treturn 'ivec4';\r\n\r\n\t\t}\r\n\r\n\t\treturn 'vec4';\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'texture';\r\n\r\n\t}\r\n\r\n\tgetDefaultUV() {\r\n\r\n\t\treturn uv( this.value.channel );\r\n\r\n\t}\r\n\r\n\tupdateReference( /*state*/ ) {\r\n\r\n\t\treturn this.value;\r\n\r\n\t}\r\n\r\n\tgetTransformedUV( uvNode ) {\r\n\r\n\t\tif ( this._matrixUniform === null ) this._matrixUniform = uniform( this.value.matrix );\r\n\r\n\t\treturn this._matrixUniform.mul( vec3( uvNode, 1 ) ).xy;\r\n\r\n\r\n\t}\r\n\r\n\tsetUpdateMatrix( value ) {\r\n\r\n\t\tthis.updateMatrix = value;\r\n\t\tthis.updateType = value ? NodeUpdateType.FRAME : NodeUpdateType.NONE;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetupUV( builder, uvNode ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( builder.isFlipY() && ( texture.isRenderTargetTexture === true || texture.isFramebufferTexture === true || texture.isDepthTexture === true ) ) {\r\n\r\n\t\t\tuvNode = uvNode.setY( uvNode.y.oneMinus() );\r\n\r\n\t\t}\r\n\r\n\t\treturn uvNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.referenceNode = this.referenceNode;\r\n\r\n\t\t//\r\n\r\n\t\tlet uvNode = this.uvNode;\r\n\r\n\t\tif ( ( uvNode === null || builder.context.forceUVContext === true ) && builder.context.getUV ) {\r\n\r\n\t\t\tuvNode = builder.context.getUV( this );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! uvNode ) uvNode = this.getDefaultUV();\r\n\r\n\t\tif ( this.updateMatrix === true ) {\r\n\r\n\t\t\tuvNode = this.getTransformedUV( uvNode );\r\n\r\n\t\t}\r\n\r\n\t\tuvNode = this.setupUV( builder, uvNode );\r\n\r\n\t\t//\r\n\r\n\t\tlet levelNode = this.levelNode;\r\n\r\n\t\tif ( levelNode === null && builder.context.getTextureLevel ) {\r\n\r\n\t\t\tlevelNode = builder.context.getTextureLevel( this );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tproperties.uvNode = uvNode;\r\n\t\tproperties.levelNode = levelNode;\r\n\t\tproperties.biasNode = this.biasNode;\r\n\t\tproperties.compareNode = this.compareNode;\r\n\t\tproperties.gradNode = this.gradNode;\r\n\t\tproperties.depthNode = this.depthNode;\r\n\r\n\t}\r\n\r\n\tgenerateUV( builder, uvNode ) {\r\n\r\n\t\treturn uvNode.build( builder, this.sampler === true ? 'vec2' : 'ivec2' );\r\n\r\n\t}\r\n\r\n\tgenerateSnippet( builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tif ( levelSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet );\r\n\r\n\t\t} else if ( biasSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureBias( texture, textureProperty, uvSnippet, biasSnippet, depthSnippet );\r\n\r\n\t\t} else if ( gradSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet, depthSnippet );\r\n\r\n\t\t} else if ( compareSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet );\r\n\r\n\t\t} else if ( this.sampler === false ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureLoad( texture, textureProperty, uvSnippet, depthSnippet );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = builder.generateTexture( texture, textureProperty, uvSnippet, depthSnippet );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( ! texture || texture.isTexture !== true ) {\r\n\r\n\t\t\tthrow new Error( 'TextureNode: Need a three.js texture.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst textureProperty = super.generate( builder, 'property' );\r\n\r\n\t\tif ( output === 'sampler' ) {\r\n\r\n\t\t\treturn textureProperty + '_sampler';\r\n\r\n\t\t} else if ( builder.isReference( output ) ) {\r\n\r\n\t\t\treturn textureProperty;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\tlet propertyName = nodeData.propertyName;\r\n\r\n\t\t\tif ( propertyName === undefined ) {\r\n\r\n\t\t\t\tconst { uvNode, levelNode, biasNode, compareNode, depthNode, gradNode } = properties;\r\n\r\n\t\t\t\tconst uvSnippet = this.generateUV( builder, uvNode );\r\n\t\t\t\tconst levelSnippet = levelNode ? levelNode.build( builder, 'float' ) : null;\r\n\t\t\t\tconst biasSnippet = biasNode ? biasNode.build( builder, 'float' ) : null;\r\n\t\t\t\tconst depthSnippet = depthNode ? depthNode.build( builder, 'int' ) : null;\r\n\t\t\t\tconst compareSnippet = compareNode ? compareNode.build( builder, 'float' ) : null;\r\n\t\t\t\tconst gradSnippet = gradNode ? [ gradNode[ 0 ].build( builder, 'vec2' ), gradNode[ 1 ].build( builder, 'vec2' ) ] : null;\r\n\r\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this );\r\n\r\n\t\t\t\tpropertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\t\t\tconst snippet = this.generateSnippet( builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet );\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}` );\r\n\r\n\t\t\t\tnodeData.snippet = snippet;\r\n\t\t\t\tnodeData.propertyName = propertyName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet snippet = propertyName;\r\n\t\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\t\tif ( builder.needsColorSpaceToLinear( texture ) ) {\r\n\r\n\t\t\t\tsnippet = colorSpaceToLinear( expression( snippet, nodeType ), texture.colorSpace ).setup( builder ).build( builder, nodeType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn builder.format( snippet, nodeType, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetSampler( value ) {\r\n\r\n\t\tthis.sampler = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetSampler() {\r\n\r\n\t\treturn this.sampler;\r\n\r\n\t}\r\n\r\n\t// @TODO: Move to TSL\r\n\r\n\tuv( uvNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.uvNode = nodeObject( uvNode );\r\n\t\ttextureNode.referenceNode = this;\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tblur( amountNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.biasNode = nodeObject( amountNode ).mul( maxMipLevel( textureNode ) );\r\n\t\ttextureNode.referenceNode = this;\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tlevel( levelNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.levelNode = nodeObject( levelNode );\r\n\t\ttextureNode.referenceNode = this;\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tsize( levelNode ) {\r\n\r\n\t\treturn textureSize( this, levelNode );\r\n\r\n\t}\r\n\r\n\tbias( biasNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.biasNode = nodeObject( biasNode );\r\n\t\ttextureNode.referenceNode = this;\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tcompare( compareNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.compareNode = nodeObject( compareNode );\r\n\t\ttextureNode.referenceNode = this;\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tgrad( gradNodeX, gradNodeY ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.gradNode = [ nodeObject( gradNodeX ), nodeObject( gradNodeY ) ];\r\n\r\n\t\ttextureNode.referenceNode = this;\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\tdepth( depthNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.depthNode = nodeObject( depthNode );\r\n\t\ttextureNode.referenceNode = this;\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\t// --\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.value = this.value.toJSON( data.meta ).uuid;\r\n\t\tdata.sampler = this.sampler;\r\n\t\tdata.updateMatrix = this.updateMatrix;\r\n\t\tdata.updateType = this.updateType;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.value = data.meta.textures[ data.value ];\r\n\t\tthis.sampler = data.sampler;\r\n\t\tthis.updateMatrix = data.updateMatrix;\r\n\t\tthis.updateType = data.updateType;\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst texture = this.value;\r\n\t\tconst matrixUniform = this._matrixUniform;\r\n\r\n\t\tif ( matrixUniform !== null ) matrixUniform.value = texture.matrix;\r\n\r\n\t\tif ( texture.matrixAutoUpdate === true ) {\r\n\r\n\t\t\ttexture.updateMatrix();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst newNode = new this.constructor( this.value, this.uvNode, this.levelNode, this.biasNode );\r\n\t\tnewNode.sampler = this.sampler;\r\n\r\n\t\treturn newNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TextureNode;\r\n\r\nexport const texture = nodeProxy( TextureNode );\r\nexport const textureLoad = ( ...params ) => texture( ...params ).setSampler( false );\r\n\r\n//export const textureLevel = ( value, uv, level ) => texture( value, uv ).level( level );\r\n\r\nexport const sampler = ( aTexture ) => ( aTexture.isNode === true ? aTexture : texture( aTexture ) ).convert( 'sampler' );\r\n\r\naddNodeElement( 'texture', texture );\r\n//addNodeElement( 'textureLevel', textureLevel );\r\n\r\naddNodeClass( 'TextureNode', TextureNode );\r\n", "import UniformNode from '../core/UniformNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass BufferNode extends UniformNode {\r\n\r\n\tconstructor( value, bufferType, bufferCount = 0 ) {\r\n\r\n\t\tsuper( value, bufferType );\r\n\r\n\t\tthis.isBufferNode = true;\r\n\r\n\t\tthis.bufferType = bufferType;\r\n\t\tthis.bufferCount = bufferCount;\r\n\r\n\t}\r\n\r\n\tgetElementType( builder ) {\r\n\r\n\t\treturn this.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'buffer';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BufferNode;\r\n\r\nexport const buffer = ( value, type, count ) => nodeObject( new BufferNode( value, type, count ) );\r\n\r\naddNodeClass( 'BufferNode', BufferNode );\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { getValueType } from '../core/NodeUtils.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\nimport BufferNode from './BufferNode.js';\r\n\r\nclass UniformsElementNode extends ArrayElementNode {\r\n\r\n\tconstructor( arrayBuffer, indexNode ) {\r\n\r\n\t\tsuper( arrayBuffer, indexNode );\r\n\r\n\t\tthis.isArrayBufferElementNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getElementType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = super.generate( builder );\r\n\t\tconst type = this.getNodeType();\r\n\r\n\t\treturn builder.format( snippet, 'vec4', type );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass UniformsNode extends BufferNode {\r\n\r\n\tconstructor( value, elementType = null ) {\r\n\r\n\t\tsuper( null, 'vec4' );\r\n\r\n\t\tthis.array = value;\r\n\t\tthis.elementType = elementType;\r\n\r\n\t\tthis._elementType = null;\r\n\t\tthis._elementLength = 0;\r\n\r\n\t\tthis.updateType = NodeUpdateType.RENDER;\r\n\r\n\t\tthis.isArrayBufferNode = true;\r\n\r\n\t}\r\n\r\n\tgetElementType() {\r\n\r\n\t\treturn this.elementType || this._elementType;\r\n\r\n\t}\r\n\r\n\tgetElementLength() {\r\n\r\n\t\treturn this._elementLength;\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconst { array, value } = this;\r\n\r\n\t\tconst elementLength = this.getElementLength();\r\n\t\tconst elementType = this.getElementType();\r\n\r\n\t\tif ( elementLength === 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 4;\r\n\r\n\t\t\t\tvalue[ index ] = array[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( elementType === 'color' ) {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 4;\r\n\t\t\t\tconst vector = array[ i ];\r\n\r\n\t\t\t\tvalue[ index ] = vector.r;\r\n\t\t\t\tvalue[ index + 1 ] = vector.g;\r\n\t\t\t\tvalue[ index + 2 ] = vector.b || 0;\r\n\t\t\t\t//value[ index + 3 ] = vector.a || 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 4;\r\n\t\t\t\tconst vector = array[ i ];\r\n\r\n\t\t\t\tvalue[ index ] = vector.x;\r\n\t\t\t\tvalue[ index + 1 ] = vector.y;\r\n\t\t\t\tvalue[ index + 2 ] = vector.z || 0;\r\n\t\t\t\tvalue[ index + 3 ] = vector.w || 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst length = this.array.length;\r\n\r\n\t\tthis._elementType = this.elementType === null ? getValueType( this.array[ 0 ] ) : this.elementType;\r\n\t\tthis._elementLength = builder.getTypeLength( this._elementType );\r\n\r\n\t\tlet arrayType = Float32Array;\r\n\r\n\t\tif ( this._elementType.charAt( 0 ) === 'i' ) arrayType = Int32Array;\r\n\t\telse if ( this._elementType.charAt( 0 ) === 'u' ) arrayType = Uint32Array;\r\n\r\n\t\tthis.value = new arrayType( length * 4 );\r\n\t\tthis.bufferCount = length;\r\n\t\tthis.bufferType = builder.changeComponentType( 'vec4', builder.getComponentType( this._elementType ) );\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\telement( indexNode ) {\r\n\r\n\t\treturn nodeObject( new UniformsElementNode( this, nodeObject( indexNode ) ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default UniformsNode;\r\n\r\nexport const uniforms = ( values, nodeType ) => nodeObject( new UniformsNode( values, nodeType ) );\r\n\r\naddNodeClass( 'UniformsNode', UniformsNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { texture } from './TextureNode.js';\r\nimport { buffer } from './BufferNode.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\nimport { uniforms } from './UniformsNode.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\n\r\nclass ReferenceElementNode extends ArrayElementNode {\r\n\r\n\tconstructor( referenceNode, indexNode ) {\r\n\r\n\t\tsuper( referenceNode, indexNode );\r\n\r\n\t\tthis.referenceNode = referenceNode;\r\n\r\n\t\tthis.isReferenceElementNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType() {\r\n\r\n\t\treturn this.referenceNode.uniformType;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = super.generate( builder );\r\n\t\tconst arrayType = this.referenceNode.getNodeType();\r\n\t\tconst elementType = this.getNodeType();\r\n\r\n\t\treturn builder.format( snippet, arrayType, elementType );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ReferenceNode extends Node {\r\n\r\n\tconstructor( property, uniformType, object = null, count = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.property = property;\r\n\t\tthis.uniformType = uniformType;\r\n\t\tthis.object = object;\r\n\t\tthis.count = count;\r\n\r\n\t\tthis.properties = property.split( '.' );\r\n\t\tthis.reference = object;\r\n\t\tthis.node = null;\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t}\r\n\r\n\telement( indexNode ) {\r\n\r\n\t\treturn nodeObject( new ReferenceElementNode( this, nodeObject( indexNode ) ) );\r\n\r\n\t}\r\n\r\n\tsetNodeType( uniformType ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( this.count !== null ) {\r\n\r\n\t\t\tnode = buffer( null, uniformType, this.count );\r\n\r\n\t\t} else if ( Array.isArray( this.getValueFromReference() ) ) {\r\n\r\n\t\t\tnode = uniforms( null, uniformType );\r\n\r\n\t\t} else if ( uniformType === 'texture' ) {\r\n\r\n\t\t\tnode = texture( null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnode = uniform( null, uniformType );\r\n\r\n\t\t}\r\n\r\n\t\tthis.node = node;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.node === null ) {\r\n\r\n\t\t\tthis.updateValue();\r\n\r\n\t\t}\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgetValueFromReference( object = this.reference ) {\r\n\r\n\t\tconst { properties } = this;\r\n\r\n\t\tlet value = object[ properties[ 0 ] ];\r\n\r\n\t\tfor ( let i = 1; i < properties.length; i ++ ) {\r\n\r\n\t\t\tvalue = value[ properties[ i ] ];\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.object !== null ? this.object : state.object;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tthis.updateValue();\r\n\r\n\t\treturn this.node;\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tthis.updateValue();\r\n\r\n\t}\r\n\r\n\tupdateValue() {\r\n\r\n\t\tif ( this.node === null ) this.setNodeType( this.uniformType );\r\n\r\n\t\tconst value = this.getValueFromReference();\r\n\r\n\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\tthis.node.array = value;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.node.value = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ReferenceNode;\r\n\r\nexport const reference = ( name, type, object ) => nodeObject( new ReferenceNode( name, type, object ) );\r\nexport const referenceBuffer = ( name, type, count, object ) => nodeObject( new ReferenceNode( name, type, object, count ) );\r\n\r\naddNodeClass( 'ReferenceNode', ReferenceNode );\r\n", "import ReferenceNode from './ReferenceNode.js';\r\n//import { renderGroup } from '../core/UniformGroupNode.js';\r\n//import { NodeUpdateType } from '../core/constants.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass MaterialReferenceNode extends ReferenceNode {\r\n\r\n\tconstructor( property, inputType, material = null ) {\r\n\r\n\t\tsuper( property, inputType, material );\r\n\r\n\t\tthis.material = material;\r\n\r\n\t\t//this.updateType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\t/*setNodeType( node ) {\r\n\r\n\t\tsuper.setNodeType( node );\r\n\r\n\t\tthis.node.groupNode = renderGroup;\r\n\r\n\t}*/\r\n\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.material !== null ? this.material : state.material;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MaterialReferenceNode;\r\n\r\nexport const materialReference = ( name, type, material ) => nodeObject( new MaterialReferenceNode( name, type, material ) );\r\n\r\naddNodeClass( 'MaterialReferenceNode', MaterialReferenceNode );\r\n", "import { uniform } from '../core/UniformNode.js';\r\nimport { sharedUniformGroup } from '../core/UniformGroupNode.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nconst cameraGroup = /*#__PURE__*/ sharedUniformGroup( 'camera' ).onRenderUpdate( () => {\r\n\r\n\tcameraGroup.needsUpdate = true;\r\n\r\n} );\r\n\r\nexport const cameraNear = /*#__PURE__*/ uniform( 'float' ).label( 'cameraNear' ).setGroup( cameraGroup ).onRenderUpdate( ( { camera } ) => camera.near );\r\nexport const cameraFar = /*#__PURE__*/ uniform( 'float' ).label( 'cameraFar' ).setGroup( cameraGroup ).onRenderUpdate( ( { camera } ) => camera.far );\r\nexport const cameraLogDepth = /*#__PURE__*/ uniform( 'float' ).label( 'cameraLogDepth' ).setGroup( cameraGroup ).onRenderUpdate( ( { camera } ) => 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\nexport const cameraProjectionMatrix = /*#__PURE__*/ uniform( 'mat4' ).label( 'cameraProjectionMatrix' ).setGroup( cameraGroup ).onRenderUpdate( ( { camera } ) => camera.projectionMatrix );\r\nexport const cameraProjectionMatrixInverse = /*#__PURE__*/ uniform( 'mat4' ).label( 'cameraProjectionMatrixInverse' ).setGroup( cameraGroup ).onRenderUpdate( ( { camera } ) => camera.projectionMatrixInverse );\r\nexport const cameraViewMatrix = /*#__PURE__*/ uniform( 'mat4' ).label( 'cameraViewMatrix' ).setGroup( cameraGroup ).onRenderUpdate( ( { camera } ) => camera.matrixWorldInverse );\r\nexport const cameraWorldMatrix = /*#__PURE__*/ uniform( 'mat4' ).label( 'cameraWorldMatrix' ).setGroup( cameraGroup ).onRenderUpdate( ( { camera } ) => camera.matrixWorld );\r\nexport const cameraNormalMatrix = /*#__PURE__*/ uniform( 'mat3' ).label( 'cameraNormalMatrix' ).setGroup( cameraGroup ).onRenderUpdate( ( { camera } ) => camera.normalMatrix );\r\nexport const cameraPosition = /*#__PURE__*/ uniform( new Vector3() ).label( 'cameraPosition' ).setGroup( cameraGroup ).onRenderUpdate( ( { camera }, self ) => self.value.setFromMatrixPosition( camera.matrixWorld ) );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport UniformNode from '../core/UniformNode.js';\r\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nclass Object3DNode extends Node {\r\n\r\n\tconstructor( scope = Object3DNode.VIEW_MATRIX, object3d = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.object3d = object3d;\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t\tthis._uniformNode = new UniformNode( null );\r\n\r\n\t}\r\n\r\n\tgetNodeType() {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === Object3DNode.WORLD_MATRIX || scope === Object3DNode.VIEW_MATRIX ) {\r\n\r\n\t\t\treturn 'mat4';\r\n\r\n\t\t} else if ( scope === Object3DNode.NORMAL_MATRIX ) {\r\n\r\n\t\t\treturn 'mat3';\r\n\r\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {\r\n\r\n\t\t\treturn 'vec3';\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tconst object = this.object3d;\r\n\t\tconst uniformNode = this._uniformNode;\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === Object3DNode.VIEW_MATRIX ) {\r\n\r\n\t\t\tuniformNode.value = object.modelViewMatrix;\r\n\r\n\t\t} else if ( scope === Object3DNode.NORMAL_MATRIX ) {\r\n\r\n\t\t\tuniformNode.value = object.normalMatrix;\r\n\r\n\t\t} else if ( scope === Object3DNode.WORLD_MATRIX ) {\r\n\r\n\t\t\tuniformNode.value = object.matrixWorld;\r\n\r\n\t\t} else if ( scope === Object3DNode.POSITION ) {\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\r\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\r\n\r\n\t\t} else if ( scope === Object3DNode.SCALE ) {\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\r\n\t\t\tuniformNode.value.setFromMatrixScale( object.matrixWorld );\r\n\r\n\t\t} else if ( scope === Object3DNode.DIRECTION ) {\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\r\n\t\t\tobject.getWorldDirection( uniformNode.value );\r\n\r\n\t\t} else if ( scope === Object3DNode.VIEW_POSITION ) {\r\n\r\n\t\t\tconst camera = frame.camera;\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\r\n\r\n\t\t\tuniformNode.value.applyMatrix4( camera.matrixWorldInverse );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === Object3DNode.WORLD_MATRIX || scope === Object3DNode.VIEW_MATRIX ) {\r\n\r\n\t\t\tthis._uniformNode.nodeType = 'mat4';\r\n\r\n\t\t} else if ( scope === Object3DNode.NORMAL_MATRIX ) {\r\n\r\n\t\t\tthis._uniformNode.nodeType = 'mat3';\r\n\r\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {\r\n\r\n\t\t\tthis._uniformNode.nodeType = 'vec3';\r\n\r\n\t\t}\r\n\r\n\t\treturn this._uniformNode.build( builder );\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.scope = this.scope;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.scope = data.scope;\r\n\r\n\t}\r\n\r\n}\r\n\r\nObject3DNode.VIEW_MATRIX = 'viewMatrix';\r\nObject3DNode.NORMAL_MATRIX = 'normalMatrix';\r\nObject3DNode.WORLD_MATRIX = 'worldMatrix';\r\nObject3DNode.POSITION = 'position';\r\nObject3DNode.SCALE = 'scale';\r\nObject3DNode.VIEW_POSITION = 'viewPosition';\r\nObject3DNode.DIRECTION = 'direction';\r\n\r\nexport default Object3DNode;\r\n\r\nexport const objectDirection = nodeProxy( Object3DNode, Object3DNode.DIRECTION );\r\nexport const objectViewMatrix = nodeProxy( Object3DNode, Object3DNode.VIEW_MATRIX );\r\nexport const objectNormalMatrix = nodeProxy( Object3DNode, Object3DNode.NORMAL_MATRIX );\r\nexport const objectWorldMatrix = nodeProxy( Object3DNode, Object3DNode.WORLD_MATRIX );\r\nexport const objectPosition = nodeProxy( Object3DNode, Object3DNode.POSITION );\r\nexport const objectScale = nodeProxy( Object3DNode, Object3DNode.SCALE );\r\nexport const objectViewPosition = nodeProxy( Object3DNode, Object3DNode.VIEW_POSITION );\r\n\r\naddNodeClass( 'Object3DNode', Object3DNode );\r\n", "import Object3DNode from './Object3DNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\n\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\n\r\nclass ModelNode extends Object3DNode {\r\n\r\n\tconstructor( scope = ModelNode.VIEW_MATRIX ) {\r\n\r\n\t\tsuper( scope );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tthis.object3d = frame.object;\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ModelNode;\r\n\r\nexport const modelDirection = nodeImmutable( ModelNode, ModelNode.DIRECTION );\r\nexport const modelViewMatrix = nodeImmutable( ModelNode, ModelNode.VIEW_MATRIX ).label( 'modelViewMatrix' ).temp( 'ModelViewMatrix' );\r\nexport const modelNormalMatrix = nodeImmutable( ModelNode, ModelNode.NORMAL_MATRIX );\r\nexport const modelWorldMatrix = nodeImmutable( ModelNode, ModelNode.WORLD_MATRIX );\r\nexport const modelPosition = nodeImmutable( ModelNode, ModelNode.POSITION );\r\nexport const modelScale = nodeImmutable( ModelNode, ModelNode.SCALE );\r\nexport const modelViewPosition = nodeImmutable( ModelNode, ModelNode.VIEW_POSITION );\r\nexport const modelWorldMatrixInverse = uniform( new Matrix4() ).onObjectUpdate( ( { object }, self ) => self.value.copy( object.matrixWorld ).invert() );\r\n\r\naddNodeClass( 'ModelNode', ModelNode );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { property } from '../core/PropertyNode.js';\r\nimport { cameraViewMatrix } from './CameraNode.js';\r\nimport { modelNormalMatrix } from './ModelNode.js';\r\nimport { vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nexport const normalGeometry = /*#__PURE__*/ attribute( 'normal', 'vec3', vec3( 0, 1, 0 ) );\r\nexport const normalLocal = /*#__PURE__*/ normalGeometry.toVar( 'normalLocal' );\r\nexport const normalView = /*#__PURE__*/ varying( modelNormalMatrix.mul( normalLocal ), 'v_normalView' ).normalize().toVar( 'normalView' );\r\nexport const normalWorld = /*#__PURE__*/ varying( normalView.transformDirection( cameraViewMatrix ), 'v_normalWorld' ).normalize().toVar( 'normalWorld' );\r\nexport const transformedNormalView = /*#__PURE__*/ property( 'vec3', 'transformedNormalView' );\r\nexport const transformedNormalWorld = /*#__PURE__*/ transformedNormalView.transformDirection( cameraViewMatrix ).normalize().toVar( 'transformedNormalWorld' );\r\nexport const transformedClearcoatNormalView = /*#__PURE__*/ property( 'vec3', 'transformedClearcoatNormalView' );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { reference } from './ReferenceNode.js';\r\nimport { materialReference } from './MaterialReferenceNode.js';\r\nimport { normalView } from './NormalNode.js';\r\nimport { nodeImmutable, float, vec2, mat2 } from '../shadernode/ShaderNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nconst _propertyCache = new Map();\r\n\r\nclass MaterialNode extends Node {\r\n\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\tgetCache( property, type ) {\r\n\r\n\t\tlet node = _propertyCache.get( property );\r\n\r\n\t\tif ( node === undefined ) {\r\n\r\n\t\t\tnode = materialReference( property, type );\r\n\r\n\t\t\t_propertyCache.set( property, node );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tgetFloat( property ) {\r\n\r\n\t\treturn this.getCache( property, 'float' );\r\n\r\n\t}\r\n\r\n\tgetColor( property ) {\r\n\r\n\t\treturn this.getCache( property, 'color' );\r\n\r\n\t}\r\n\r\n\tgetTexture( property ) {\r\n\r\n\t\treturn this.getCache( property === 'map' ? 'map' : property + 'Map', 'texture' );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst material = builder.context.material;\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( scope === MaterialNode.COLOR ) {\r\n\r\n\t\t\tconst colorNode = this.getColor( scope );\r\n\r\n\t\t\tif ( material.map && material.map.isTexture === true ) {\r\n\r\n\t\t\t\tnode = colorNode.mul( this.getTexture( 'map' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = colorNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\r\n\r\n\t\t\tconst opacityNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.alphaMap && material.alphaMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = opacityNode.mul( this.getTexture( 'alpha' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = opacityNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SPECULAR_STRENGTH ) {\r\n\r\n\t\t\tif ( material.specularMap && material.specularMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = this.getTexture( 'specular' ).r;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = float( 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SPECULAR_INTENSITY ) {\r\n\r\n\t\t\tconst specularIntensity = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.specularMap ) {\r\n\r\n\t\t\t\tnode = specularIntensity.mul( this.getTexture( scope ).a );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = specularIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SPECULAR_COLOR ) {\r\n\r\n\t\t\tconst specularColorNode = this.getColor( scope );\r\n\r\n\t\t\tif ( material.specularColorMap && material.specularColorMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = specularColorNode.mul( this.getTexture( scope ).rgb );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = specularColorNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) { // TODO: cleanup similar branches\r\n\r\n\t\t\tconst roughnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.roughnessMap && material.roughnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = roughnessNode.mul( this.getTexture( scope ).g );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = roughnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\r\n\r\n\t\t\tconst metalnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.metalnessMap && material.metalnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = metalnessNode.mul( this.getTexture( scope ).b );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = metalnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\r\n\r\n\t\t\tconst emissiveIntensityNode = this.getFloat( 'emissiveIntensity' );\r\n\t\t\tconst emissiveNode = this.getColor( scope ).mul( emissiveIntensityNode );\r\n\r\n\t\t\tif ( material.emissiveMap && material.emissiveMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = emissiveNode.mul( this.getTexture( scope ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = emissiveNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.NORMAL ) {\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tnode = this.getTexture( 'normal' ).normalMap( this.getCache( 'normalScale', 'vec2' ) );\r\n\r\n\t\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\t\tnode = this.getTexture( 'bump' ).r.bumpMap( this.getFloat( 'bumpScale' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = normalView;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.CLEARCOAT ) {\r\n\r\n\t\t\tconst clearcoatNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.clearcoatMap && material.clearcoatMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = clearcoatNode.mul( this.getTexture( scope ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = clearcoatNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_ROUGHNESS ) {\r\n\r\n\t\t\tconst clearcoatRoughnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = clearcoatRoughnessNode.mul( this.getTexture( scope ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = clearcoatRoughnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_NORMAL ) {\r\n\r\n\t\t\tif ( material.clearcoatNormalMap ) {\r\n\r\n\t\t\t\tnode = this.getTexture( scope ).normalMap( this.getCache( scope + 'Scale', 'vec2' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = normalView;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SHEEN ) {\r\n\r\n\t\t\tconst sheenNode = this.getColor( 'sheenColor' ).mul( this.getFloat( 'sheen' ) ); // Move this mul() to CPU\r\n\r\n\t\t\tif ( material.sheenColorMap && material.sheenColorMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = sheenNode.mul( this.getTexture( 'sheenColor' ).rgb );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = sheenNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SHEEN_ROUGHNESS ) {\r\n\r\n\t\t\tconst sheenRoughnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = sheenRoughnessNode.mul( this.getTexture( scope ).a );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = sheenRoughnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnode = node.clamp( 0.07, 1.0 );\r\n\r\n\t\t} else if ( scope === MaterialNode.ANISOTROPY ) {\r\n\r\n\t\t\tif ( material.anisotropyMap && material.anisotropyMap.isTexture === true ) {\r\n\r\n\t\t\t\tconst anisotropyPolar = this.getTexture( scope );\r\n\t\t\t\tconst anisotropyMat = mat2( materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x );\r\n\r\n\t\t\t\tnode = anisotropyMat.mul( anisotropyPolar.rg.mul( 2.0 ).sub( vec2( 1.0 ) ).normalize().mul( anisotropyPolar.b ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = materialAnisotropyVector;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.IRIDESCENCE_THICKNESS ) {\r\n\r\n\t\t\tconst iridescenceThicknessMaximum = reference( '1', 'float', material.iridescenceThicknessRange );\r\n\r\n\t\t\tif ( material.iridescenceThicknessMap ) {\r\n\r\n\t\t\t\tconst iridescenceThicknessMinimum = reference( '0', 'float', material.iridescenceThicknessRange );\r\n\r\n\t\t\t\tnode = iridescenceThicknessMaximum.sub( iridescenceThicknessMinimum ).mul( this.getTexture( scope ).g ).add( iridescenceThicknessMinimum );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = iridescenceThicknessMaximum;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.TRANSMISSION ) {\r\n\r\n\t\t\tconst transmissionNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.transmissionMap ) {\r\n\r\n\t\t\t\tnode = transmissionNode.mul( this.getTexture( scope ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = transmissionNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.THICKNESS ) {\r\n\r\n\t\t\tconst thicknessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.thicknessMap ) {\r\n\r\n\t\t\t\tnode = thicknessNode.mul( this.getTexture( scope ).g );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = thicknessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.IOR ) {\r\n\r\n\t\t\tnode = this.getFloat( scope );\r\n\r\n\t\t} else if ( scope === MaterialNode.REFRACTION_RATIO ) {\r\n\r\n\t\t\tnode = this.getFloat( scope );\r\n\r\n\t\t} else if ( scope === MaterialNode.LIGHT_MAP ) {\r\n\r\n\t\t\tnode = this.getTexture( scope ).rgb.mul( this.getFloat( 'lightMapIntensity' ) );\r\n\r\n\t\t} else if ( scope === MaterialNode.AO_MAP ) {\r\n\r\n\t\t\tnode = this.getTexture( scope ).r.sub( 1.0 ).mul( this.getFloat( 'aoMapIntensity' ) ).add( 1.0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst outputType = this.getNodeType( builder );\r\n\r\n\t\t\tnode = this.getCache( scope, outputType );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n}\r\n\r\nMaterialNode.ALPHA_TEST = 'alphaTest';\r\nMaterialNode.COLOR = 'color';\r\nMaterialNode.OPACITY = 'opacity';\r\nMaterialNode.SHININESS = 'shininess';\r\nMaterialNode.SPECULAR = 'specular';\r\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\r\nMaterialNode.SPECULAR_INTENSITY = 'specularIntensity';\r\nMaterialNode.SPECULAR_COLOR = 'specularColor';\r\nMaterialNode.REFLECTIVITY = 'reflectivity';\r\nMaterialNode.ROUGHNESS = 'roughness';\r\nMaterialNode.METALNESS = 'metalness';\r\nMaterialNode.NORMAL = 'normal';\r\nMaterialNode.CLEARCOAT = 'clearcoat';\r\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\r\nMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\r\nMaterialNode.EMISSIVE = 'emissive';\r\nMaterialNode.ROTATION = 'rotation';\r\nMaterialNode.SHEEN = 'sheen';\r\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\r\nMaterialNode.ANISOTROPY = 'anisotropy';\r\nMaterialNode.IRIDESCENCE = 'iridescence';\r\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\r\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\r\nMaterialNode.IOR = 'ior';\r\nMaterialNode.TRANSMISSION = 'transmission';\r\nMaterialNode.THICKNESS = 'thickness';\r\nMaterialNode.ATTENUATION_DISTANCE = 'attenuationDistance';\r\nMaterialNode.ATTENUATION_COLOR = 'attenuationColor';\r\nMaterialNode.LINE_SCALE = 'scale';\r\nMaterialNode.LINE_DASH_SIZE = 'dashSize';\r\nMaterialNode.LINE_GAP_SIZE = 'gapSize';\r\nMaterialNode.LINE_WIDTH = 'linewidth';\r\nMaterialNode.LINE_DASH_OFFSET = 'dashOffset';\r\nMaterialNode.POINT_WIDTH = 'pointWidth';\r\nMaterialNode.DISPERSION = 'dispersion';\r\nMaterialNode.LIGHT_MAP = 'light';\r\nMaterialNode.AO_MAP = 'ao';\r\nMaterialNode.REFRACTION_RATIO = 'refractionRatio';\r\n\r\nexport default MaterialNode;\r\n\r\nexport const materialAlphaTest = nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\r\nexport const materialColor = nodeImmutable( MaterialNode, MaterialNode.COLOR );\r\nexport const materialShininess = nodeImmutable( MaterialNode, MaterialNode.SHININESS );\r\nexport const materialEmissive = nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\r\nexport const materialOpacity = nodeImmutable( MaterialNode, MaterialNode.OPACITY );\r\nexport const materialSpecular = nodeImmutable( MaterialNode, MaterialNode.SPECULAR );\r\n\r\nexport const materialSpecularIntensity = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_INTENSITY );\r\nexport const materialSpecularColor = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );\r\n\r\nexport const materialSpecularStrength = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_STRENGTH );\r\nexport const materialReflectivity = nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );\r\nexport const materialRoughness = nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\r\nexport const materialMetalness = nodeImmutable( MaterialNode, MaterialNode.METALNESS );\r\nexport const materialNormal = nodeImmutable( MaterialNode, MaterialNode.NORMAL );\r\nexport const materialClearcoat = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT );\r\nexport const materialClearcoatRoughness = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS );\r\nexport const materialClearcoatNormal = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_NORMAL );\r\nexport const materialRotation = nodeImmutable( MaterialNode, MaterialNode.ROTATION );\r\nexport const materialSheen = nodeImmutable( MaterialNode, MaterialNode.SHEEN );\r\nexport const materialSheenRoughness = nodeImmutable( MaterialNode, MaterialNode.SHEEN_ROUGHNESS );\r\nexport const materialAnisotropy = nodeImmutable( MaterialNode, MaterialNode.ANISOTROPY );\r\nexport const materialIridescence = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE );\r\nexport const materialIridescenceIOR = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_IOR );\r\nexport const materialIridescenceThickness = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS );\r\nexport const materialTransmission = nodeImmutable( MaterialNode, MaterialNode.TRANSMISSION );\r\nexport const materialThickness = nodeImmutable( MaterialNode, MaterialNode.THICKNESS );\r\nexport const materialIOR = nodeImmutable( MaterialNode, MaterialNode.IOR );\r\nexport const materialAttenuationDistance = nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_DISTANCE );\r\nexport const materialAttenuationColor = nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_COLOR );\r\nexport const materialLineScale = nodeImmutable( MaterialNode, MaterialNode.LINE_SCALE );\r\nexport const materialLineDashSize = nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_SIZE );\r\nexport const materialLineGapSize = nodeImmutable( MaterialNode, MaterialNode.LINE_GAP_SIZE );\r\nexport const materialLineWidth = nodeImmutable( MaterialNode, MaterialNode.LINE_WIDTH );\r\nexport const materialLineDashOffset = nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_OFFSET );\r\nexport const materialPointWidth = nodeImmutable( MaterialNode, MaterialNode.POINT_WIDTH );\r\nexport const materialDispersion = nodeImmutable( MaterialNode, MaterialNode.DISPERSION );\r\nexport const materialLightMap = nodeImmutable( MaterialNode, MaterialNode.LIGHT_MAP );\r\nexport const materialAOMap = nodeImmutable( MaterialNode, MaterialNode.AO_MAP );\r\nexport const materialRefractionRatio = nodeImmutable( MaterialNode, MaterialNode.REFRACTION_RATIO );\r\nexport const materialAnisotropyVector = uniform( new Vector2() ).onReference( function ( frame ) {\r\n\r\n\treturn frame.material;\r\n\r\n} ).onRenderUpdate( function ( { material } ) {\r\n\r\n\tthis.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );\r\n\r\n} );\r\n\r\naddNodeClass( 'MaterialNode', MaterialNode );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { modelWorldMatrix, modelViewMatrix } from './ModelNode.js';\r\n\r\nexport const positionGeometry = /*#__PURE__*/ attribute( 'position', 'vec3' );\r\nexport const positionLocal = /*#__PURE__*/ positionGeometry.toVar( 'positionLocal' );\r\nexport const positionWorld = /*#__PURE__*/ varying( modelWorldMatrix.mul( positionLocal ).xyz, 'v_positionWorld' );\r\nexport const positionWorldDirection = /*#__PURE__*/ varying( positionLocal.transformDirection( modelWorldMatrix ), 'v_positionWorldDirection' ).normalize().toVar( 'positionWorldDirection' );\r\nexport const positionView = /*#__PURE__*/ varying( modelViewMatrix.mul( positionLocal ).xyz, 'v_positionView' );\r\nexport const positionViewDirection = /*#__PURE__*/ varying( positionView.negate(), 'v_positionViewDirection' ).normalize().toVar( 'positionViewDirection' );\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport TempNode from '../core/TempNode.js';\r\nimport { cameraProjectionMatrix } from './CameraNode.js';\r\nimport { modelViewMatrix } from './ModelNode.js';\r\nimport { positionLocal } from './PositionNode.js';\r\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\n\r\nclass ModelViewProjectionNode extends TempNode {\r\n\r\n\tconstructor( positionNode = null ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.positionNode = positionNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( builder.shaderStage === 'fragment' ) {\r\n\r\n\t\t\treturn varying( builder.context.mvp );\r\n\r\n\t\t}\r\n\r\n\t\tconst position = this.positionNode || positionLocal;\r\n\r\n\t\treturn cameraProjectionMatrix.mul( modelViewMatrix ).mul( position );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ModelViewProjectionNode;\r\n\r\nexport const modelViewProjection = nodeProxy( ModelViewProjectionNode );\r\n\r\naddNodeClass( 'ModelViewProjectionNode', ModelViewProjectionNode );\r\n", "import { clamp } from '../math/MathUtils.js';\r\n\r\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n\r\nconst _tables = /*@__PURE__*/ _generateTables();\r\n\r\nfunction _generateTables() {\r\n\r\n\t// float32 to float16 helpers\r\n\r\n\tconst buffer = new ArrayBuffer( 4 );\r\n\tconst floatView = new Float32Array( buffer );\r\n\tconst uint32View = new Uint32Array( buffer );\r\n\r\n\tconst baseTable = new Uint32Array( 512 );\r\n\tconst shiftTable = new Uint32Array( 512 );\r\n\r\n\tfor ( let i = 0; i < 256; ++ i ) {\r\n\r\n\t\tconst e = i - 127;\r\n\r\n\t\t// very small number (0, -0)\r\n\r\n\t\tif ( e < - 27 ) {\r\n\r\n\t\t\tbaseTable[ i ] = 0x0000;\r\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\r\n\t\t\tshiftTable[ i ] = 24;\r\n\t\t\tshiftTable[ i | 0x100 ] = 24;\r\n\r\n\t\t\t// small number (denorm)\r\n\r\n\t\t} else if ( e < - 14 ) {\r\n\r\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\r\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\r\n\t\t\tshiftTable[ i ] = - e - 1;\r\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\r\n\r\n\t\t\t// normal number\r\n\r\n\t\t} else if ( e <= 15 ) {\r\n\r\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\r\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\r\n\t\t\tshiftTable[ i ] = 13;\r\n\t\t\tshiftTable[ i | 0x100 ] = 13;\r\n\r\n\t\t\t// large number (Infinity, -Infinity)\r\n\r\n\t\t} else if ( e < 128 ) {\r\n\r\n\t\t\tbaseTable[ i ] = 0x7c00;\r\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\r\n\t\t\tshiftTable[ i ] = 24;\r\n\t\t\tshiftTable[ i | 0x100 ] = 24;\r\n\r\n\t\t\t// stay (NaN, Infinity, -Infinity)\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbaseTable[ i ] = 0x7c00;\r\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\r\n\t\t\tshiftTable[ i ] = 13;\r\n\t\t\tshiftTable[ i | 0x100 ] = 13;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// float16 to float32 helpers\r\n\r\n\tconst mantissaTable = new Uint32Array( 2048 );\r\n\tconst exponentTable = new Uint32Array( 64 );\r\n\tconst offsetTable = new Uint32Array( 64 );\r\n\r\n\tfor ( let i = 1; i < 1024; ++ i ) {\r\n\r\n\t\tlet m = i << 13; // zero pad mantissa bits\r\n\t\tlet e = 0; // zero exponent\r\n\r\n\t\t// normalized\r\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\r\n\r\n\t\t\tm <<= 1;\r\n\t\t\te -= 0x00800000; // decrement exponent\r\n\r\n\t\t}\r\n\r\n\t\tm &= ~ 0x00800000; // clear leading 1 bit\r\n\t\te += 0x38800000; // adjust bias\r\n\r\n\t\tmantissaTable[ i ] = m | e;\r\n\r\n\t}\r\n\r\n\tfor ( let i = 1024; i < 2048; ++ i ) {\r\n\r\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\r\n\r\n\t}\r\n\r\n\tfor ( let i = 1; i < 31; ++ i ) {\r\n\r\n\t\texponentTable[ i ] = i << 23;\r\n\r\n\t}\r\n\r\n\texponentTable[ 31 ] = 0x47800000;\r\n\texponentTable[ 32 ] = 0x80000000;\r\n\r\n\tfor ( let i = 33; i < 63; ++ i ) {\r\n\r\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\r\n\r\n\t}\r\n\r\n\texponentTable[ 63 ] = 0xc7800000;\r\n\r\n\tfor ( let i = 1; i < 64; ++ i ) {\r\n\r\n\t\tif ( i !== 32 ) {\r\n\r\n\t\t\toffsetTable[ i ] = 1024;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tfloatView: floatView,\r\n\t\tuint32View: uint32View,\r\n\t\tbaseTable: baseTable,\r\n\t\tshiftTable: shiftTable,\r\n\t\tmantissaTable: mantissaTable,\r\n\t\texponentTable: exponentTable,\r\n\t\toffsetTable: offsetTable\r\n\t};\r\n\r\n}\r\n\r\n// float32 to float16\r\n\r\nfunction toHalfFloat( val ) {\r\n\r\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\r\n\r\n\tval = clamp( val, - 65504, 65504 );\r\n\r\n\t_tables.floatView[ 0 ] = val;\r\n\tconst f = _tables.uint32View[ 0 ];\r\n\tconst e = ( f >> 23 ) & 0x1ff;\r\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\r\n\r\n}\r\n\r\n// float16 to float32\r\n\r\nfunction fromHalfFloat( val ) {\r\n\r\n\tconst m = val >> 10;\r\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\r\n\treturn _tables.floatView[ 0 ];\r\n\r\n}\r\n\r\nconst DataUtils = {\r\n\ttoHalfFloat: toHalfFloat,\r\n\tfromHalfFloat: fromHalfFloat,\r\n};\r\n\r\nexport {\r\n\ttoHalfFloat,\r\n\tfromHalfFloat,\r\n\tDataUtils\r\n};\r\n", "function arrayMin( array ) {\r\n\r\n\tif ( array.length === 0 ) return Infinity;\r\n\r\n\tlet min = array[ 0 ];\r\n\r\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\tif ( array[ i ] < min ) min = array[ i ];\r\n\r\n\t}\r\n\r\n\treturn min;\r\n\r\n}\r\n\r\nfunction arrayMax( array ) {\r\n\r\n\tif ( array.length === 0 ) return - Infinity;\r\n\r\n\tlet max = array[ 0 ];\r\n\r\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\tif ( array[ i ] > max ) max = array[ i ];\r\n\r\n\t}\r\n\r\n\treturn max;\r\n\r\n}\r\n\r\nfunction arrayNeedsUint32( array ) {\r\n\r\n\t// assumes larger values usually on last\r\n\r\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\r\n\r\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\r\n\r\n\t}\r\n\r\n\treturn false;\r\n\r\n}\r\n\r\nconst TYPED_ARRAYS = {\r\n\tInt8Array: Int8Array,\r\n\tUint8Array: Uint8Array,\r\n\tUint8ClampedArray: Uint8ClampedArray,\r\n\tInt16Array: Int16Array,\r\n\tUint16Array: Uint16Array,\r\n\tInt32Array: Int32Array,\r\n\tUint32Array: Uint32Array,\r\n\tFloat32Array: Float32Array,\r\n\tFloat64Array: Float64Array\r\n};\r\n\r\nfunction getTypedArray( type, buffer ) {\r\n\r\n\treturn new TYPED_ARRAYS[ type ]( buffer );\r\n\r\n}\r\n\r\nfunction createElementNS( name ) {\r\n\r\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\r\n\r\n}\r\n\r\nfunction createCanvasElement() {\r\n\r\n\tconst canvas = createElementNS( 'canvas' );\r\n\tcanvas.style.display = 'block';\r\n\treturn canvas;\r\n\r\n}\r\n\r\nconst _cache = {};\r\n\r\nfunction warnOnce( message ) {\r\n\r\n\tif ( message in _cache ) return;\r\n\r\n\t_cache[ message ] = true;\r\n\r\n\tconsole.warn( message );\r\n\r\n}\r\n\r\nfunction probeAsync( gl, sync, interval ) {\r\n\r\n\treturn new Promise( function ( resolve, reject ) {\r\n\r\n\t\tfunction probe() {\r\n\r\n\t\t\tswitch ( gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 ) ) {\r\n\r\n\t\t\t\tcase gl.WAIT_FAILED:\r\n\t\t\t\t\treject();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase gl.TIMEOUT_EXPIRED:\r\n\t\t\t\t\tsetTimeout( probe, interval );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tresolve();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsetTimeout( probe, interval );\r\n\r\n\t} );\r\n\r\n}\r\n\r\nexport { arrayMin, arrayMax, arrayNeedsUint32, getTypedArray, createElementNS, createCanvasElement, warnOnce, probeAsync };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { denormalize, normalize } from '../math/MathUtils.js';\r\nimport { StaticDrawUsage, FloatType } from '../constants.js';\r\nimport { fromHalfFloat, toHalfFloat } from '../extras/DataUtils.js';\r\nimport { warnOnce } from '../utils.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _vector2 = /*@__PURE__*/ new Vector2();\r\n\r\nclass BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized = false ) {\r\n\r\n\t\tif ( Array.isArray( array ) ) {\r\n\r\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.isBufferAttribute = true;\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\r\n\t\tthis.normalized = normalized;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis._updateRange = { offset: 0, count: - 1 };\r\n\t\tthis.updateRanges = [];\r\n\t\tthis.gpuType = FloatType;\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tonUploadCallback() {}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\tget updateRange() {\r\n\r\n\t\twarnOnce( 'THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.' ); // @deprecated, r159\r\n\t\treturn this._updateRange;\r\n\r\n\t}\r\n\r\n\tsetUsage( value ) {\r\n\r\n\t\tthis.usage = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddUpdateRange( start, count ) {\r\n\r\n\t\tthis.updateRanges.push( { start, count } );\r\n\r\n\t}\r\n\r\n\tclearUpdateRanges() {\r\n\r\n\t\tthis.updateRanges.length = 0;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.itemSize = source.itemSize;\r\n\t\tthis.count = source.count;\r\n\t\tthis.normalized = source.normalized;\r\n\r\n\t\tthis.usage = source.usage;\r\n\t\tthis.gpuType = source.gpuType;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyAt( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.itemSize;\r\n\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyArray( array ) {\r\n\r\n\t\tthis.array.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tif ( this.itemSize === 2 ) {\r\n\r\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vector2.fromBufferAttribute( this, i );\r\n\t\t\t\t_vector2.applyMatrix3( m );\r\n\r\n\t\t\t\tthis.setXY( i, _vector2.x, _vector2.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.itemSize === 3 ) {\r\n\r\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vector.fromBufferAttribute( this, i );\r\n\t\t\t\t_vector.applyMatrix3( m );\r\n\r\n\t\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyMatrix4( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyNormalMatrix( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttransformDirection( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.transformDirection( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tset( value, offset = 0 ) {\r\n\r\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index, component ) {\r\n\r\n\t\tlet value = this.array[ index * this.itemSize + component ];\r\n\r\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, component, value ) {\r\n\r\n\t\tif ( this.normalized ) value = normalize( value, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + component ] = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetX( index ) {\r\n\r\n\t\tlet x = this.array[ index * this.itemSize ];\r\n\r\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\r\n\r\n\t\treturn x;\r\n\r\n\t}\r\n\r\n\tsetX( index, x ) {\r\n\r\n\t\tif ( this.normalized ) x = normalize( x, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetY( index ) {\r\n\r\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\r\n\r\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\r\n\r\n\t\treturn y;\r\n\r\n\t}\r\n\r\n\tsetY( index, y ) {\r\n\r\n\t\tif ( this.normalized ) y = normalize( y, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetZ( index ) {\r\n\r\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\r\n\r\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\r\n\r\n\t\treturn z;\r\n\r\n\t}\r\n\r\n\tsetZ( index, z ) {\r\n\r\n\t\tif ( this.normalized ) z = normalize( z, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetW( index ) {\r\n\r\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\r\n\r\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\r\n\r\n\t\treturn w;\r\n\r\n\t}\r\n\r\n\tsetW( index, w ) {\r\n\r\n\t\tif ( this.normalized ) w = normalize( w, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXY( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZW( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\t\t\tw = normalize( w, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tonUpload( callback ) {\r\n\r\n\t\tthis.onUploadCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = {\r\n\t\t\titemSize: this.itemSize,\r\n\t\t\ttype: this.array.constructor.name,\r\n\t\t\tarray: Array.from( this.array ),\r\n\t\t\tnormalized: this.normalized\r\n\t\t};\r\n\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\n//\r\n\r\nclass Int8BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Uint8BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Int16BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Uint16BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Int32BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Uint32BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Float16BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\r\n\r\n\t\tthis.isFloat16BufferAttribute = true;\r\n\r\n\t}\r\n\r\n\tgetX( index ) {\r\n\r\n\t\tlet x = fromHalfFloat( this.array[ index * this.itemSize ] );\r\n\r\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\r\n\r\n\t\treturn x;\r\n\r\n\t}\r\n\r\n\tsetX( index, x ) {\r\n\r\n\t\tif ( this.normalized ) x = normalize( x, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize ] = toHalfFloat( x );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetY( index ) {\r\n\r\n\t\tlet y = fromHalfFloat( this.array[ index * this.itemSize + 1 ] );\r\n\r\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\r\n\r\n\t\treturn y;\r\n\r\n\t}\r\n\r\n\tsetY( index, y ) {\r\n\r\n\t\tif ( this.normalized ) y = normalize( y, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = toHalfFloat( y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetZ( index ) {\r\n\r\n\t\tlet z = fromHalfFloat( this.array[ index * this.itemSize + 2 ] );\r\n\r\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\r\n\r\n\t\treturn z;\r\n\r\n\t}\r\n\r\n\tsetZ( index, z ) {\r\n\r\n\t\tif ( this.normalized ) z = normalize( z, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = toHalfFloat( z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetW( index ) {\r\n\r\n\t\tlet w = fromHalfFloat( this.array[ index * this.itemSize + 3 ] );\r\n\r\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\r\n\r\n\t\treturn w;\r\n\r\n\t}\r\n\r\n\tsetW( index, w ) {\r\n\r\n\t\tif ( this.normalized ) w = normalize( w, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = toHalfFloat( w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXY( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\r\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\r\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\r\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZW( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\t\t\tw = normalize( w, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\r\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\r\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\r\n\t\tthis.array[ index + 3 ] = toHalfFloat( w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nclass Float32BufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\n//\r\n\r\nexport {\r\n\tFloat32BufferAttribute,\r\n\tFloat16BufferAttribute,\r\n\tUint32BufferAttribute,\r\n\tInt32BufferAttribute,\r\n\tUint16BufferAttribute,\r\n\tInt16BufferAttribute,\r\n\tUint8ClampedBufferAttribute,\r\n\tUint8BufferAttribute,\r\n\tInt8BufferAttribute,\r\n\tBufferAttribute\r\n};\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { BufferAttribute } from './BufferAttribute.js';\r\nimport { denormalize, normalize } from '../math/MathUtils.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nclass InterleavedBufferAttribute {\r\n\r\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\r\n\r\n\t\tthis.isInterleavedBufferAttribute = true;\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.data = interleavedBuffer;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.offset = offset;\r\n\r\n\t\tthis.normalized = normalized;\r\n\r\n\t}\r\n\r\n\tget count() {\r\n\r\n\t\treturn this.data.count;\r\n\r\n\t}\r\n\r\n\tget array() {\r\n\r\n\t\treturn this.data.array;\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tthis.data.needsUpdate = value;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyMatrix4( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyNormalMatrix( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttransformDirection( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.transformDirection( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index, component ) {\r\n\r\n\t\tlet value = this.array[ index * this.data.stride + this.offset + component ];\r\n\r\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, component, value ) {\r\n\r\n\t\tif ( this.normalized ) value = normalize( value, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + component ] = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( index, x ) {\r\n\r\n\t\tif ( this.normalized ) x = normalize( x, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( index, y ) {\r\n\r\n\t\tif ( this.normalized ) y = normalize( y, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetZ( index, z ) {\r\n\r\n\t\tif ( this.normalized ) z = normalize( z, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetW( index, w ) {\r\n\r\n\t\tif ( this.normalized ) w = normalize( w, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetX( index ) {\r\n\r\n\t\tlet x = this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\r\n\r\n\t\treturn x;\r\n\r\n\t}\r\n\r\n\tgetY( index ) {\r\n\r\n\t\tlet y = this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\r\n\r\n\t\treturn y;\r\n\r\n\t}\r\n\r\n\tgetZ( index ) {\r\n\r\n\t\tlet z = this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\r\n\r\n\t\treturn z;\r\n\r\n\t}\r\n\r\n\tgetW( index ) {\r\n\r\n\t\tlet w = this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\r\n\r\n\t\treturn w;\r\n\r\n\t}\r\n\r\n\tsetXY( index, x, y ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZ( index, x, y, z ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZW( index, x, y, z, w ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\t\t\tw = normalize( w, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone( data ) {\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );\r\n\r\n\t\t\tconst array = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * this.data.stride + this.offset;\r\n\r\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( data.interleavedBuffers === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers = {};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( data ) {\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );\r\n\r\n\t\t\tconst array = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * this.data.stride + this.offset;\r\n\r\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// de-interleave data and save it as an ordinary buffer attribute for now\r\n\r\n\t\t\treturn {\r\n\t\t\t\titemSize: this.itemSize,\r\n\t\t\t\ttype: this.array.constructor.name,\r\n\t\t\t\tarray: array,\r\n\t\t\t\tnormalized: this.normalized\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// save as true interleaved attribute\r\n\r\n\t\t\tif ( data.interleavedBuffers === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers = {};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tisInterleavedBufferAttribute: true,\r\n\t\t\t\titemSize: this.itemSize,\r\n\t\t\t\tdata: this.data.uuid,\r\n\t\t\t\toffset: this.offset,\r\n\t\t\t\tnormalized: this.normalized\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { InterleavedBufferAttribute };\r\n", "import * as MathUtils from '../math/MathUtils.js';\r\nimport { StaticDrawUsage } from '../constants.js';\r\nimport { warnOnce } from '../utils.js';\r\n\r\nclass InterleavedBuffer {\r\n\r\n\tconstructor( array, stride ) {\r\n\r\n\t\tthis.isInterleavedBuffer = true;\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.stride = stride;\r\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis._updateRange = { offset: 0, count: - 1 };\r\n\t\tthis.updateRanges = [];\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t}\r\n\r\n\tonUploadCallback() {}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\tget updateRange() {\r\n\r\n\t\twarnOnce( 'THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.' ); // @deprecated, r159\r\n\t\treturn this._updateRange;\r\n\r\n\t}\r\n\r\n\tsetUsage( value ) {\r\n\r\n\t\tthis.usage = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddUpdateRange( start, count ) {\r\n\r\n\t\tthis.updateRanges.push( { start, count } );\r\n\r\n\t}\r\n\r\n\tclearUpdateRanges() {\r\n\r\n\t\tthis.updateRanges.length = 0;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.count = source.count;\r\n\t\tthis.stride = source.stride;\r\n\t\tthis.usage = source.usage;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyAt( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.stride;\r\n\t\tindex2 *= attribute.stride;\r\n\r\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tset( value, offset = 0 ) {\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone( data ) {\r\n\r\n\t\tif ( data.arrayBuffers === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers = {};\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.array.buffer._uuid === undefined ) {\r\n\r\n\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\r\n\r\n\t\t}\r\n\r\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\r\n\r\n\t\t}\r\n\r\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\r\n\r\n\t\tconst ib = new this.constructor( array, this.stride );\r\n\t\tib.setUsage( this.usage );\r\n\r\n\t\treturn ib;\r\n\r\n\t}\r\n\r\n\tonUpload( callback ) {\r\n\r\n\t\tthis.onUploadCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( data ) {\r\n\r\n\t\tif ( data.arrayBuffers === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers = {};\r\n\r\n\t\t}\r\n\r\n\t\t// generate UUID for array buffer if necessary\r\n\r\n\t\tif ( this.array.buffer._uuid === undefined ) {\r\n\r\n\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\r\n\r\n\t\t}\r\n\r\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\treturn {\r\n\t\t\tuuid: this.uuid,\r\n\t\t\tbuffer: this.array.buffer._uuid,\r\n\t\t\ttype: this.array.constructor.name,\r\n\t\t\tstride: this.stride\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InterleavedBuffer };\r\n", "import InputNode from '../core/InputNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { nodeObject, addNodeElement } from '../shadernode/ShaderNode.js';\r\n\r\nimport { InterleavedBufferAttribute } from '../../core/InterleavedBufferAttribute.js';\r\nimport { InterleavedBuffer } from '../../core/InterleavedBuffer.js';\r\nimport { StaticDrawUsage, DynamicDrawUsage } from '../../constants.js';\r\n\r\nclass BufferAttributeNode extends InputNode {\r\n\r\n\tconstructor( value, bufferType = null, bufferStride = 0, bufferOffset = 0 ) {\r\n\r\n\t\tsuper( value, bufferType );\r\n\r\n\t\tthis.isBufferNode = true;\r\n\r\n\t\tthis.bufferType = bufferType;\r\n\t\tthis.bufferStride = bufferStride;\r\n\t\tthis.bufferOffset = bufferOffset;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.instanced = false;\r\n\r\n\t\tthis.attribute = null;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t\tif ( value && value.isBufferAttribute === true ) {\r\n\r\n\t\t\tthis.attribute = value;\r\n\t\t\tthis.usage = value.usage;\r\n\t\t\tthis.instanced = value.isInstancedBufferAttribute;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\tif ( this.bufferStride === 0 && this.bufferOffset === 0 ) {\r\n\r\n\t\t\tlet bufferData = builder.globalCache.getData( this.value );\r\n\r\n\t\t\tif ( bufferData === undefined ) {\r\n\r\n\t\t\t\tbufferData = {\r\n\t\t\t\t\tnode: this\r\n\t\t\t\t};\r\n\r\n\t\t\t\tbuilder.globalCache.setData( this.value, bufferData );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn bufferData.node.uuid;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.bufferType === null ) {\r\n\r\n\t\t\tthis.bufferType = builder.getTypeFromAttribute( this.attribute );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.bufferType;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( this.attribute !== null ) return;\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst array = this.value;\r\n\t\tconst itemSize = builder.getTypeLength( type );\r\n\t\tconst stride = this.bufferStride || itemSize;\r\n\t\tconst offset = this.bufferOffset;\r\n\r\n\t\tconst buffer = array.isInterleavedBuffer === true ? array : new InterleavedBuffer( array, stride );\r\n\t\tconst bufferAttribute = new InterleavedBufferAttribute( buffer, itemSize, offset );\r\n\r\n\t\tbuffer.setUsage( this.usage );\r\n\r\n\t\tthis.attribute = bufferAttribute;\r\n\t\tthis.attribute.isInstancedBufferAttribute = this.instanced; // @TODO: Add a possible: InstancedInterleavedBufferAttribute\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tconst nodeAttribute = builder.getBufferAttributeFromNode( this, nodeType );\r\n\t\tconst propertyName = builder.getPropertyName( nodeAttribute );\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {\r\n\r\n\t\t\tthis.name = propertyName;\r\n\r\n\t\t\toutput = propertyName;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeVarying = varying( this );\r\n\r\n\t\t\toutput = nodeVarying.build( builder, nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'bufferAttribute';\r\n\r\n\t}\r\n\r\n\tsetUsage( value ) {\r\n\r\n\t\tthis.usage = value;\r\n\r\n\t\tif ( this.attribute && this.attribute.isBufferAttribute === true ) {\r\n\r\n\t\t\tthis.attribute.usage = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetInstanced( value ) {\r\n\r\n\t\tthis.instanced = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BufferAttributeNode;\r\n\r\nexport const bufferAttribute = ( array, type, stride, offset ) => nodeObject( new BufferAttributeNode( array, type, stride, offset ) );\r\nexport const dynamicBufferAttribute = ( array, type, stride, offset ) => bufferAttribute( array, type, stride, offset ).setUsage( DynamicDrawUsage );\r\n\r\nexport const instancedBufferAttribute = ( array, type, stride, offset ) => bufferAttribute( array, type, stride, offset ).setInstanced( true );\r\nexport const instancedDynamicBufferAttribute = ( array, type, stride, offset ) => dynamicBufferAttribute( array, type, stride, offset ).setInstanced( true );\r\n\r\naddNodeElement( 'toAttribute', ( bufferNode ) => bufferAttribute( bufferNode.value ) );\r\n\r\naddNodeClass( 'BufferAttributeNode', BufferAttributeNode );\r\n", "import { InterleavedBuffer } from './InterleavedBuffer.js';\r\n\r\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\r\n\r\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\r\n\r\n\t\tsuper( array, stride );\r\n\r\n\t\tthis.isInstancedInterleavedBuffer = true;\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone( data ) {\r\n\r\n\t\tconst ib = super.clone( data );\r\n\r\n\t\tib.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\treturn ib;\r\n\r\n\t}\r\n\r\n\ttoJSON( data ) {\r\n\r\n\t\tconst json = super.toJSON( data );\r\n\r\n\t\tjson.isInstancedInterleavedBuffer = true;\r\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\treturn json;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InstancedInterleavedBuffer };\r\n", "import { BufferAttribute } from './BufferAttribute.js';\r\n\r\nclass InstancedBufferAttribute extends BufferAttribute {\r\n\r\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\r\n\r\n\t\tsuper( array, itemSize, normalized );\r\n\r\n\t\tthis.isInstancedBufferAttribute = true;\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\tdata.isInstancedBufferAttribute = true;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InstancedBufferAttribute };\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { varyingProperty } from '../core/PropertyNode.js';\r\nimport { instancedBufferAttribute, instancedDynamicBufferAttribute } from './BufferAttributeNode.js';\r\nimport { normalLocal } from './NormalNode.js';\r\nimport { positionLocal } from './PositionNode.js';\r\nimport { nodeProxy, vec3, mat3, mat4 } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { buffer } from '../accessors/BufferNode.js';\r\nimport { instanceIndex } from '../core/IndexNode.js';\r\n\r\nimport { InstancedInterleavedBuffer } from '../../core/InstancedInterleavedBuffer.js';\r\nimport { InstancedBufferAttribute } from '../../core/InstancedBufferAttribute.js';\r\nimport { DynamicDrawUsage } from '../../constants.js';\r\n\r\nclass InstanceNode extends Node {\r\n\r\n\tconstructor( instanceMesh ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.instanceMesh = instanceMesh;\r\n\r\n\t\tthis.instanceMatrixNode = null;\r\n\r\n\t\tthis.instanceColorNode = null;\r\n\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t\tthis.buffer = null;\r\n\t\tthis.bufferColor = null;\r\n\r\n\t}\r\n\r\n\tsetup( /*builder*/ ) {\r\n\r\n\t\tlet instanceMatrixNode = this.instanceMatrixNode;\r\n\t\tlet instanceColorNode = this.instanceColorNode;\r\n\r\n\t\tconst instanceMesh = this.instanceMesh;\r\n\r\n\t\tif ( instanceMatrixNode === null ) {\r\n\r\n\t\t\tconst instanceAttribute = instanceMesh.instanceMatrix;\r\n\r\n\t\t\t// Both WebGPU and WebGL backends have UBO max limited to 64kb. Matrix count number bigger than 1000 ( 16 * 4 * 1000 = 64kb ) will fallback to attribute.\r\n\r\n\t\t\tif ( instanceMesh.count <= 1000 ) {\r\n\r\n\t\t\t\tinstanceMatrixNode = buffer( instanceAttribute.array, 'mat4', instanceMesh.count ).element( instanceIndex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst buffer = new InstancedInterleavedBuffer( instanceAttribute.array, 16, 1 );\r\n\r\n\t\t\t\tthis.buffer = buffer;\r\n\r\n\t\t\t\tconst bufferFn = instanceAttribute.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;\r\n\r\n\t\t\t\tconst instanceBuffers = [\r\n\t\t\t\t\t// F.Signature -> bufferAttribute( array, type, stride, offset )\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 0 ),\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 4 ),\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 8 ),\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 12 )\r\n\t\t\t\t];\r\n\r\n\t\t\t\tinstanceMatrixNode = mat4( ...instanceBuffers );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.instanceMatrixNode = instanceMatrixNode;\r\n\r\n\t\t}\r\n\r\n\t\tconst instanceColorAttribute = instanceMesh.instanceColor;\r\n\r\n\t\tif ( instanceColorAttribute && instanceColorNode === null ) {\r\n\r\n\t\t\tconst buffer = new InstancedBufferAttribute( instanceColorAttribute.array, 3 );\r\n\r\n\t\t\tconst bufferFn = instanceColorAttribute.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;\r\n\r\n\t\t\tthis.bufferColor = buffer;\r\n\r\n\t\t\tinstanceColorNode = vec3( bufferFn( buffer, 'vec3', 3, 0 ) );\r\n\r\n\t\t\tthis.instanceColorNode = instanceColorNode;\r\n\r\n\t\t}\r\n\r\n\t\t// POSITION\r\n\r\n\t\tconst instancePosition = instanceMatrixNode.mul( positionLocal ).xyz;\r\n\r\n\t\t// NORMAL\r\n\r\n\t\tconst m = mat3( instanceMatrixNode );\r\n\r\n\t\tconst transformedNormal = normalLocal.div( vec3( m[ 0 ].dot( m[ 0 ] ), m[ 1 ].dot( m[ 1 ] ), m[ 2 ].dot( m[ 2 ] ) ) );\r\n\r\n\t\tconst instanceNormal = m.mul( transformedNormal ).xyz;\r\n\r\n\t\t// ASSIGNS\r\n\r\n\t\tpositionLocal.assign( instancePosition );\r\n\t\tnormalLocal.assign( instanceNormal );\r\n\r\n\t\t// COLOR\r\n\r\n\t\tif ( this.instanceColorNode !== null ) {\r\n\r\n\t\t\tvaryingProperty( 'vec3', 'vInstanceColor' ).assign( this.instanceColorNode );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tif ( this.instanceMesh.instanceMatrix.usage !== DynamicDrawUsage && this.buffer != null && this.instanceMesh.instanceMatrix.version !== this.buffer.version ) {\r\n\r\n\t\t\tthis.buffer.version = this.instanceMesh.instanceMatrix.version;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.instanceMesh.instanceColor && this.instanceMesh.instanceColor.usage !== DynamicDrawUsage && this.bufferColor != null && this.instanceMesh.instanceColor.version !== this.bufferColor.version ) {\r\n\r\n\t\t\tthis.bufferColor.version = this.instanceMesh.instanceColor.version;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default InstanceNode;\r\n\r\nexport const instance = nodeProxy( InstanceNode );\r\n\r\naddNodeClass( 'InstanceNode', InstanceNode );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { cameraViewMatrix } from './CameraNode.js';\r\nimport { modelViewMatrix } from './ModelNode.js';\r\nimport { tslFn, vec4 } from '../shadernode/ShaderNode.js';\r\n\r\nexport const tangentGeometry = /*#__PURE__*/ tslFn( ( stack, builder ) => {\r\n\r\n\tif ( builder.geometry.hasAttribute( 'tangent' ) === false ) {\r\n\r\n\t\tbuilder.geometry.computeTangents();\r\n\r\n\t}\r\n\r\n\treturn attribute( 'tangent', 'vec4' );\r\n\r\n} )();\r\n\r\nexport const tangentLocal = /*#__PURE__*/ tangentGeometry.xyz.toVar( 'tangentLocal' );\r\nexport const tangentView = /*#__PURE__*/ varying( modelViewMatrix.mul( vec4( tangentLocal, 0 ) ).xyz, 'v_tangentView' ).normalize().toVar( 'tangentView' );\r\nexport const tangentWorld = /*#__PURE__*/ varying( tangentView.transformDirection( cameraViewMatrix ), 'v_tangentWorld' ).normalize().toVar( 'tangentWorld' );\r\nexport const transformedTangentView = /*#__PURE__*/ tangentView.toVar( 'transformedTangentView' );\r\nexport const transformedTangentWorld = /*#__PURE__*/ transformedTangentView.transformDirection( cameraViewMatrix ).normalize().toVar( 'transformedTangentWorld' );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { normalLocal } from './NormalNode.js';\r\nimport { positionLocal } from './PositionNode.js';\r\nimport { nodeProxy, vec3, mat3, mat4, int, ivec2, float, tslFn } from '../shadernode/ShaderNode.js';\r\nimport { textureLoad } from './TextureNode.js';\r\nimport { textureSize } from './TextureSizeNode.js';\r\nimport { tangentLocal } from './TangentNode.js';\r\nimport { instanceIndex, drawIndex } from '../core/IndexNode.js';\r\n\r\nclass BatchNode extends Node {\r\n\r\n\tconstructor( batchMesh ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.batchMesh = batchMesh;\r\n\r\n\r\n\t\tthis.instanceColorNode = null;\r\n\r\n\t\tthis.batchingIdNode = null;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// POSITION\r\n\r\n\t\tif ( this.batchingIdNode === null ) {\r\n\r\n\t\t\tif ( builder.getDrawIndex() === null ) {\r\n\r\n\t\t\t\tthis.batchingIdNode = instanceIndex;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.batchingIdNode = drawIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst getIndirectIndex = tslFn( ( [ id ] ) => {\r\n\r\n\t\t\tconst size = textureSize( textureLoad( this.batchMesh._indirectTexture ), 0 );\r\n\t\t\tconst x = int( id ).remainder( int( size ) );\r\n\t\t\tconst y = int( id ).div( int( size ) );\r\n\t\t\treturn textureLoad( this.batchMesh._indirectTexture, ivec2( x, y ) ).x;\r\n\r\n\t\t} ).setLayout( {\r\n\t\t\tname: 'getIndirectIndex',\r\n\t\t\ttype: 'uint',\r\n\t\t\tinputs: [\r\n\t\t\t\t{ name: 'id', type: 'int' }\r\n\t\t\t]\r\n\t\t} );\r\n\r\n\t\tconst matriceTexture = this.batchMesh._matricesTexture;\r\n\r\n\t\tconst size = textureSize( textureLoad( matriceTexture ), 0 );\r\n\t\tconst j = float( getIndirectIndex( int( this.batchingIdNode ) ) ).mul( 4 ).toVar();\r\n\r\n\t\tconst x = int( j.mod( size ) );\r\n\t\tconst y = int( j ).div( int( size ) );\r\n\t\tconst batchingMatrix = mat4(\r\n\t\t\ttextureLoad( matriceTexture, ivec2( x, y ) ),\r\n\t\t\ttextureLoad( matriceTexture, ivec2( x.add( 1 ), y ) ),\r\n\t\t\ttextureLoad( matriceTexture, ivec2( x.add( 2 ), y ) ),\r\n\t\t\ttextureLoad( matriceTexture, ivec2( x.add( 3 ), y ) )\r\n\t\t);\r\n\r\n\t\tconst bm = mat3( batchingMatrix );\r\n\r\n\t\tpositionLocal.assign( batchingMatrix.mul( positionLocal ) );\r\n\r\n\t\tconst transformedNormal = normalLocal.div( vec3( bm[ 0 ].dot( bm[ 0 ] ), bm[ 1 ].dot( bm[ 1 ] ), bm[ 2 ].dot( bm[ 2 ] ) ) );\r\n\r\n\t\tconst batchingNormal = bm.mul( transformedNormal ).xyz;\r\n\r\n\t\tnormalLocal.assign( batchingNormal );\r\n\r\n\t\tif ( builder.hasGeometryAttribute( 'tangent' ) ) {\r\n\r\n\t\t\ttangentLocal.mulAssign( bm );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BatchNode;\r\n\r\nexport const batch = nodeProxy( BatchNode );\r\n\r\naddNodeClass( 'batch', BatchNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\nimport { attribute } from '../core/AttributeNode.js';\r\nimport { reference, referenceBuffer } from './ReferenceNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { normalLocal } from './NormalNode.js';\r\nimport { positionLocal } from './PositionNode.js';\r\nimport { tangentLocal } from './TangentNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { buffer } from './BufferNode.js';\r\n\r\nclass SkinningNode extends Node {\r\n\r\n\tconstructor( skinnedMesh, useReference = false ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.skinnedMesh = skinnedMesh;\r\n\t\tthis.useReference = useReference;\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t\t//\r\n\r\n\t\tthis.skinIndexNode = attribute( 'skinIndex', 'uvec4' );\r\n\t\tthis.skinWeightNode = attribute( 'skinWeight', 'vec4' );\r\n\r\n\t\tlet bindMatrixNode, bindMatrixInverseNode, boneMatricesNode;\r\n\r\n\t\tif ( useReference ) {\r\n\r\n\t\t\tbindMatrixNode = reference( 'bindMatrix', 'mat4' );\r\n\t\t\tbindMatrixInverseNode = reference( 'bindMatrixInverse', 'mat4' );\r\n\t\t\tboneMatricesNode = referenceBuffer( 'skeleton.boneMatrices', 'mat4', skinnedMesh.skeleton.bones.length );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbindMatrixNode = uniform( skinnedMesh.bindMatrix, 'mat4' );\r\n\t\t\tbindMatrixInverseNode = uniform( skinnedMesh.bindMatrixInverse, 'mat4' );\r\n\t\t\tboneMatricesNode = buffer( skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length );\r\n\r\n\t\t}\r\n\r\n\t\tthis.bindMatrixNode = bindMatrixNode;\r\n\t\tthis.bindMatrixInverseNode = bindMatrixInverseNode;\r\n\t\tthis.boneMatricesNode = boneMatricesNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode, boneMatricesNode } = this;\r\n\r\n\t\tconst boneMatX = boneMatricesNode.element( skinIndexNode.x );\r\n\t\tconst boneMatY = boneMatricesNode.element( skinIndexNode.y );\r\n\t\tconst boneMatZ = boneMatricesNode.element( skinIndexNode.z );\r\n\t\tconst boneMatW = boneMatricesNode.element( skinIndexNode.w );\r\n\r\n\t\t// POSITION\r\n\r\n\t\tconst skinVertex = bindMatrixNode.mul( positionLocal );\r\n\r\n\t\tconst skinned = add(\r\n\t\t\tboneMatX.mul( skinWeightNode.x ).mul( skinVertex ),\r\n\t\t\tboneMatY.mul( skinWeightNode.y ).mul( skinVertex ),\r\n\t\t\tboneMatZ.mul( skinWeightNode.z ).mul( skinVertex ),\r\n\t\t\tboneMatW.mul( skinWeightNode.w ).mul( skinVertex )\r\n\t\t);\r\n\r\n\t\tconst skinPosition = bindMatrixInverseNode.mul( skinned ).xyz;\r\n\r\n\t\t// NORMAL\r\n\r\n\t\tlet skinMatrix = add(\r\n\t\t\tskinWeightNode.x.mul( boneMatX ),\r\n\t\t\tskinWeightNode.y.mul( boneMatY ),\r\n\t\t\tskinWeightNode.z.mul( boneMatZ ),\r\n\t\t\tskinWeightNode.w.mul( boneMatW )\r\n\t\t);\r\n\r\n\t\tskinMatrix = bindMatrixInverseNode.mul( skinMatrix ).mul( bindMatrixNode );\r\n\r\n\t\tconst skinNormal = skinMatrix.transformDirection( normalLocal ).xyz;\r\n\r\n\t\t// ASSIGNS\r\n\r\n\t\tpositionLocal.assign( skinPosition );\r\n\t\tnormalLocal.assign( skinNormal );\r\n\r\n\t\tif ( builder.hasGeometryAttribute( 'tangent' ) ) {\r\n\r\n\t\t\ttangentLocal.assign( skinNormal );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\treturn positionLocal.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tconst object = this.useReference ? frame.object : this.skinnedMesh;\r\n\r\n\t\tobject.skeleton.update();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SkinningNode;\r\n\r\nexport const skinning = ( skinnedMesh ) => nodeObject( new SkinningNode( skinnedMesh ) );\r\nexport const skinningReference = ( skinnedMesh ) => nodeObject( new SkinningNode( skinnedMesh, true ) );\r\n\r\naddNodeClass( 'SkinningNode', SkinningNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { expression } from '../code/ExpressionNode.js';\r\nimport { bypass } from '../core/BypassNode.js';\r\nimport { addNodeElement, nodeObject, nodeArray } from '../shadernode/ShaderNode.js';\r\n\r\nclass LoopNode extends Node {\r\n\r\n\tconstructor( params = [] ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.params = params;\r\n\r\n\t}\r\n\r\n\tgetVarName( index ) {\r\n\r\n\t\treturn String.fromCharCode( 'i'.charCodeAt() + index );\r\n\r\n\t}\r\n\r\n\tgetProperties( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( properties.stackNode !== undefined ) return properties;\r\n\r\n\t\t//\r\n\r\n\t\tconst inputs = {};\r\n\r\n\t\tfor ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {\r\n\r\n\t\t\tconst param = this.params[ i ];\r\n\r\n\t\t\tconst name = ( param.isNode !== true && param.name ) || this.getVarName( i );\r\n\t\t\tconst type = ( param.isNode !== true && param.type ) || 'int';\r\n\r\n\t\t\tinputs[ name ] = expression( name, type );\r\n\r\n\t\t}\r\n\r\n\t\tconst stack = builder.addStack(); // TODO: cache() it\r\n\r\n\t\tproperties.returnsNode = this.params[ this.params.length - 1 ]( inputs, stack, builder );\r\n\t\tproperties.stackNode = stack;\r\n\r\n\t\tbuilder.removeStack();\r\n\r\n\t\treturn properties;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst { returnsNode } = this.getProperties( builder );\r\n\r\n\t\treturn returnsNode ? returnsNode.getNodeType( builder ) : 'void';\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// setup properties\r\n\r\n\t\tthis.getProperties( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst properties = this.getProperties( builder );\r\n\r\n\t\tconst params = this.params;\r\n\t\tconst stackNode = properties.stackNode;\r\n\r\n\t\tfor ( let i = 0, l = params.length - 1; i < l; i ++ ) {\r\n\r\n\t\t\tconst param = params[ i ];\r\n\r\n\t\t\tlet start = null, end = null, name = null, type = null, condition = null, update = null;\r\n\r\n\t\t\tif ( param.isNode ) {\r\n\r\n\t\t\t\ttype = 'int';\r\n\t\t\t\tname = this.getVarName( i );\r\n\t\t\t\tstart = '0';\r\n\t\t\t\tend = param.build( builder, type );\r\n\t\t\t\tcondition = '<';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttype = param.type || 'int';\r\n\t\t\t\tname = param.name || this.getVarName( i );\r\n\t\t\t\tstart = param.start;\r\n\t\t\t\tend = param.end;\r\n\t\t\t\tcondition = param.condition;\r\n\t\t\t\tupdate = param.update;\r\n\r\n\t\t\t\tif ( typeof start === 'number' ) start = start.toString();\r\n\t\t\t\telse if ( start && start.isNode ) start = start.build( builder, type );\r\n\r\n\t\t\t\tif ( typeof end === 'number' ) end = end.toString();\r\n\t\t\t\telse if ( end && end.isNode ) end = end.build( builder, type );\r\n\r\n\t\t\t\tif ( start !== undefined && end === undefined ) {\r\n\r\n\t\t\t\t\tstart = start + ' - 1';\r\n\t\t\t\t\tend = '0';\r\n\t\t\t\t\tcondition = '>=';\r\n\r\n\t\t\t\t} else if ( end !== undefined && start === undefined ) {\r\n\r\n\t\t\t\t\tstart = '0';\r\n\t\t\t\t\tcondition = '<';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( condition === undefined ) {\r\n\r\n\t\t\t\t\tif ( Number( start ) > Number( end ) ) {\r\n\r\n\t\t\t\t\t\tcondition = '>=';\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcondition = '<';\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst internalParam = { start, end, condition };\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst startSnippet = internalParam.start;\r\n\t\t\tconst endSnippet = internalParam.end;\r\n\r\n\t\t\tlet declarationSnippet = '';\r\n\t\t\tlet conditionalSnippet = '';\r\n\t\t\tlet updateSnippet = '';\r\n\r\n\t\t\tif ( ! update ) {\r\n\r\n\t\t\t\tif ( type === 'int' || type === 'uint' ) {\r\n\r\n\t\t\t\t\tif ( condition.includes( '<' ) ) update = '++';\r\n\t\t\t\t\telse update = '--';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( condition.includes( '<' ) ) update = '+= 1.';\r\n\t\t\t\t\telse update = '-= 1.';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdeclarationSnippet += builder.getVar( type, name ) + ' = ' + startSnippet;\r\n\r\n\t\t\tconditionalSnippet += name + ' ' + condition + ' ' + endSnippet;\r\n\t\t\tupdateSnippet += name + ' ' + update;\r\n\r\n\t\t\tconst forSnippet = `for ( ${ declarationSnippet }; ${ conditionalSnippet }; ${ updateSnippet } )`;\r\n\r\n\t\t\tbuilder.addFlowCode( ( i === 0 ? '\\n' : '' ) + builder.tab + forSnippet + ' {\\n\\n' ).addFlowTab();\r\n\r\n\t\t}\r\n\r\n\t\tconst stackSnippet = stackNode.build( builder, 'void' );\r\n\r\n\t\tconst returnsSnippet = properties.returnsNode ? properties.returnsNode.build( builder ) : '';\r\n\r\n\t\tbuilder.removeFlowTab().addFlowCode( '\\n' + builder.tab + stackSnippet );\r\n\r\n\t\tfor ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {\r\n\r\n\t\t\tbuilder.addFlowCode( ( i === 0 ? '' : builder.tab ) + '}\\n\\n' ).removeFlowTab();\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.addFlowTab();\r\n\r\n\t\treturn returnsSnippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LoopNode;\r\n\r\nexport const loop = ( ...params ) => nodeObject( new LoopNode( nodeArray( params, 'int' ) ) ).append();\r\nexport const Continue = () => expression( 'continue' ).append();\r\nexport const Break = () => expression( 'break' ).append();\r\n\r\naddNodeElement( 'loop', ( returns, ...params ) => bypass( returns, loop( ...params ) ) );\r\n\r\naddNodeClass( 'LoopNode', LoopNode );\r\n", "import { createElementNS } from '../utils.js';\r\nimport { SRGBToLinear } from '../math/ColorManagement.js';\r\n\r\nlet _canvas;\r\n\r\nclass ImageUtils {\r\n\r\n\tstatic getDataURL( image ) {\r\n\r\n\t\tif ( /^data:/i.test( image.src ) ) {\r\n\r\n\t\t\treturn image.src;\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof HTMLCanvasElement === 'undefined' ) {\r\n\r\n\t\t\treturn image.src;\r\n\r\n\t\t}\r\n\r\n\t\tlet canvas;\r\n\r\n\t\tif ( image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\tcanvas = image;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\r\n\r\n\t\t\t_canvas.width = image.width;\r\n\t\t\t_canvas.height = image.height;\r\n\r\n\t\t\tconst context = _canvas.getContext( '2d' );\r\n\r\n\t\t\tif ( image instanceof ImageData ) {\r\n\r\n\t\t\t\tcontext.putImageData( image, 0, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcanvas = _canvas;\r\n\r\n\t\t}\r\n\r\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\r\n\r\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic sRGBToLinear( image ) {\r\n\r\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t\tconst canvas = createElementNS( 'canvas' );\r\n\r\n\t\t\tcanvas.width = image.width;\r\n\t\t\tcanvas.height = image.height;\r\n\r\n\t\t\tconst context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\r\n\t\t\tconst data = imageData.data;\r\n\r\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcontext.putImageData( imageData, 0, 0 );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t} else if ( image.data ) {\r\n\r\n\t\t\tconst data = image.data.slice( 0 );\r\n\r\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\r\n\r\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// assuming float\r\n\r\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: data,\r\n\t\t\t\twidth: image.width,\r\n\t\t\t\theight: image.height\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ImageUtils };\r\n", "import { ImageUtils } from '../extras/ImageUtils.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nlet _sourceId = 0;\r\n\r\nclass Source {\r\n\r\n\tconstructor( data = null ) {\r\n\r\n\t\tthis.isSource = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _sourceId ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.data = data;\r\n\t\tthis.dataReady = true;\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.images[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tconst output = {\r\n\t\t\tuuid: this.uuid,\r\n\t\t\turl: ''\r\n\t\t};\r\n\r\n\t\tconst data = this.data;\r\n\r\n\t\tif ( data !== null ) {\r\n\r\n\t\t\tlet url;\r\n\r\n\t\t\tif ( Array.isArray( data ) ) {\r\n\r\n\t\t\t\t// cube texture\r\n\r\n\t\t\t\turl = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\r\n\r\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// texture\r\n\r\n\t\t\t\turl = serializeImage( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.url = url;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\tmeta.images[ this.uuid ] = output;\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction serializeImage( image ) {\r\n\r\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t// default images\r\n\r\n\t\treturn ImageUtils.getDataURL( image );\r\n\r\n\t} else {\r\n\r\n\t\tif ( image.data ) {\r\n\r\n\t\t\t// images of DataTexture\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: Array.from( image.data ),\r\n\t\t\t\twidth: image.width,\r\n\t\t\t\theight: image.height,\r\n\t\t\t\ttype: image.data.constructor.name\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\r\n\t\t\treturn {};\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Source };\r\n", "import { EventDispatcher } from '../core/EventDispatcher.js';\r\nimport {\r\n\tMirroredRepeatWrapping,\r\n\tClampToEdgeWrapping,\r\n\tRepeatWrapping,\r\n\tUnsignedByteType,\r\n\tRGBAFormat,\r\n\tLinearMipmapLinearFilter,\r\n\tLinearFilter,\r\n\tUVMapping,\r\n\tNoColorSpace,\r\n} from '../constants.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport { Source } from './Source.js';\r\n\r\nlet _textureId = 0;\r\n\r\nclass Texture extends EventDispatcher {\r\n\r\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isTexture = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _textureId ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.source = new Source( image );\r\n\t\tthis.mipmaps = [];\r\n\r\n\t\tthis.mapping = mapping;\r\n\t\tthis.channel = 0;\r\n\r\n\t\tthis.wrapS = wrapS;\r\n\t\tthis.wrapT = wrapT;\r\n\r\n\t\tthis.magFilter = magFilter;\r\n\t\tthis.minFilter = minFilter;\r\n\r\n\t\tthis.anisotropy = anisotropy;\r\n\r\n\t\tthis.format = format;\r\n\t\tthis.internalFormat = null;\r\n\t\tthis.type = type;\r\n\r\n\t\tthis.offset = new Vector2( 0, 0 );\r\n\t\tthis.repeat = new Vector2( 1, 1 );\r\n\t\tthis.center = new Vector2( 0, 0 );\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.matrixAutoUpdate = true;\r\n\t\tthis.matrix = new Matrix3();\r\n\r\n\t\tthis.generateMipmaps = true;\r\n\t\tthis.premultiplyAlpha = false;\r\n\t\tthis.flipY = true;\r\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\t\tthis.colorSpace = colorSpace;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t\tthis.version = 0;\r\n\t\tthis.onUpdate = null;\r\n\r\n\t\tthis.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not\r\n\t\tthis.pmremVersion = 0; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)\r\n\r\n\t}\r\n\r\n\tget image() {\r\n\r\n\t\treturn this.source.data;\r\n\r\n\t}\r\n\r\n\tset image( value = null ) {\r\n\r\n\t\tthis.source.data = value;\r\n\r\n\t}\r\n\r\n\tupdateMatrix() {\r\n\r\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.source = source.source;\r\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\tthis.mapping = source.mapping;\r\n\t\tthis.channel = source.channel;\r\n\r\n\t\tthis.wrapS = source.wrapS;\r\n\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\tthis.magFilter = source.magFilter;\r\n\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\tthis.format = source.format;\r\n\t\tthis.internalFormat = source.internalFormat;\r\n\t\tthis.type = source.type;\r\n\r\n\t\tthis.offset.copy( source.offset );\r\n\t\tthis.repeat.copy( source.repeat );\r\n\t\tthis.center.copy( source.center );\r\n\t\tthis.rotation = source.rotation;\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\tthis.matrix.copy( source.matrix );\r\n\r\n\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\tthis.flipY = source.flipY;\r\n\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\tthis.colorSpace = source.colorSpace;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tconst output = {\r\n\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'Texture',\r\n\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t},\r\n\r\n\t\t\tuuid: this.uuid,\r\n\t\t\tname: this.name,\r\n\r\n\t\t\timage: this.source.toJSON( meta ).uuid,\r\n\r\n\t\t\tmapping: this.mapping,\r\n\t\t\tchannel: this.channel,\r\n\r\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\tcenter: [ this.center.x, this.center.y ],\r\n\t\t\trotation: this.rotation,\r\n\r\n\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\tformat: this.format,\r\n\t\t\tinternalFormat: this.internalFormat,\r\n\t\t\ttype: this.type,\r\n\t\t\tcolorSpace: this.colorSpace,\r\n\r\n\t\t\tminFilter: this.minFilter,\r\n\t\t\tmagFilter: this.magFilter,\r\n\t\t\tanisotropy: this.anisotropy,\r\n\r\n\t\t\tflipY: this.flipY,\r\n\r\n\t\t\tgenerateMipmaps: this.generateMipmaps,\r\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\r\n\t\t\tunpackAlignment: this.unpackAlignment\r\n\r\n\t\t};\r\n\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;\r\n\r\n\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\ttransformUv( uv ) {\r\n\r\n\t\tif ( this.mapping !== UVMapping ) return uv;\r\n\r\n\t\tuv.applyMatrix3( this.matrix );\r\n\r\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.flipY ) {\r\n\r\n\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn uv;\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) {\r\n\r\n\t\t\tthis.version ++;\r\n\t\t\tthis.source.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tset needsPMREMUpdate( value ) {\r\n\r\n\t\tif ( value === true ) {\r\n\r\n\t\t\tthis.pmremVersion ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nTexture.DEFAULT_IMAGE = null;\r\nTexture.DEFAULT_MAPPING = UVMapping;\r\nTexture.DEFAULT_ANISOTROPY = 1;\r\n\r\nexport { Texture };\r\n", "import { Texture } from './Texture.js';\r\nimport { ClampToEdgeWrapping, NearestFilter } from '../constants.js';\r\n\r\nclass DataArrayTexture extends Texture {\r\n\r\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\r\n\r\n\t\tsuper( null );\r\n\r\n\t\tthis.isDataArrayTexture = true;\r\n\r\n\t\tthis.image = { data, width, height, depth };\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\t\tthis.unpackAlignment = 1;\r\n\r\n\t\tthis.layerUpdates = new Set();\r\n\r\n\t}\r\n\r\n\taddLayerUpdate( layerIndex ) {\r\n\r\n\t\tthis.layerUpdates.add( layerIndex );\r\n\r\n\t}\r\n\r\n\tclearLayerUpdates() {\r\n\r\n\t\tthis.layerUpdates.clear();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DataArrayTexture };\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { float, nodeProxy, tslFn } from '../shadernode/ShaderNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { reference } from './ReferenceNode.js';\r\nimport { positionLocal } from './PositionNode.js';\r\nimport { normalLocal } from './NormalNode.js';\r\nimport { textureLoad } from './TextureNode.js';\r\nimport { instanceIndex, vertexIndex } from '../core/IndexNode.js';\r\nimport { ivec2, int } from '../shadernode/ShaderNode.js';\r\nimport { loop } from '../utils/LoopNode.js';\r\n\r\nimport { DataArrayTexture } from '../../textures/DataArrayTexture.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { FloatType } from '../../constants.js';\r\n\r\nconst _morphTextures = new WeakMap();\r\nconst _morphVec4 = /*@__PURE__*/ new Vector4();\r\n\r\nconst getMorph = tslFn( ( { bufferMap, influence, stride, width, depth, offset } ) => {\r\n\r\n\tconst texelIndex = int( vertexIndex ).mul( stride ).add( offset );\r\n\r\n\tconst y = texelIndex.div( width );\r\n\tconst x = texelIndex.sub( y.mul( width ) );\r\n\r\n\tconst bufferAttrib = textureLoad( bufferMap, ivec2( x, y ) ).depth( depth );\r\n\r\n\treturn bufferAttrib.mul( influence );\r\n\r\n} );\r\n\r\nfunction getEntry( geometry ) {\r\n\r\n\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\r\n\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\r\n\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\r\n\r\n\t// instead of using attributes, the WebGL 2 code path encodes morph targets\r\n\t// into an array of data textures. Each layer represents a single morph target.\r\n\r\n\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\r\n\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\r\n\r\n\tlet entry = _morphTextures.get( geometry );\r\n\r\n\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\r\n\r\n\t\tif ( entry !== undefined ) entry.texture.dispose();\r\n\r\n\t\tconst morphTargets = geometry.morphAttributes.position || [];\r\n\t\tconst morphNormals = geometry.morphAttributes.normal || [];\r\n\t\tconst morphColors = geometry.morphAttributes.color || [];\r\n\r\n\t\tlet vertexDataCount = 0;\r\n\r\n\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\r\n\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\r\n\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\r\n\r\n\t\tlet width = geometry.attributes.position.count * vertexDataCount;\r\n\t\tlet height = 1;\r\n\r\n\t\tconst maxTextureSize = 4096; // @TODO: Use 'capabilities.maxTextureSize'\r\n\r\n\t\tif ( width > maxTextureSize ) {\r\n\r\n\t\t\theight = Math.ceil( width / maxTextureSize );\r\n\t\t\twidth = maxTextureSize;\r\n\r\n\t\t}\r\n\r\n\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\r\n\r\n\t\tconst bufferTexture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\r\n\t\tbufferTexture.type = FloatType;\r\n\t\tbufferTexture.needsUpdate = true;\r\n\r\n\t\t// fill buffer\r\n\r\n\t\tconst vertexDataStride = vertexDataCount * 4;\r\n\r\n\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\r\n\r\n\t\t\tconst morphTarget = morphTargets[ i ];\r\n\t\t\tconst morphNormal = morphNormals[ i ];\r\n\t\t\tconst morphColor = morphColors[ i ];\r\n\r\n\t\t\tconst offset = width * height * 4 * i;\r\n\r\n\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\r\n\r\n\t\t\t\tconst stride = j * vertexDataStride;\r\n\r\n\t\t\t\tif ( hasMorphPosition === true ) {\r\n\r\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphTarget, j );\r\n\r\n\t\t\t\t\tbuffer[ offset + stride + 0 ] = _morphVec4.x;\r\n\t\t\t\t\tbuffer[ offset + stride + 1 ] = _morphVec4.y;\r\n\t\t\t\t\tbuffer[ offset + stride + 2 ] = _morphVec4.z;\r\n\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasMorphNormals === true ) {\r\n\r\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphNormal, j );\r\n\r\n\t\t\t\t\tbuffer[ offset + stride + 4 ] = _morphVec4.x;\r\n\t\t\t\t\tbuffer[ offset + stride + 5 ] = _morphVec4.y;\r\n\t\t\t\t\tbuffer[ offset + stride + 6 ] = _morphVec4.z;\r\n\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasMorphColors === true ) {\r\n\r\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphColor, j );\r\n\r\n\t\t\t\t\tbuffer[ offset + stride + 8 ] = _morphVec4.x;\r\n\t\t\t\t\tbuffer[ offset + stride + 9 ] = _morphVec4.y;\r\n\t\t\t\t\tbuffer[ offset + stride + 10 ] = _morphVec4.z;\r\n\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? _morphVec4.w : 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tentry = {\r\n\t\t\tcount: morphTargetsCount,\r\n\t\t\ttexture: bufferTexture,\r\n\t\t\tstride: vertexDataCount,\r\n\t\t\tsize: new Vector2( width, height )\r\n\t\t};\r\n\r\n\t\t_morphTextures.set( geometry, entry );\r\n\r\n\t\tfunction disposeTexture() {\r\n\r\n\t\t\tbufferTexture.dispose();\r\n\r\n\t\t\t_morphTextures.delete( geometry );\r\n\r\n\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.addEventListener( 'dispose', disposeTexture );\r\n\r\n\t}\r\n\r\n\treturn entry;\r\n\r\n}\r\n\r\n\r\nclass MorphNode extends Node {\r\n\r\n\tconstructor( mesh ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.mesh = mesh;\r\n\t\tthis.morphBaseInfluence = uniform( 1 );\r\n\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { geometry } = builder;\r\n\r\n\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\r\n\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\r\n\r\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\r\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\r\n\r\n\t\t// nodes\r\n\r\n\t\tconst { texture: bufferMap, stride, size } = getEntry( geometry );\r\n\r\n\t\tif ( hasMorphPosition === true ) positionLocal.mulAssign( this.morphBaseInfluence );\r\n\t\tif ( hasMorphNormals === true ) normalLocal.mulAssign( this.morphBaseInfluence );\r\n\r\n\t\tconst width = int( size.width );\r\n\r\n\t\tloop( morphTargetsCount, ( { i } ) => {\r\n\r\n\t\t\tconst influence = float( 0 ).toVar();\r\n\r\n\t\t\tif ( this.mesh.count > 1 && ( this.mesh.morphTexture !== null && this.mesh.morphTexture !== undefined ) ) {\r\n\r\n\t\t\t\tinfluence.assign( textureLoad( this.mesh.morphTexture, ivec2( int( i ).add( 1 ), int( instanceIndex ) ) ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tinfluence.assign( reference( 'morphTargetInfluences', 'float' ).element( i ).toVar() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasMorphPosition === true ) {\r\n\r\n\t\t\t\tpositionLocal.addAssign( getMorph( {\r\n\t\t\t\t\tbufferMap,\r\n\t\t\t\t\tinfluence,\r\n\t\t\t\t\tstride,\r\n\t\t\t\t\twidth,\r\n\t\t\t\t\tdepth: i,\r\n\t\t\t\t\toffset: int( 0 )\r\n\t\t\t\t} ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasMorphNormals === true ) {\r\n\r\n\t\t\t\tnormalLocal.addAssign( getMorph( {\r\n\t\t\t\t\tbufferMap,\r\n\t\t\t\t\tinfluence,\r\n\t\t\t\t\tstride,\r\n\t\t\t\t\twidth,\r\n\t\t\t\t\tdepth: i,\r\n\t\t\t\t\toffset: int( 1 )\r\n\t\t\t\t} ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst morphBaseInfluence = this.morphBaseInfluence;\r\n\r\n\t\tif ( this.mesh.geometry.morphTargetsRelative ) {\r\n\r\n\t\t\tmorphBaseInfluence.value = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmorphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce( ( a, b ) => a + b, 0 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MorphNode;\r\n\r\nexport const morphReference = nodeProxy( MorphNode );\r\n\r\naddNodeClass( 'MorphNode', MorphNode );\r\n", "import { cameraViewMatrix } from './CameraNode.js';\r\nimport { transformedNormalView } from './NormalNode.js';\r\nimport { positionViewDirection } from './PositionNode.js';\r\nimport { materialRefractionRatio } from './MaterialNode.js';\r\n\r\nexport const reflectView = /*#__PURE__*/ positionViewDirection.negate().reflect( transformedNormalView );\r\nexport const refractView = /*#__PURE__*/ positionViewDirection.negate().refract( transformedNormalView, materialRefractionRatio );\r\n\r\nexport const reflectVector = /*#__PURE__*/ reflectView.transformDirection( cameraViewMatrix ).toVar( 'reflectVector' );\r\nexport const refractVector = /*#__PURE__*/ refractView.transformDirection( cameraViewMatrix ).toVar( 'reflectVector' );\r\n", "import TextureNode from './TextureNode.js';\r\nimport { reflectVector, refractVector } from './ReflectVectorNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nimport { CubeReflectionMapping, CubeRefractionMapping, WebGPUCoordinateSystem } from '../../constants.js';\r\n\r\nclass CubeTextureNode extends TextureNode {\r\n\r\n\tconstructor( value, uvNode = null, levelNode = null, biasNode = null ) {\r\n\r\n\t\tsuper( value, uvNode, levelNode, biasNode );\r\n\r\n\t\tthis.isCubeTextureNode = true;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'cubeTexture';\r\n\r\n\t}\r\n\r\n\tgetDefaultUV() {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( texture.mapping === CubeReflectionMapping ) {\r\n\r\n\t\t\treturn reflectVector;\r\n\r\n\t\t} else if ( texture.mapping === CubeRefractionMapping ) {\r\n\r\n\t\t\treturn refractVector;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.CubeTextureNode: Mapping \"%s\" not supported.', texture.mapping );\r\n\r\n\t\t\treturn vec3( 0, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for CubeTextureNode\r\n\r\n\tsetupUV( builder, uvNode ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( builder.renderer.coordinateSystem === WebGPUCoordinateSystem || ! texture.isRenderTargetTexture ) {\r\n\r\n\t\t\treturn vec3( uvNode.x.negate(), uvNode.yz );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn uvNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerateUV( builder, cubeUV ) {\r\n\r\n\t\treturn cubeUV.build( builder, 'vec3' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CubeTextureNode;\r\n\r\nexport const cubeTexture = nodeProxy( CubeTextureNode );\r\n\r\naddNodeElement( 'cubeTexture', cubeTexture );\r\n\r\naddNodeClass( 'CubeTextureNode', CubeTextureNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\n\r\nclass LightingNode extends Node {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.isLightingNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( /*builder*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LightingNode;\r\n\r\naddNodeClass( 'LightingNode', LightingNode );\r\n", "import { Texture } from './Texture.js';\r\nimport { NearestFilter, UnsignedIntType, UnsignedInt248Type, DepthFormat, DepthStencilFormat } from '../constants.js';\r\n\r\nclass DepthTexture extends Texture {\r\n\r\n\tconstructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format = DepthFormat ) {\r\n\r\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\r\n\r\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedIntType;\r\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\r\n\r\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.isDepthTexture = true;\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n\r\n\t\tthis.flipY = false;\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\tthis.compareFunction = null;\r\n\r\n\t}\r\n\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.compareFunction = source.compareFunction;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tif ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DepthTexture };\r\n", "import LightingNode from './LightingNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\r\nimport { reference } from '../accessors/ReferenceNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { positionWorld } from '../accessors/PositionNode.js';\r\nimport { normalWorld } from '../accessors/NormalNode.js';\r\nimport { mix, fract } from '../math/MathNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\nimport { tslFn } from '../shadernode/ShaderNode.js';\r\nimport { LessCompare, WebGPUCoordinateSystem } from '../../constants.js';\r\n\r\nconst BasicShadowMap = tslFn( ( { depthTexture, shadowCoord } ) => {\r\n\r\n\treturn texture( depthTexture, shadowCoord.xy ).compare( shadowCoord.z );\r\n\r\n} );\r\n\r\nconst PCFShadowMap = tslFn( ( { depthTexture, shadowCoord, shadow } ) => {\r\n\r\n\tconst depthCompare = ( uv, compare ) => texture( depthTexture, uv ).compare( compare );\r\n\r\n\tconst mapSize = reference( 'mapSize', 'vec2', shadow );\r\n\tconst radius = reference( 'radius', 'float', shadow );\r\n\r\n\tconst texelSize = vec2( 1 ).div( mapSize );\r\n\tconst dx0 = texelSize.x.negate().mul( radius );\r\n\tconst dy0 = texelSize.y.negate().mul( radius );\r\n\tconst dx1 = texelSize.x.mul( radius );\r\n\tconst dy1 = texelSize.y.mul( radius );\r\n\tconst dx2 = dx0.div( 2 );\r\n\tconst dy2 = dy0.div( 2 );\r\n\tconst dx3 = dx1.div( 2 );\r\n\tconst dy3 = dy1.div( 2 );\r\n\r\n\treturn add(\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, dy0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, dy0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, dy2 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy2 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, dy2 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy, shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, dy3 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy3 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, dy3 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, dy1 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy1 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, dy1 ) ), shadowCoord.z )\r\n\t).mul( 1 / 17 );\r\n\r\n} );\r\n\r\nconst PCFSoftShadowMap = tslFn( ( { depthTexture, shadowCoord, shadow } ) => {\r\n\r\n\tconst depthCompare = ( uv, compare ) => texture( depthTexture, uv ).compare( compare );\r\n\r\n\tconst mapSize = reference( 'mapSize', 'vec2', shadow );\r\n\r\n\tconst texelSize = vec2( 1 ).div( mapSize );\r\n\tconst dx = texelSize.x;\r\n\tconst dy = texelSize.y;\r\n\r\n\tconst uv = shadowCoord.xy;\r\n\tconst f = fract( uv.mul( mapSize ).add( 0.5 ) );\r\n\tuv.subAssign( f.mul( texelSize ) );\r\n\r\n\treturn add(\r\n\t\tdepthCompare( uv, shadowCoord.z ),\r\n\t\tdepthCompare( uv.add( vec2( dx, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( uv.add( vec2( 0, dy ) ), shadowCoord.z ),\r\n\t\tdepthCompare( uv.add( texelSize ), shadowCoord.z ),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( dx.negate(), 0 ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), 0 ) ), shadowCoord.z ),\r\n\t\t\tf.x\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy ) ), shadowCoord.z ),\r\n\t\t\tf.x\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( 0, dy.negate() ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( 0, dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\tf.y\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( dx, dy.negate() ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( dx, dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\tf.y\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tmix(\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy.negate() ) ), shadowCoord.z ),\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy.negate() ) ), shadowCoord.z ),\r\n\t\t\t\tf.x\r\n\t\t\t),\r\n\t\t\tmix(\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\t\tf.x\r\n\t\t\t),\r\n\t\t\tf.y\r\n\t\t)\r\n\t).mul( 1 / 9 );\r\n\r\n} );\r\n\r\nconst shadowFilterLib = [ BasicShadowMap, PCFShadowMap, PCFSoftShadowMap ];\r\n\r\n//\r\n\r\nlet overrideMaterial = null;\r\n\r\nclass AnalyticLightNode extends LightingNode {\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t\tthis.light = light;\r\n\r\n\t\tthis.color = new Color();\r\n\t\tthis.colorNode = uniform( this.color );\r\n\r\n\t\tthis.baseColorNode = null;\r\n\r\n\t\tthis.shadowMap = null;\r\n\t\tthis.shadowNode = null;\r\n\t\tthis.shadowColorNode = null;\r\n\r\n\t\tthis.isAnalyticLightNode = true;\r\n\r\n\t}\r\n\r\n\tgetCacheKey() {\r\n\r\n\t\treturn super.getCacheKey() + '-' + ( this.light.id + '-' + ( this.light.castShadow ? '1' : '0' ) );\r\n\r\n\t}\r\n\r\n\tgetHash() {\r\n\r\n\t\treturn this.light.uuid;\r\n\r\n\t}\r\n\r\n\tsetupShadow( builder ) {\r\n\r\n\t\tconst { object, renderer } = builder;\r\n\r\n\t\tlet shadowColorNode = this.shadowColorNode;\r\n\r\n\t\tif ( shadowColorNode === null ) {\r\n\r\n\t\t\tif ( overrideMaterial === null ) {\r\n\r\n\t\t\t\toverrideMaterial = builder.createNodeMaterial();\r\n\t\t\t\toverrideMaterial.fragmentNode = vec4( 0, 0, 0, 1 );\r\n\t\t\t\toverrideMaterial.isShadowNodeMaterial = true; // Use to avoid other overrideMaterial override material.fragmentNode unintentionally when using material.shadowNode\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst depthTexture = new DepthTexture();\r\n\t\t\tdepthTexture.compareFunction = LessCompare;\r\n\r\n\t\t\tconst shadow = this.light.shadow;\r\n\t\t\tconst shadowMap = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height );\r\n\t\t\tshadowMap.depthTexture = depthTexture;\r\n\r\n\t\t\tshadow.camera.updateProjectionMatrix();\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst shadowIntensity = reference( 'intensity', 'float', shadow );\r\n\t\t\tconst bias = reference( 'bias', 'float', shadow );\r\n\t\t\tconst normalBias = reference( 'normalBias', 'float', shadow );\r\n\r\n\t\t\tconst position = object.material.shadowPositionNode || positionWorld;\r\n\r\n\t\t\tlet shadowCoord = uniform( shadow.matrix ).mul( position.add( normalWorld.mul( normalBias ) ) );\r\n\t\t\tshadowCoord = shadowCoord.xyz.div( shadowCoord.w );\r\n\r\n\t\t\tlet coordZ = shadowCoord.z.add( bias );\r\n\r\n\t\t\tif ( renderer.coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\t\tcoordZ = coordZ.mul( 2 ).sub( 1 ); // WebGPU: Convertion [ 0, 1 ] to [ - 1, 1 ]\r\n\r\n\t\t\t}\r\n\r\n\t\t\tshadowCoord = vec3(\r\n\t\t\t\tshadowCoord.x,\r\n\t\t\t\tshadowCoord.y.oneMinus(), // follow webgpu standards\r\n\t\t\t\tcoordZ\r\n\t\t\t);\r\n\r\n\t\t\tconst frustumTest = shadowCoord.x.greaterThanEqual( 0 )\r\n\t\t\t\t.and( shadowCoord.x.lessThanEqual( 1 ) )\r\n\t\t\t\t.and( shadowCoord.y.greaterThanEqual( 0 ) )\r\n\t\t\t\t.and( shadowCoord.y.lessThanEqual( 1 ) )\r\n\t\t\t\t.and( shadowCoord.z.lessThanEqual( 1 ) );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst filterFn = shadow.filterNode || shadowFilterLib[ renderer.shadowMap.type ] || null;\r\n\r\n\t\t\tif ( filterFn === null ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.WebGPURenderer: Shadow map type not supported yet.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst shadowNode = frustumTest.cond( filterFn( { depthTexture, shadowCoord, shadow } ), float( 1 ) );\r\n\r\n\t\t\tthis.shadowMap = shadowMap;\r\n\r\n\t\t\tthis.shadowNode = shadowNode;\r\n\t\t\tthis.shadowColorNode = shadowColorNode = this.colorNode.mul( mix( 1, shadowNode, shadowIntensity ) );\r\n\r\n\t\t\tthis.baseColorNode = this.colorNode;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.colorNode = shadowColorNode;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.colorNode = this.baseColorNode || this.colorNode;\r\n\r\n\t\tif ( this.light.castShadow ) {\r\n\r\n\t\t\tif ( builder.object.receiveShadow ) {\r\n\r\n\t\t\t\tthis.setupShadow( builder );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.shadowNode !== null ) {\r\n\r\n\t\t\tthis.disposeShadow();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateShadow( frame ) {\r\n\r\n\t\tconst { shadowMap, light } = this;\r\n\t\tconst { renderer, scene, camera } = frame;\r\n\r\n\t\tconst currentOverrideMaterial = scene.overrideMaterial;\r\n\r\n\t\tscene.overrideMaterial = overrideMaterial;\r\n\r\n\t\tshadowMap.setSize( light.shadow.mapSize.width, light.shadow.mapSize.height );\r\n\r\n\t\tlight.shadow.updateMatrices( light );\r\n\t\tlight.shadow.camera.layers.mask = camera.layers.mask;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentRenderObjectFunction = renderer.getRenderObjectFunction();\r\n\r\n\t\trenderer.setRenderObjectFunction( ( object, ...params ) => {\r\n\r\n\t\t\tif ( object.castShadow === true ) {\r\n\r\n\t\t\t\trenderer.renderObject( object, ...params );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\trenderer.setRenderTarget( shadowMap );\r\n\t\trenderer.render( scene, light.shadow.camera );\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setRenderObjectFunction( currentRenderObjectFunction );\r\n\r\n\t\tscene.overrideMaterial = currentOverrideMaterial;\r\n\r\n\t}\r\n\r\n\tdisposeShadow() {\r\n\r\n\t\tthis.shadowMap.dispose();\r\n\t\tthis.shadowMap = null;\r\n\r\n\t\tthis.shadowNode = null;\r\n\t\tthis.shadowColorNode = null;\r\n\r\n\t\tthis.baseColorNode = null;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tthis.updateShadow( frame );\r\n\r\n\t}\r\n\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tthis.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AnalyticLightNode;\r\n\r\naddNodeClass( 'AnalyticLightNode', AnalyticLightNode );\r\n", "import Node from '../core/Node.js';\r\nimport AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { nodeObject, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nconst LightNodes = new WeakMap();\r\n\r\nconst sortLights = ( lights ) => {\r\n\r\n\treturn lights.sort( ( a, b ) => a.id - b.id );\r\n\r\n};\r\n\r\nclass LightsNode extends Node {\r\n\r\n\tconstructor( lightNodes = [] ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.totalDiffuseNode = vec3().temp( 'totalDiffuse' );\r\n\t\tthis.totalSpecularNode = vec3().temp( 'totalSpecular' );\r\n\r\n\t\tthis.outgoingLightNode = vec3().temp( 'outgoingLight' );\r\n\r\n\t\tthis.lightNodes = lightNodes;\r\n\r\n\t\tthis._hash = null;\r\n\r\n\t}\r\n\r\n\tget hasLight() {\r\n\r\n\t\treturn this.lightNodes.length > 0;\r\n\r\n\t}\r\n\r\n\tgetHash() {\r\n\r\n\t\tif ( this._hash === null ) {\r\n\r\n\t\t\tconst hash = [];\r\n\r\n\t\t\tfor ( const lightNode of this.lightNodes ) {\r\n\r\n\t\t\t\thash.push( lightNode.getHash() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._hash = 'lights-' + hash.join( ',' );\r\n\r\n\t\t}\r\n\r\n\t\treturn this._hash;\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tconst properties = builder.getDataFromNode( this );\r\n\r\n\t\tfor ( const node of properties.nodes ) {\r\n\r\n\t\t\tnode.build( builder );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst context = builder.context;\r\n\t\tconst lightingModel = context.lightingModel;\r\n\r\n\t\tlet outgoingLightNode = this.outgoingLightNode;\r\n\r\n\t\tif ( lightingModel ) {\r\n\r\n\t\t\tconst { lightNodes, totalDiffuseNode, totalSpecularNode } = this;\r\n\r\n\t\t\tcontext.outgoingLight = outgoingLightNode;\r\n\r\n\t\t\tconst stack = builder.addStack();\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst properties = builder.getDataFromNode( this );\r\n\t\t\tproperties.nodes = stack.nodes;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tlightingModel.start( context, stack, builder );\r\n\r\n\t\t\t// lights\r\n\r\n\t\t\tfor ( const lightNode of lightNodes ) {\r\n\r\n\t\t\t\tlightNode.build( builder );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tlightingModel.indirect( context, stack, builder );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst { backdrop, backdropAlpha } = context;\r\n\t\t\tconst { directDiffuse, directSpecular, indirectDiffuse, indirectSpecular } = context.reflectedLight;\r\n\r\n\t\t\tlet totalDiffuse = directDiffuse.add( indirectDiffuse );\r\n\r\n\t\t\tif ( backdrop !== null ) {\r\n\r\n\t\t\t\tif ( backdropAlpha !== null ) {\r\n\r\n\t\t\t\t\ttotalDiffuse = vec3( backdropAlpha.mix( totalDiffuse, backdrop ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttotalDiffuse = vec3( backdrop );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontext.material.transparent = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttotalDiffuseNode.assign( totalDiffuse );\r\n\t\t\ttotalSpecularNode.assign( directSpecular.add( indirectSpecular ) );\r\n\r\n\t\t\toutgoingLightNode.assign( totalDiffuseNode.add( totalSpecularNode ) );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tlightingModel.finish( context, stack, builder );\r\n\r\n\t\t\t//\r\n\r\n\t\t\toutgoingLightNode = outgoingLightNode.bypass( builder.removeStack() );\r\n\r\n\t\t}\r\n\r\n\t\treturn outgoingLightNode;\r\n\r\n\t}\r\n\r\n\t_getLightNodeById( id ) {\r\n\r\n\t\tfor ( const lightNode of this.lightNodes ) {\r\n\r\n\t\t\tif ( lightNode.isAnalyticLightNode && lightNode.light.id === id ) {\r\n\r\n\t\t\t\treturn lightNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\tfromLights( lights = [] ) {\r\n\r\n\t\tconst lightNodes = [];\r\n\r\n\t\tlights = sortLights( lights );\r\n\r\n\t\tfor ( const light of lights ) {\r\n\r\n\t\t\tlet lightNode = this._getLightNodeById( light.id );\r\n\r\n\t\t\tif ( lightNode === null ) {\r\n\r\n\t\t\t\tconst lightClass = light.constructor;\r\n\t\t\t\tconst lightNodeClass = LightNodes.has( lightClass ) ? LightNodes.get( lightClass ) : AnalyticLightNode;\r\n\r\n\t\t\t\tlightNode = nodeObject( new lightNodeClass( light ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlightNodes.push( lightNode );\r\n\r\n\t\t}\r\n\r\n\t\tthis.lightNodes = lightNodes;\r\n\t\tthis._hash = null;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LightsNode;\r\n\r\nexport const lights = ( lights ) => nodeObject( new LightsNode().fromLights( lights ) );\r\nexport const lightsNode = nodeProxy( LightsNode );\r\n\r\nexport function addLightNode( lightClass, lightNodeClass ) {\r\n\r\n\tif ( LightNodes.has( lightClass ) ) {\r\n\r\n\t\tconsole.warn( `Redefinition of light node ${ lightNodeClass.type }` );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tif ( typeof lightClass !== 'function' ) throw new Error( `Light ${ lightClass.name } is not a class` );\r\n\tif ( typeof lightNodeClass !== 'function' || ! lightNodeClass.type ) throw new Error( `Light node ${ lightNodeClass.type } is not a class` );\r\n\r\n\tLightNodes.set( lightClass, lightNodeClass );\r\n\r\n}\r\n", "import LightingNode from './LightingNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nclass AONode extends LightingNode {\r\n\r\n\tconstructor( aoNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.aoNode = aoNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tbuilder.context.ambientOcclusion.mulAssign( this.aoNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AONode;\r\n\r\naddNodeClass( 'AONode', AONode );\r\n", "import ContextNode from '../core/ContextNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy, float, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nclass LightingContextNode extends ContextNode {\r\n\r\n\tconstructor( node, lightingModel = null, backdropNode = null, backdropAlphaNode = null ) {\r\n\r\n\t\tsuper( node );\r\n\r\n\t\tthis.lightingModel = lightingModel;\r\n\t\tthis.backdropNode = backdropNode;\r\n\t\tthis.backdropAlphaNode = backdropAlphaNode;\r\n\r\n\t\tthis._context = null;\r\n\r\n\t}\r\n\r\n\tgetContext() {\r\n\r\n\t\tconst { backdropNode, backdropAlphaNode } = this;\r\n\r\n\t\tconst directDiffuse = vec3().temp( 'directDiffuse' ),\r\n\t\t\tdirectSpecular = vec3().temp( 'directSpecular' ),\r\n\t\t\tindirectDiffuse = vec3().temp( 'indirectDiffuse' ),\r\n\t\t\tindirectSpecular = vec3().temp( 'indirectSpecular' );\r\n\r\n\t\tconst reflectedLight = {\r\n\t\t\tdirectDiffuse,\r\n\t\t\tdirectSpecular,\r\n\t\t\tindirectDiffuse,\r\n\t\t\tindirectSpecular\r\n\t\t};\r\n\r\n\t\tconst context = {\r\n\t\t\tradiance: vec3().temp( 'radiance' ),\r\n\t\t\tirradiance: vec3().temp( 'irradiance' ),\r\n\t\t\tiblIrradiance: vec3().temp( 'iblIrradiance' ),\r\n\t\t\tambientOcclusion: float( 1 ).temp( 'ambientOcclusion' ),\r\n\t\t\treflectedLight,\r\n\t\t\tbackdrop: backdropNode,\r\n\t\t\tbackdropAlpha: backdropAlphaNode\r\n\t\t};\r\n\r\n\t\treturn context;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.context = this._context || ( this._context = this.getContext() );\r\n\t\tthis.context.lightingModel = this.lightingModel || builder.context.lightingModel;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LightingContextNode;\r\n\r\nexport const lightingContext = nodeProxy( LightingContextNode );\r\n\r\naddNodeElement( 'lightingContext', lightingContext );\r\n\r\naddNodeClass( 'LightingContextNode', LightingContextNode );\r\n", "import LightingNode from './LightingNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nclass IrradianceNode extends LightingNode {\r\n\r\n\tconstructor( node ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tbuilder.context.irradiance.addAssign( this.node );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default IrradianceNode;\r\n\r\naddNodeClass( 'IrradianceNode', IrradianceNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { nodeImmutable, vec2 } from '../shadernode/ShaderNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\nlet resolution, viewportResult;\r\n\r\nclass ViewportNode extends Node {\r\n\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t\tthis.isViewportNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType() {\r\n\r\n\t\tif ( this.scope === ViewportNode.VIEWPORT ) return 'vec4';\r\n\t\telse if ( this.scope === ViewportNode.COORDINATE ) return 'vec3';\r\n\t\telse return 'vec2';\r\n\r\n\t}\r\n\r\n\tgetUpdateType() {\r\n\r\n\t\tlet updateType = NodeUpdateType.NONE;\r\n\r\n\t\tif ( this.scope === ViewportNode.RESOLUTION || this.scope === ViewportNode.VIEWPORT ) {\r\n\r\n\t\t\tupdateType = NodeUpdateType.RENDER;\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateType = updateType;\r\n\r\n\t\treturn updateType;\r\n\r\n\t}\r\n\r\n\tupdate( { renderer } ) {\r\n\r\n\t\tif ( this.scope === ViewportNode.VIEWPORT ) {\r\n\r\n\t\t\trenderer.getViewport( viewportResult );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.getDrawingBufferSize( resolution );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( /*builder*/ ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( scope === ViewportNode.RESOLUTION ) {\r\n\r\n\t\t\toutput = uniform( resolution || ( resolution = new Vector2() ) );\r\n\r\n\t\t} else if ( scope === ViewportNode.VIEWPORT ) {\r\n\r\n\t\t\toutput = uniform( viewportResult || ( viewportResult = new Vector4() ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutput = viewportCoordinate.div( viewportResolution );\r\n\r\n\t\t\tlet outX = output.x;\r\n\t\t\tlet outY = output.y;\r\n\r\n\t\t\tif ( /bottom/i.test( scope ) ) outY = outY.oneMinus();\r\n\t\t\tif ( /right/i.test( scope ) ) outX = outX.oneMinus();\r\n\r\n\t\t\toutput = vec2( outX, outY );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tif ( this.scope === ViewportNode.COORDINATE ) {\r\n\r\n\t\t\tlet coord = builder.getFragCoord();\r\n\r\n\t\t\tif ( builder.isFlipY() ) {\r\n\r\n\t\t\t\t// follow webgpu standards\r\n\r\n\t\t\t\tconst resolution = builder.getNodeProperties( viewportResolution ).outputNode.build( builder );\r\n\r\n\t\t\t\tcoord = `${ builder.getType( 'vec3' ) }( ${ coord }.x, ${ resolution }.y - ${ coord }.y, ${ coord }.z )`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn coord;\r\n\r\n\t\t}\r\n\r\n\t\treturn super.generate( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nViewportNode.COORDINATE = 'coordinate';\r\nViewportNode.RESOLUTION = 'resolution';\r\nViewportNode.VIEWPORT = 'viewport';\r\nViewportNode.TOP_LEFT = 'topLeft';\r\nViewportNode.BOTTOM_LEFT = 'bottomLeft';\r\nViewportNode.TOP_RIGHT = 'topRight';\r\nViewportNode.BOTTOM_RIGHT = 'bottomRight';\r\n\r\nexport default ViewportNode;\r\n\r\nexport const viewportCoordinate = nodeImmutable( ViewportNode, ViewportNode.COORDINATE );\r\nexport const viewportResolution = nodeImmutable( ViewportNode, ViewportNode.RESOLUTION );\r\nexport const viewport = nodeImmutable( ViewportNode, ViewportNode.VIEWPORT );\r\nexport const viewportTopLeft = nodeImmutable( ViewportNode, ViewportNode.TOP_LEFT );\r\nexport const viewportBottomLeft = nodeImmutable( ViewportNode, ViewportNode.BOTTOM_LEFT );\r\nexport const viewportTopRight = nodeImmutable( ViewportNode, ViewportNode.TOP_RIGHT );\r\nexport const viewportBottomRight = nodeImmutable( ViewportNode, ViewportNode.BOTTOM_RIGHT );\r\n\r\naddNodeClass( 'ViewportNode', ViewportNode );\r\n", "import { Texture } from './Texture.js';\r\nimport { NearestFilter } from '../constants.js';\r\n\r\nclass FramebufferTexture extends Texture {\r\n\r\n\tconstructor( width, height ) {\r\n\r\n\t\tsuper( { width, height } );\r\n\r\n\t\tthis.isFramebufferTexture = true;\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { FramebufferTexture };\r\n", "import TextureNode from '../accessors/TextureNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\nimport { viewportTopLeft } from './ViewportNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { FramebufferTexture } from '../../textures/FramebufferTexture.js';\r\nimport { LinearMipmapLinearFilter } from '../../constants.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nclass ViewportTextureNode extends TextureNode {\r\n\r\n\tconstructor( uvNode = viewportTopLeft, levelNode = null, framebufferTexture = null ) {\r\n\r\n\t\tif ( framebufferTexture === null ) {\r\n\r\n\t\t\tframebufferTexture = new FramebufferTexture();\r\n\t\t\tframebufferTexture.minFilter = LinearMipmapLinearFilter;\r\n\r\n\t\t}\r\n\r\n\t\tsuper( framebufferTexture, uvNode, levelNode );\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\tthis.isOutputTextureNode = true;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst renderer = frame.renderer;\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\t//\r\n\r\n\t\tconst framebufferTexture = this.value;\r\n\r\n\t\tif ( framebufferTexture.image.width !== _size.width || framebufferTexture.image.height !== _size.height ) {\r\n\r\n\t\t\tframebufferTexture.image.width = _size.width;\r\n\t\t\tframebufferTexture.image.height = _size.height;\r\n\t\t\tframebufferTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst currentGenerateMipmaps = framebufferTexture.generateMipmaps;\r\n\t\tframebufferTexture.generateMipmaps = this.generateMipmaps;\r\n\r\n\t\trenderer.copyFramebufferToTexture( framebufferTexture );\r\n\r\n\t\tframebufferTexture.generateMipmaps = currentGenerateMipmaps;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst viewportTextureNode = new this.constructor( this.uvNode, this.levelNode, this.value );\r\n\t\tviewportTextureNode.generateMipmaps = this.generateMipmaps;\r\n\r\n\t\treturn viewportTextureNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ViewportTextureNode;\r\n\r\nexport const viewportTexture = nodeProxy( ViewportTextureNode );\r\nexport const viewportMipTexture = nodeProxy( ViewportTextureNode, null, null, { generateMipmaps: true } );\r\n\r\naddNodeElement( 'viewportTexture', viewportTexture );\r\naddNodeElement( 'viewportMipTexture', viewportMipTexture );\r\n\r\naddNodeClass( 'ViewportTextureNode', ViewportTextureNode );\r\n", "import ViewportTextureNode from './ViewportTextureNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\nimport { viewportTopLeft } from './ViewportNode.js';\r\n\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\n\r\nlet sharedDepthbuffer = null;\r\n\r\nclass ViewportDepthTextureNode extends ViewportTextureNode {\r\n\r\n\tconstructor( uvNode = viewportTopLeft, levelNode = null ) {\r\n\r\n\t\tif ( sharedDepthbuffer === null ) {\r\n\r\n\t\t\tsharedDepthbuffer = new DepthTexture();\r\n\r\n\t\t}\r\n\r\n\t\tsuper( uvNode, levelNode, sharedDepthbuffer );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ViewportDepthTextureNode;\r\n\r\nexport const viewportDepthTexture = nodeProxy( ViewportDepthTextureNode );\r\n\r\naddNodeElement( 'viewportDepthTexture', viewportDepthTexture );\r\n\r\naddNodeClass( 'ViewportDepthTextureNode', ViewportDepthTextureNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { nodeImmutable, nodeProxy } from '../shadernode/ShaderNode.js';\r\nimport { cameraNear, cameraFar } from '../accessors/CameraNode.js';\r\nimport { positionView } from '../accessors/PositionNode.js';\r\nimport { viewportDepthTexture } from './ViewportDepthTextureNode.js';\r\n\r\nclass ViewportDepthNode extends Node {\r\n\r\n\tconstructor( scope, valueNode = null ) {\r\n\r\n\t\tsuper( 'float' );\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.valueNode = valueNode;\r\n\r\n\t\tthis.isViewportDepthNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { scope } = this;\r\n\r\n\t\tif ( scope === ViewportDepthNode.DEPTH ) {\r\n\r\n\t\t\treturn builder.getFragDepth();\r\n\r\n\t\t}\r\n\r\n\t\treturn super.generate( builder );\r\n\r\n\t}\r\n\r\n\tsetup( { camera } ) {\r\n\r\n\t\tconst { scope } = this;\r\n\t\tconst texture = this.valueNode;\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( scope === ViewportDepthNode.DEPTH ) {\r\n\r\n\t\t\tif ( texture !== null ) {\r\n\r\n \t\t\t\tnode = depthBase().assign( texture );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( camera.isPerspectiveCamera ) {\r\n\r\n\t\t\t\t\tnode = viewZToPerspectiveDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tnode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === ViewportDepthNode.LINEAR_DEPTH ) {\r\n\r\n\t\t\tif ( texture !== null ) {\r\n\r\n\t\t\t\tif ( camera.isPerspectiveCamera ) {\r\n\r\n\t\t\t\t\tconst viewZ = perspectiveDepthToViewZ( texture, cameraNear, cameraFar );\r\n\r\n\t\t\t\t\tnode = viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tnode = texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera\r\n\r\n// -near maps to 0; -far maps to 1\r\nexport const viewZToOrthographicDepth = ( viewZ, near, far ) => viewZ.add( near ).div( near.sub( far ) );\r\n\r\n// maps orthographic depth in [ 0, 1 ] to viewZ\r\nexport const orthographicDepthToViewZ = ( depth, near, far ) => near.sub( far ).mul( depth ).sub( near );\r\n\r\n// NOTE: https://twitter.com/gonnavis/status/1377183786949959682\r\n\r\n// -near maps to 0; -far maps to 1\r\nexport const viewZToPerspectiveDepth = ( viewZ, near, far ) => near.add( viewZ ).mul( far ).div( far.sub( near ).mul( viewZ ) );\r\n\r\n// maps perspective depth in [ 0, 1 ] to viewZ\r\nexport const perspectiveDepthToViewZ = ( depth, near, far ) => near.mul( far ).div( far.sub( near ).mul( depth ).sub( far ) );\r\n\r\nViewportDepthNode.DEPTH = 'depth';\r\nViewportDepthNode.LINEAR_DEPTH = 'linearDepth';\r\n\r\nexport default ViewportDepthNode;\r\n\r\nconst depthBase = nodeProxy( ViewportDepthNode, ViewportDepthNode.DEPTH );\r\n\r\nexport const depth = nodeImmutable( ViewportDepthNode, ViewportDepthNode.DEPTH );\r\nexport const linearDepth = nodeProxy( ViewportDepthNode, ViewportDepthNode.LINEAR_DEPTH );\r\nexport const viewportLinearDepth = linearDepth( viewportDepthTexture() );\r\n\r\ndepth.assign = ( value ) => depthBase( value );\r\n\r\naddNodeClass( 'ViewportDepthNode', ViewportDepthNode );\r\n", "\r\nimport Node from '../core/Node.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\nimport { positionView } from './PositionNode.js';\r\nimport { diffuseColor, property } from '../core/PropertyNode.js';\r\nimport { tslFn } from '../shadernode/ShaderNode.js';\r\nimport { loop } from '../utils/LoopNode.js';\r\nimport { smoothstep } from '../math/MathNode.js';\r\nimport { uniforms } from './UniformsNode.js';\r\n\r\nclass ClippingNode extends Node {\r\n\r\n\tconstructor( scope = ClippingNode.DEFAULT ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst clippingContext = builder.clippingContext;\r\n\t\tconst { localClipIntersection, localClippingCount, globalClippingCount } = clippingContext;\r\n\r\n\t\tconst numClippingPlanes = globalClippingCount + localClippingCount;\r\n\t\tconst numUnionClippingPlanes = localClipIntersection ? numClippingPlanes - localClippingCount : numClippingPlanes;\r\n\r\n\t\tif ( this.scope === ClippingNode.ALPHA_TO_COVERAGE ) {\r\n\r\n\t\t\treturn this.setupAlphaToCoverage( clippingContext.planes, numClippingPlanes, numUnionClippingPlanes );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn this.setupDefault( clippingContext.planes, numClippingPlanes, numUnionClippingPlanes );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetupAlphaToCoverage( planes, numClippingPlanes, numUnionClippingPlanes ) {\r\n\r\n\t\treturn tslFn( () => {\r\n\r\n\t\t\tconst clippingPlanes = uniforms( planes );\r\n\r\n\t\t\tconst distanceToPlane = property( 'float', 'distanceToPlane' );\r\n\t\t\tconst distanceGradient = property( 'float', 'distanceToGradient' );\r\n\r\n\t\t\tconst clipOpacity = property( 'float', 'clipOpacity' );\r\n\r\n\t\t\tclipOpacity.assign( 1 );\r\n\r\n\t\t\tlet plane;\r\n\r\n\t\t\tloop( numUnionClippingPlanes, ( { i } ) => {\r\n\r\n\t\t\t\tplane = clippingPlanes.element( i );\r\n\r\n\t\t\t\tdistanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );\r\n\t\t\t\tdistanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );\r\n\r\n\t\t\t\tclipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ) );\r\n\r\n\t\t\t\tclipOpacity.equal( 0.0 ).discard();\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tif ( numUnionClippingPlanes < numClippingPlanes ) {\r\n\r\n\t\t\t\tconst unionClipOpacity = property( 'float', 'unionclipOpacity' );\r\n\r\n\t\t\t\tunionClipOpacity.assign( 1 );\r\n\r\n\t\t\t\tloop( { start: numUnionClippingPlanes, end: numClippingPlanes }, ( { i } ) => {\r\n\r\n\t\t\t\t\tplane = clippingPlanes.element( i );\r\n\r\n\t\t\t\t\tdistanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );\r\n\t\t\t\t\tdistanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );\r\n\r\n\t\t\t\t\tunionClipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ).oneMinus() );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tclipOpacity.mulAssign( unionClipOpacity.oneMinus() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdiffuseColor.a.mulAssign( clipOpacity );\r\n\r\n\t\t\tdiffuseColor.a.equal( 0.0 ).discard();\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n\tsetupDefault( planes, numClippingPlanes, numUnionClippingPlanes ) {\r\n\r\n\t\treturn tslFn( () => {\r\n\r\n\t\t\tconst clippingPlanes = uniforms( planes );\r\n\r\n\t\t\tlet plane;\r\n\r\n\t\t\tloop( numUnionClippingPlanes, ( { i } ) => {\r\n\r\n\t\t\t\tplane = clippingPlanes.element( i );\r\n\t\t\t\tpositionView.dot( plane.xyz ).greaterThan( plane.w ).discard();\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tif ( numUnionClippingPlanes < numClippingPlanes ) {\r\n\r\n\t\t\t\tconst clipped = property( 'bool', 'clipped' );\r\n\r\n\t\t\t\tclipped.assign( true );\r\n\r\n\t\t\t\tloop( { start: numUnionClippingPlanes, end: numClippingPlanes }, ( { i } ) => {\r\n\r\n\t\t\t\t\tplane = clippingPlanes.element( i );\r\n\t\t\t\t\tclipped.assign( positionView.dot( plane.xyz ).greaterThan( plane.w ).and( clipped ) );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tclipped.discard();\r\n\r\n\t\t\t}\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n}\r\n\r\nClippingNode.ALPHA_TO_COVERAGE = 'alphaToCoverage';\r\nClippingNode.DEFAULT = 'default';\r\n\r\nexport default ClippingNode;\r\n\r\nexport const clipping = () => nodeObject( new ClippingNode() );\r\n\r\nexport const clippingAlpha = () => nodeObject( new ClippingNode( ClippingNode.ALPHA_TO_COVERAGE ) );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { nodeImmutable, float } from '../shadernode/ShaderNode.js';\r\n\r\nimport { BackSide, WebGLCoordinateSystem } from '../../constants.js';\r\n\r\nclass FrontFacingNode extends Node {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'bool' );\r\n\r\n\t\tthis.isFrontFacingNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { renderer, material } = builder;\r\n\r\n\t\tif ( renderer.coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\treturn 'false';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getFrontFacing();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FrontFacingNode;\r\n\r\nexport const frontFacing = nodeImmutable( FrontFacingNode );\r\nexport const faceDirection = float( frontFacing ).mul( 2.0 ).sub( 1.0 );\r\n\r\naddNodeClass( 'FrontFacingNode', FrontFacingNode );\r\n", "import { Material } from '../../materials/Material.js';\r\nimport { NormalBlending } from '../../constants.js';\r\n\r\nimport { getNodeChildren, getCacheKey } from '../core/NodeUtils.js';\r\nimport { attribute } from '../core/AttributeNode.js';\r\nimport { output, diffuseColor, emissive, varyingProperty } from '../core/PropertyNode.js';\r\nimport { materialAlphaTest, materialColor, materialOpacity, materialEmissive, materialNormal, materialLightMap, materialAOMap } from '../accessors/MaterialNode.js';\r\nimport { modelViewProjection } from '../accessors/ModelViewProjectionNode.js';\r\nimport { transformedNormalView, normalLocal } from '../accessors/NormalNode.js';\r\nimport { instance } from '../accessors/InstanceNode.js';\r\nimport { batch } from '../accessors/BatchNode.js';\r\nimport { materialReference } from '../accessors/MaterialReferenceNode.js';\r\nimport { positionLocal, positionView } from '../accessors/PositionNode.js';\r\nimport { skinningReference } from '../accessors/SkinningNode.js';\r\nimport { morphReference } from '../accessors/MorphNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { cubeTexture } from '../accessors/CubeTextureNode.js';\r\nimport { lightsNode } from '../lighting/LightsNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { float, vec3, vec4 } from '../shadernode/ShaderNode.js';\r\nimport AONode from '../lighting/AONode.js';\r\nimport { lightingContext } from '../lighting/LightingContextNode.js';\r\nimport IrradianceNode from '../lighting/IrradianceNode.js';\r\nimport { depth } from '../display/ViewportDepthNode.js';\r\nimport { cameraLogDepth } from '../accessors/CameraNode.js';\r\nimport { clipping, clippingAlpha } from '../accessors/ClippingNode.js';\r\nimport { faceDirection } from '../display/FrontFacingNode.js';\r\n\r\nconst NodeMaterials = new Map();\r\n\r\nclass NodeMaterial extends Material {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isNodeMaterial = true;\r\n\r\n\t\tthis.type = this.constructor.type;\r\n\r\n\t\tthis.forceSinglePass = false;\r\n\r\n\t\tthis.fog = true;\r\n\t\tthis.lights = false;\r\n\t\tthis.normals = true;\r\n\r\n\t\tthis.lightsNode = null;\r\n\t\tthis.envNode = null;\r\n\t\tthis.aoNode = null;\r\n\r\n\t\tthis.colorNode = null;\r\n\t\tthis.normalNode = null;\r\n\t\tthis.opacityNode = null;\r\n\t\tthis.backdropNode = null;\r\n\t\tthis.backdropAlphaNode = null;\r\n\t\tthis.alphaTestNode = null;\r\n\r\n\t\tthis.positionNode = null;\r\n\r\n\t\tthis.depthNode = null;\r\n\t\tthis.shadowNode = null;\r\n\t\tthis.shadowPositionNode = null;\r\n\r\n\t\tthis.outputNode = null;\r\n\t\tthis.mrtNode = null;\r\n\r\n\t\tthis.fragmentNode = null;\r\n\t\tthis.vertexNode = null;\r\n\r\n\t}\r\n\r\n\tcustomProgramCacheKey() {\r\n\r\n\t\treturn this.type + getCacheKey( this );\r\n\r\n\t}\r\n\r\n\tbuild( builder ) {\r\n\r\n\t\tthis.setup( builder );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// < VERTEX STAGE >\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tbuilder.stack.outputNode = this.vertexNode || this.setupPosition( builder );\r\n\r\n\t\tbuilder.addFlow( 'vertex', builder.removeStack() );\r\n\r\n\t\t// < FRAGMENT STAGE >\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tlet resultNode;\r\n\r\n\t\tconst clippingNode = this.setupClipping( builder );\r\n\r\n\t\tif ( this.depthWrite === true ) this.setupDepth( builder );\r\n\r\n\t\tif ( this.fragmentNode === null ) {\r\n\r\n\t\t\tif ( this.normals === true ) this.setupNormal( builder );\r\n\r\n\t\t\tthis.setupDiffuseColor( builder );\r\n\t\t\tthis.setupVariants( builder );\r\n\r\n\t\t\tconst outgoingLightNode = this.setupLighting( builder );\r\n\r\n\t\t\tif ( clippingNode !== null ) builder.stack.add( clippingNode );\r\n\r\n\t\t\t// force unsigned floats - useful for RenderTargets\r\n\r\n\t\t\tconst basicOutput = vec4( outgoingLightNode, diffuseColor.a ).max( 0 );\r\n\r\n\t\t\tresultNode = this.setupOutput( builder, basicOutput );\r\n\r\n\t\t\t// OUTPUT NODE\r\n\r\n\t\t\toutput.assign( resultNode );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.outputNode !== null ) resultNode = this.outputNode;\r\n\r\n\t\t\t// MRT\r\n\r\n\t\t\tconst renderTarget = builder.renderer.getRenderTarget();\r\n\r\n\t\t\tif ( renderTarget !== null ) {\r\n\r\n\t\t\t\tconst mrt = builder.renderer.getMRT();\r\n\t\t\t\tconst materialMRT = this.mrtNode;\r\n\r\n\t\t\t\tif ( mrt !== null ) {\r\n\r\n\t\t\t\t\tresultNode = mrt;\r\n\r\n\t\t\t\t\tif ( materialMRT !== null ) {\r\n\r\n\t\t\t\t\t\tresultNode = mrt.merge( materialMRT );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( materialMRT !== null ) {\r\n\r\n\t\t\t\t\tresultNode = materialMRT;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlet fragmentNode = this.fragmentNode;\r\n\r\n\t\t\tif ( fragmentNode.isOutputStructNode !== true ) {\r\n\r\n\t\t\t\tfragmentNode = vec4( fragmentNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresultNode = this.setupOutput( builder, fragmentNode );\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.stack.outputNode = resultNode;\r\n\r\n\t\tbuilder.addFlow( 'fragment', builder.removeStack() );\r\n\r\n\t}\r\n\r\n\tsetupClipping( builder ) {\r\n\r\n\t\tif ( builder.clippingContext === null ) return null;\r\n\r\n\t\tconst { globalClippingCount, localClippingCount } = builder.clippingContext;\r\n\r\n\t\tlet result = null;\r\n\r\n\t\tif ( globalClippingCount || localClippingCount ) {\r\n\r\n\t\t\tif ( this.alphaToCoverage ) {\r\n\r\n\t\t\t\t// to be added to flow when the color/alpha value has been determined\r\n\t\t\t\tresult = clippingAlpha();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbuilder.stack.add( clipping() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tsetupDepth( builder ) {\r\n\r\n\t\tconst { renderer } = builder;\r\n\r\n\t\t// Depth\r\n\r\n\t\tlet depthNode = this.depthNode;\r\n\r\n\t\tif ( depthNode === null && renderer.logarithmicDepthBuffer === true ) {\r\n\r\n\t\t\tconst fragDepth = modelViewProjection().w.add( 1 );\r\n\r\n\t\t\tdepthNode = fragDepth.log2().mul( cameraLogDepth ).mul( 0.5 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( depthNode !== null ) {\r\n\r\n\t\t\tdepth.assign( depthNode ).append();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetupPosition( builder ) {\r\n\r\n\t\tconst { object } = builder;\r\n\t\tconst geometry = object.geometry;\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\t// Vertex\r\n\r\n\t\tif ( geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color ) {\r\n\r\n\t\t\tmorphReference( object ).append();\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.isSkinnedMesh === true ) {\r\n\r\n\t\t\tskinningReference( object ).append();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.displacementMap ) {\r\n\r\n\t\t\tconst displacementMap = materialReference( 'displacementMap', 'texture' );\r\n\t\t\tconst displacementScale = materialReference( 'displacementScale', 'float' );\r\n\t\t\tconst displacementBias = materialReference( 'displacementBias', 'float' );\r\n\r\n\t\t\tpositionLocal.addAssign( normalLocal.normalize().mul( ( displacementMap.x.mul( displacementScale ).add( displacementBias ) ) ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.isBatchedMesh ) {\r\n\r\n\t\t\tbatch( object ).append();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( object.instanceMatrix && object.instanceMatrix.isInstancedBufferAttribute === true ) ) {\r\n\r\n\t\t\tinstance( object ).append();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.positionNode !== null ) {\r\n\r\n\t\t\tpositionLocal.assign( this.positionNode );\r\n\r\n\t\t}\r\n\r\n\t\tconst mvp = modelViewProjection();\r\n\r\n\t\tbuilder.context.vertex = builder.removeStack();\r\n\t\tbuilder.context.mvp = mvp;\r\n\r\n\t\treturn mvp;\r\n\r\n\t}\r\n\r\n\tsetupDiffuseColor( { object, geometry } ) {\r\n\r\n\t\tlet colorNode = this.colorNode ? vec4( this.colorNode ) : materialColor;\r\n\r\n\t\t// VERTEX COLORS\r\n\r\n\t\tif ( this.vertexColors === true && geometry.hasAttribute( 'color' ) ) {\r\n\r\n\t\t\tcolorNode = vec4( colorNode.xyz.mul( attribute( 'color', 'vec3' ) ), colorNode.a );\r\n\r\n\t\t}\r\n\r\n\t\t// Instanced colors\r\n\r\n\t\tif ( object.instanceColor ) {\r\n\r\n\t\t\tconst instanceColor = varyingProperty( 'vec3', 'vInstanceColor' );\r\n\r\n\t\t\tcolorNode = instanceColor.mul( colorNode );\r\n\r\n\t\t}\r\n\r\n\t\t// COLOR\r\n\r\n\t\tdiffuseColor.assign( colorNode );\r\n\r\n\t\t// OPACITY\r\n\r\n\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\r\n\t\tdiffuseColor.a.assign( diffuseColor.a.mul( opacityNode ) );\r\n\r\n\t\t// ALPHA TEST\r\n\r\n\t\tif ( this.alphaTestNode !== null || this.alphaTest > 0 ) {\r\n\r\n\t\t\tconst alphaTestNode = this.alphaTestNode !== null ? float( this.alphaTestNode ) : materialAlphaTest;\r\n\r\n\t\t\tdiffuseColor.a.lessThanEqual( alphaTestNode ).discard();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.transparent === false && this.blending === NormalBlending && this.alphaToCoverage === false ) {\r\n\r\n\t\t\tdiffuseColor.a.assign( 1.0 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetupVariants( /*builder*/ ) {\r\n\r\n\t\t// Interface function.\r\n\r\n\t}\r\n\r\n\r\n\tsetupOutgoingLight() {\r\n\r\n\t\treturn ( this.lights === true ) ? vec3( 0 ) : diffuseColor.rgb;\r\n\r\n\t}\r\n\r\n\tsetupNormal() {\r\n\r\n\t\t// NORMAL VIEW\r\n\r\n\t\tif ( this.flatShading === true ) {\r\n\r\n\t\t\tconst normalNode = positionView.dFdx().cross( positionView.dFdy() ).normalize();\r\n\r\n\t\t\ttransformedNormalView.assign( normalNode.mul( faceDirection ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst normalNode = this.normalNode ? vec3( this.normalNode ) : materialNormal;\r\n\r\n\t\t\ttransformedNormalView.assign( normalNode.mul( faceDirection ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetupEnvironment( builder ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( this.envNode ) {\r\n\r\n\t\t\tnode = this.envNode;\r\n\r\n\t\t} else if ( this.envMap ) {\r\n\r\n\t\t\tnode = this.envMap.isCubeTexture ? cubeTexture( this.envMap ) : texture( this.envMap );\r\n\r\n\t\t} else if ( builder.environmentNode ) {\r\n\r\n\t\t\tnode = builder.environmentNode;\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tsetupLightMap( builder ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( builder.material.lightMap ) {\r\n\r\n\t\t\tnode = new IrradianceNode( materialLightMap );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tsetupLights( builder ) {\r\n\r\n\t\tconst materialLightsNode = [];\r\n\r\n\t\t//\r\n\r\n\t\tconst envNode = this.setupEnvironment( builder );\r\n\r\n\t\tif ( envNode && envNode.isLightingNode ) {\r\n\r\n\t\t\tmaterialLightsNode.push( envNode );\r\n\r\n\t\t}\r\n\r\n\t\tconst lightMapNode = this.setupLightMap( builder );\r\n\r\n\t\tif ( lightMapNode && lightMapNode.isLightingNode ) {\r\n\r\n\t\t\tmaterialLightsNode.push( lightMapNode );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aoNode !== null || builder.material.aoMap ) {\r\n\r\n\t\t\tconst aoNode = this.aoNode !== null ? this.aoNode : materialAOMap;\r\n\r\n\t\t\tmaterialLightsNode.push( new AONode( aoNode ) );\r\n\r\n\t\t}\r\n\r\n\t\tlet lightsN = this.lightsNode || builder.lightsNode;\r\n\r\n\t\tif ( materialLightsNode.length > 0 ) {\r\n\r\n\t\t\tlightsN = lightsNode( [ ...lightsN.lightNodes, ...materialLightsNode ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn lightsN;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\t// Interface function.\r\n\r\n\t}\r\n\r\n\tsetupLighting( builder ) {\r\n\r\n\t\tconst { material } = builder;\r\n\t\tconst { backdropNode, backdropAlphaNode, emissiveNode } = this;\r\n\r\n\t\t// OUTGOING LIGHT\r\n\r\n\t\tconst lights = this.lights === true || this.lightsNode !== null;\r\n\r\n\t\tconst lightsNode = lights ? this.setupLights( builder ) : null;\r\n\r\n\t\tlet outgoingLightNode = this.setupOutgoingLight( builder );\r\n\r\n\t\tif ( lightsNode && lightsNode.hasLight !== false ) {\r\n\r\n\t\t\tconst lightingModel = this.setupLightingModel( builder );\r\n\r\n\t\t\toutgoingLightNode = lightingContext( lightsNode, lightingModel, backdropNode, backdropAlphaNode );\r\n\r\n\t\t} else if ( backdropNode !== null ) {\r\n\r\n\t\t\toutgoingLightNode = vec3( backdropAlphaNode !== null ? mix( outgoingLightNode, backdropNode, backdropAlphaNode ) : backdropNode );\r\n\r\n\t\t}\r\n\r\n\t\t// EMISSIVE\r\n\r\n\t\tif ( ( emissiveNode && emissiveNode.isNode === true ) || ( material.emissive && material.emissive.isColor === true ) ) {\r\n\r\n\t\t\temissive.assign( vec3( emissiveNode ? emissiveNode : materialEmissive ) );\r\n\r\n\t\t\toutgoingLightNode = outgoingLightNode.add( emissive );\r\n\r\n\t\t}\r\n\r\n\t\treturn outgoingLightNode;\r\n\r\n\t}\r\n\r\n\tsetupOutput( builder, outputNode ) {\r\n\r\n\t\t// FOG\r\n\r\n\t\tif ( this.fog === true ) {\r\n\r\n\t\t\tconst fogNode = builder.fogNode;\r\n\r\n\t\t\tif ( fogNode ) outputNode = vec4( fogNode.mix( outputNode.rgb, fogNode.colorNode ), outputNode.a );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n\tsetDefaultValues( material ) {\r\n\r\n\t\t// This approach is to reuse the native refreshUniforms*\r\n\t\t// and turn available the use of features like transmission and environment in core\r\n\r\n\t\tfor ( const property in material ) {\r\n\r\n\t\t\tconst value = material[ property ];\r\n\r\n\t\t\tif ( this[ property ] === undefined ) {\r\n\r\n\t\t\t\tthis[ property ] = value;\r\n\r\n\t\t\t\tif ( value && value.clone ) this[ property ] = value.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst descriptors = Object.getOwnPropertyDescriptors( material.constructor.prototype );\r\n\r\n\t\tfor ( const key in descriptors ) {\r\n\r\n\t\t\tif ( Object.getOwnPropertyDescriptor( this.constructor.prototype, key ) === undefined &&\r\n\t\t\t     descriptors[ key ].get !== undefined ) {\r\n\r\n\t\t\t\tObject.defineProperty( this.constructor.prototype, key, descriptors[ key ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst data = Material.prototype.toJSON.call( this, meta );\r\n\t\tconst nodeChildren = getNodeChildren( this );\r\n\r\n\t\tdata.inputNodes = {};\r\n\r\n\t\tfor ( const { property, childNode } of nodeChildren ) {\r\n\r\n\t\t\tdata.inputNodes[ property ] = childNode.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.lightsNode = source.lightsNode;\r\n\t\tthis.envNode = source.envNode;\r\n\r\n\t\tthis.colorNode = source.colorNode;\r\n\t\tthis.normalNode = source.normalNode;\r\n\t\tthis.opacityNode = source.opacityNode;\r\n\t\tthis.backdropNode = source.backdropNode;\r\n\t\tthis.backdropAlphaNode = source.backdropAlphaNode;\r\n\t\tthis.alphaTestNode = source.alphaTestNode;\r\n\r\n\t\tthis.positionNode = source.positionNode;\r\n\r\n\t\tthis.depthNode = source.depthNode;\r\n\t\tthis.shadowNode = source.shadowNode;\r\n\t\tthis.shadowPositionNode = source.shadowPositionNode;\r\n\r\n\t\tthis.outputNode = source.outputNode;\r\n\t\tthis.mrtNode = source.mrtNode;\r\n\r\n\t\tthis.fragmentNode = source.fragmentNode;\r\n\t\tthis.vertexNode = source.vertexNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n\tstatic fromMaterial( material ) {\r\n\r\n\t\tif ( material.isNodeMaterial === true ) { // is already a node material\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t\tconst type = material.type.replace( 'Material', 'NodeMaterial' );\r\n\r\n\t\tconst nodeMaterial = createNodeMaterialFromType( type );\r\n\r\n\t\tif ( nodeMaterial === undefined ) {\r\n\r\n\t\t\tthrow new Error( `NodeMaterial: Material \"${ material.type }\" is not compatible.` );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const key in material ) {\r\n\r\n\t\t\tnodeMaterial[ key ] = material[ key ];\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeMaterial;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeMaterial;\r\n\r\nexport function addNodeMaterial( type, nodeMaterial ) {\r\n\r\n\tif ( typeof nodeMaterial !== 'function' || ! type ) throw new Error( `Node material ${ type } is not a class` );\r\n\tif ( NodeMaterials.has( type ) ) {\r\n\r\n\t\tconsole.warn( `Redefinition of node material ${ type }` );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tNodeMaterials.set( type, nodeMaterial );\r\n\tnodeMaterial.type = type;\r\n\r\n}\r\n\r\nexport function createNodeMaterialFromType( type ) {\r\n\r\n\tconst Material = NodeMaterials.get( type );\r\n\r\n\tif ( Material !== undefined ) {\r\n\r\n\t\treturn new Material();\r\n\r\n\t}\r\n\r\n}\r\n\r\naddNodeMaterial( 'NodeMaterial', NodeMaterial );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { property } from '../core/PropertyNode.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass CondNode extends Node {\r\n\r\n\tconstructor( condNode, ifNode, elseNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.condNode = condNode;\r\n\r\n\t\tthis.ifNode = ifNode;\r\n\t\tthis.elseNode = elseNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst ifType = this.ifNode.getNodeType( builder );\r\n\r\n\t\tif ( this.elseNode !== null ) {\r\n\r\n\t\t\tconst elseType = this.elseNode.getNodeType( builder );\r\n\r\n\t\t\tif ( builder.getTypeLength( elseType ) > builder.getTypeLength( ifType ) ) {\r\n\r\n\t\t\t\treturn elseType;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn ifType;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.condNode = this.condNode.cache();\r\n\t\tproperties.ifNode = this.ifNode.cache();\r\n\t\tproperties.elseNode = this.elseNode ? this.elseNode.cache() : null;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\tif ( nodeData.nodeProperty !== undefined ) {\r\n\r\n\t\t\treturn nodeData.nodeProperty;\r\n\r\n\t\t}\r\n\r\n\t\tconst { condNode, ifNode, elseNode } = builder.getNodeProperties( this );\r\n\r\n\t\tconst needsOutput = output !== 'void';\r\n\t\tconst nodeProperty = needsOutput ? property( type ).build( builder ) : '';\r\n\r\n\t\tnodeData.nodeProperty = nodeProperty;\r\n\r\n\t\tconst nodeSnippet = condNode.build( builder, 'bool' );\r\n\r\n\t\tbuilder.addFlowCode( `\\n${ builder.tab }if ( ${ nodeSnippet } ) {\\n\\n` ).addFlowTab();\r\n\r\n\t\tlet ifSnippet = ifNode.build( builder, type );\r\n\r\n\t\tif ( ifSnippet ) {\r\n\r\n\t\t\tif ( needsOutput ) {\r\n\r\n\t\t\t\tifSnippet = nodeProperty + ' = ' + ifSnippet + ';';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tifSnippet = 'return ' + ifSnippet + ';';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.removeFlowTab().addFlowCode( builder.tab + '\\t' + ifSnippet + '\\n\\n' + builder.tab + '}' );\r\n\r\n\t\tif ( elseNode !== null ) {\r\n\r\n\t\t\tbuilder.addFlowCode( ' else {\\n\\n' ).addFlowTab();\r\n\r\n\t\t\tlet elseSnippet = elseNode.build( builder, type );\r\n\r\n\t\t\tif ( elseSnippet ) {\r\n\r\n\t\t\t\tif ( needsOutput ) {\r\n\r\n\t\t\t\t\telseSnippet = nodeProperty + ' = ' + elseSnippet + ';';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\telseSnippet = 'return ' + elseSnippet + ';';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbuilder.removeFlowTab().addFlowCode( builder.tab + '\\t' + elseSnippet + '\\n\\n' + builder.tab + '}\\n\\n' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbuilder.addFlowCode( '\\n\\n' );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.format( nodeProperty, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CondNode;\r\n\r\nexport const cond = nodeProxy( CondNode );\r\n\r\naddNodeElement( 'cond', cond );\r\n\r\naddNodeClass( 'CondNode', CondNode );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport { cond } from '../math/CondNode.js';\r\nimport { ShaderNode, nodeProxy, getCurrentStack, setCurrentStack } from '../shadernode/ShaderNode.js';\r\n\r\nclass StackNode extends Node {\r\n\r\n\tconstructor( parent = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.nodes = [];\r\n\t\tthis.outputNode = null;\r\n\r\n\t\tthis.parent = parent;\r\n\r\n\t\tthis._currentCond = null;\r\n\r\n\t\tthis.isStackNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.outputNode ? this.outputNode.getNodeType( builder ) : 'void';\r\n\r\n\t}\r\n\r\n\tadd( node ) {\r\n\r\n\t\tthis.nodes.push( node );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tif( boolNode, method ) {\r\n\r\n\t\tconst methodNode = new ShaderNode( method );\r\n\t\tthis._currentCond = cond( boolNode, methodNode );\r\n\r\n\t\treturn this.add( this._currentCond );\r\n\r\n\t}\r\n\r\n\telseif( boolNode, method ) {\r\n\r\n\t\tconst methodNode = new ShaderNode( method );\r\n\t\tconst ifNode = cond( boolNode, methodNode );\r\n\r\n\t\tthis._currentCond.elseNode = ifNode;\r\n\t\tthis._currentCond = ifNode;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\telse( method ) {\r\n\r\n\t\tthis._currentCond.elseNode = new ShaderNode( method );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tbuild( builder, ...params ) {\r\n\r\n\t\tconst previousStack = getCurrentStack();\r\n\r\n\t\tsetCurrentStack( this );\r\n\r\n\t\tfor ( const node of this.nodes ) {\r\n\r\n\t\t\tnode.build( builder, 'void' );\r\n\r\n\t\t}\r\n\r\n\t\tsetCurrentStack( previousStack );\r\n\r\n\t\treturn this.outputNode ? this.outputNode.build( builder, ...params ) : super.build( builder, ...params );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StackNode;\r\n\r\nexport const stack = nodeProxy( StackNode );\r\n\r\naddNodeClass( 'StackNode', StackNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { positionWorldDirection } from '../accessors/PositionNode.js';\r\nimport { nodeProxy, vec2 } from '../shadernode/ShaderNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nclass EquirectUVNode extends TempNode {\r\n\r\n\tconstructor( dirNode = positionWorldDirection ) {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\tthis.dirNode = dirNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst dir = this.dirNode;\r\n\r\n\t\tconst u = dir.z.atan2( dir.x ).mul( 1 / ( Math.PI * 2 ) ).add( 0.5 );\r\n\t\tconst v = dir.y.clamp( - 1.0, 1.0 ).asin().mul( 1 / Math.PI ).add( 0.5 );\r\n\r\n\t\treturn vec2( u, v );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default EquirectUVNode;\r\n\r\nexport const equirectUV = nodeProxy( EquirectUVNode );\r\n\r\naddNodeClass( 'EquirectUVNode', EquirectUVNode );\r\n", "import { Vector3 } from './Vector3.js';\r\n\r\nclass Box3 {\r\n\r\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\r\n\r\n\t\tthis.isBox3 = true;\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tset( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromArray( array ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = array.length; i < il; i += 3 ) {\r\n\r\n\t\t\tthis.expandByPoint( _vector.fromArray( array, i ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromBufferAttribute( attribute ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( _vector.fromBufferAttribute( attribute, i ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCenterAndSize( center, size ) {\r\n\r\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromObject( object, precise = false ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\treturn this.expandByObject( object, precise );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisEmpty() {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t}\r\n\r\n\tgetCenter( target ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t}\r\n\r\n\tgetSize( target ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t}\r\n\r\n\texpandByPoint( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByVector( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByScalar( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByObject( object, precise = false ) {\r\n\r\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\tobject.updateWorldMatrix( false, false );\r\n\r\n\t\tconst geometry = object.geometry;\r\n\r\n\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\r\n\r\n\t\t\t// precise AABB computation based on vertex data requires at least a position attribute.\r\n\t\t\t// instancing isn't supported so far and uses the normal (conservative) code path.\r\n\r\n\t\t\tif ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {\r\n\r\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( object.isMesh === true ) {\r\n\r\n\t\t\t\t\t\tobject.getVertexPosition( i, _vector );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_vector.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_vector.applyMatrix4( object.matrixWorld );\r\n\t\t\t\t\tthis.expandByPoint( _vector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( object.boundingBox !== undefined ) {\r\n\r\n\t\t\t\t\t// object-level bounding box\r\n\r\n\t\t\t\t\tif ( object.boundingBox === null ) {\r\n\r\n\t\t\t\t\t\tobject.computeBoundingBox();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_box.copy( object.boundingBox );\r\n\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// geometry-level bounding box\r\n\r\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t\t\t\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_box.copy( geometry.boundingBox );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\t\tthis.union( _box );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst children = object.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.expandByObject( children[ i ], precise );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\r\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y &&\r\n\t\t\tpoint.z >= this.min.z && point.z <= this.max.z;\r\n\r\n\t}\r\n\r\n\tcontainsBox( box ) {\r\n\r\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\r\n\r\n\t}\r\n\r\n\tgetParameter( point, target ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn target.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\r\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y &&\r\n\t\t\tbox.max.z >= this.min.z && box.min.z <= this.max.z;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\tthis.clampPoint( sphere.center, _vector );\r\n\r\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\treturn _vector.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t}\r\n\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\tlet min, max;\r\n\r\n\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\r\n\r\n\t}\r\n\r\n\tintersectsTriangle( triangle ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// compute box center and extents\r\n\t\tthis.getCenter( _center );\r\n\t\t_extents.subVectors( this.max, _center );\r\n\r\n\t\t// translate triangle to aabb origin\r\n\t\t_v0.subVectors( triangle.a, _center );\r\n\t\t_v1.subVectors( triangle.b, _center );\r\n\t\t_v2.subVectors( triangle.c, _center );\r\n\r\n\t\t// compute edge vectors for triangle\r\n\t\t_f0.subVectors( _v1, _v0 );\r\n\t\t_f1.subVectors( _v2, _v1 );\r\n\t\t_f2.subVectors( _v0, _v2 );\r\n\r\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\t\tlet axes = [\r\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\r\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\r\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\r\n\t\t];\r\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// test 3 face normals from the aabb\r\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\r\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// finally testing the face normal of the triangle\r\n\t\t// use already existing triangle edge vectors here\r\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\r\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\r\n\r\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\r\n\r\n\t}\r\n\r\n\tclampPoint( point, target ) {\r\n\r\n\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn this.clampPoint( point, _vector ).distanceTo( point );\r\n\r\n\t}\r\n\r\n\tgetBoundingSphere( target ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\ttarget.makeEmpty();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.getCenter( target.center );\r\n\r\n\t\t\ttarget.radius = this.getSize( _vector ).length() * 0.5;\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tintersect( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\tif ( this.isEmpty() ) this.makeEmpty();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tunion( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\t// transform of empty box is an empty box.\r\n\t\tif ( this.isEmpty() ) return this;\r\n\r\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\r\n\r\n\t\tthis.setFromPoints( _points );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _points = [\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3()\r\n];\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nconst _box = /*@__PURE__*/ new Box3();\r\n\r\n// triangle centered vertices\r\n\r\nconst _v0 = /*@__PURE__*/ new Vector3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\n\r\n// triangle edge vectors\r\n\r\nconst _f0 = /*@__PURE__*/ new Vector3();\r\nconst _f1 = /*@__PURE__*/ new Vector3();\r\nconst _f2 = /*@__PURE__*/ new Vector3();\r\n\r\nconst _center = /*@__PURE__*/ new Vector3();\r\nconst _extents = /*@__PURE__*/ new Vector3();\r\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\r\nconst _testAxis = /*@__PURE__*/ new Vector3();\r\n\r\nfunction satForAxes( axes, v0, v1, v2, extents ) {\r\n\r\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\r\n\r\n\t\t_testAxis.fromArray( axes, i );\r\n\t\t// project the aabb onto the separating axis\r\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\r\n\t\t// project all 3 vertices of the triangle onto the separating axis\r\n\t\tconst p0 = v0.dot( _testAxis );\r\n\t\tconst p1 = v1.dot( _testAxis );\r\n\t\tconst p2 = v2.dot( _testAxis );\r\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\r\n\r\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\r\n\t\t\t// the axis is separating and we can exit\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nexport { Box3 };\r\n", "import { Box3 } from './Box3.js';\r\nimport { Vector3 } from './Vector3.js';\r\n\r\nconst _box = /*@__PURE__*/ new Box3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\n\r\nclass Sphere {\r\n\r\n\tconstructor( center = new Vector3(), radius = - 1 ) {\r\n\r\n\t\tthis.isSphere = true;\r\n\r\n\t\tthis.center = center;\r\n\t\tthis.radius = radius;\r\n\r\n\t}\r\n\r\n\tset( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points, optionalCenter ) {\r\n\r\n\t\tconst center = this.center;\r\n\r\n\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_box.setFromPoints( points ).getCenter( center );\r\n\r\n\t\t}\r\n\r\n\t\tlet maxRadiusSq = 0;\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisEmpty() {\r\n\r\n\t\treturn ( this.radius < 0 );\r\n\r\n\t}\r\n\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.center.set( 0, 0, 0 );\r\n\t\tthis.radius = - 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\tconst radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsSphere( this );\r\n\r\n\t}\r\n\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\r\n\r\n\t}\r\n\r\n\tclampPoint( point, target ) {\r\n\r\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\ttarget.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\ttarget.sub( this.center ).normalize();\r\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetBoundingBox( target ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\t// Empty sphere produces empty bounding box\r\n\t\t\ttarget.makeEmpty();\r\n\t\t\treturn target;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.set( this.center, this.center );\r\n\t\ttarget.expandByScalar( this.radius );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByPoint( point ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\tthis.center.copy( point );\r\n\r\n\t\t\tthis.radius = 0;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t_v1.subVectors( point, this.center );\r\n\r\n\t\tconst lengthSq = _v1.lengthSq();\r\n\r\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\t// calculate the minimal sphere\r\n\r\n\t\t\tconst length = Math.sqrt( lengthSq );\r\n\r\n\t\t\tconst delta = ( length - this.radius ) * 0.5;\r\n\r\n\t\t\tthis.center.addScaledVector( _v1, delta / length );\r\n\r\n\t\t\tthis.radius += delta;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tunion( sphere ) {\r\n\r\n\t\tif ( sphere.isEmpty() ) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\tthis.copy( sphere );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.center.equals( sphere.center ) === true ) {\r\n\r\n\t\t\t this.radius = Math.max( this.radius, sphere.radius );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_v2.subVectors( sphere.center, this.center ).setLength( sphere.radius );\r\n\r\n\t\t\tthis.expandByPoint( _v1.copy( sphere.center ).add( _v2 ) );\r\n\r\n\t\t\tthis.expandByPoint( _v1.copy( sphere.center ).sub( _v2 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Sphere };\r\n", "import { Vector3 } from './Vector3.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _segCenter = /*@__PURE__*/ new Vector3();\r\nconst _segDir = /*@__PURE__*/ new Vector3();\r\nconst _diff = /*@__PURE__*/ new Vector3();\r\n\r\nconst _edge1 = /*@__PURE__*/ new Vector3();\r\nconst _edge2 = /*@__PURE__*/ new Vector3();\r\nconst _normal = /*@__PURE__*/ new Vector3();\r\n\r\nclass Ray {\r\n\r\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\r\n\r\n\t\tthis.origin = origin;\r\n\t\tthis.direction = direction;\r\n\r\n\t}\r\n\r\n\tset( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tat( t, target ) {\r\n\r\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, t );\r\n\r\n\t}\r\n\r\n\tlookAt( v ) {\r\n\r\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trecast( t ) {\r\n\r\n\t\tthis.origin.copy( this.at( t, _vector ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( point, target ) {\r\n\r\n\t\ttarget.subVectors( point, this.origin );\r\n\r\n\t\tconst directionDistance = target.dot( this.direction );\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn target.copy( this.origin );\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t}\r\n\r\n\tdistanceSqToPoint( point ) {\r\n\r\n\t\tconst directionDistance = _vector.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t// point behind the ray\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t}\r\n\r\n\t\t_vector.copy( this.origin ).addScaledVector( this.direction, directionDistance );\r\n\r\n\t\treturn _vector.distanceToSquared( point );\r\n\r\n\t}\r\n\r\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t// It returns the min distance between the ray and the segment\r\n\t\t// defined by v0 and v1\r\n\t\t// It can also set two optional targets :\r\n\t\t// - The closest point on the ray\r\n\t\t// - The closest point on the segment\r\n\r\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t_diff.copy( this.origin ).sub( _segCenter );\r\n\r\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\tconst a01 = - this.direction.dot( _segDir );\r\n\t\tconst b0 = _diff.dot( this.direction );\r\n\t\tconst b1 = - _diff.dot( _segDir );\r\n\t\tconst c = _diff.lengthSq();\r\n\t\tconst det = Math.abs( 1 - a01 * a01 );\r\n\t\tlet s0, s1, sqrDist, extDet;\r\n\r\n\t\tif ( det > 0 ) {\r\n\r\n\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\textDet = segExtent * det;\r\n\r\n\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\tconst invDet = 1 / det;\r\n\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t}\r\n\r\n\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\toptionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\toptionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn sqrDist;\r\n\r\n\t}\r\n\r\n\tintersectSphere( sphere, target ) {\r\n\r\n\t\t_vector.subVectors( sphere.center, this.origin );\r\n\t\tconst tca = _vector.dot( this.direction );\r\n\t\tconst d2 = _vector.dot( _vector ) - tca * tca;\r\n\t\tconst radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\tif ( d2 > radius2 ) return null;\r\n\r\n\t\tconst thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\tconst t0 = tca - thc;\r\n\r\n\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\tconst t1 = tca + thc;\r\n\r\n\t\t// test to see if t1 is behind the ray - if so, return null\r\n\t\tif ( t1 < 0 ) return null;\r\n\r\n\t\t// test to see if t0 is behind the ray:\r\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\tif ( t0 < 0 ) return this.at( t1, target );\r\n\r\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\treturn this.at( t0, target );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t}\r\n\r\n\tdistanceToPlane( plane ) {\r\n\r\n\t\tconst denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t// Return if the ray never intersects the plane\r\n\r\n\t\treturn t >= 0 ? t : null;\r\n\r\n\t}\r\n\r\n\tintersectPlane( plane, target ) {\r\n\r\n\t\tconst t = this.distanceToPlane( plane );\r\n\r\n\t\tif ( t === null ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.at( t, target );\r\n\r\n\t}\r\n\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\t// check if the ray lies on the plane first\r\n\r\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tconst denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tintersectBox( box, target ) {\r\n\r\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\tconst invdirx = 1 / this.direction.x,\r\n\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\tconst origin = this.origin;\r\n\r\n\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t}\r\n\r\n\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\r\n\t\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\r\n\r\n\t\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\r\n\r\n\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\r\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\r\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\r\n\t\t//return point closest to the ray (positive side)\r\n\r\n\t\tif ( tmax < 0 ) return null;\r\n\r\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn this.intersectBox( box, _vector ) !== null;\r\n\r\n\t}\r\n\r\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\r\n\r\n\t\t// Compute the offset origin, edges, and normal.\r\n\r\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t_edge1.subVectors( b, a );\r\n\t\t_edge2.subVectors( c, a );\r\n\t\t_normal.crossVectors( _edge1, _edge2 );\r\n\r\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\tlet DdN = this.direction.dot( _normal );\r\n\t\tlet sign;\r\n\r\n\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\tsign = 1;\r\n\r\n\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\tsign = - 1;\r\n\t\t\tDdN = - DdN;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t_diff.subVectors( this.origin, a );\r\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\r\n\r\n\t\t// b1 < 0, no intersection\r\n\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\r\n\r\n\t\t// b2 < 0, no intersection\r\n\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// b1+b2 > 1, no intersection\r\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// Line intersects triangle, check if ray does.\r\n\t\tconst QdN = - sign * _diff.dot( _normal );\r\n\r\n\t\t// t < 0, no intersection\r\n\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// Ray intersects triangle.\r\n\t\treturn this.at( QdN / DdN, target );\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix4 ) {\r\n\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.transformDirection( matrix4 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Ray };\r\n", "import { Quaternion } from './Quaternion.js';\r\nimport { Matrix4 } from './Matrix4.js';\r\nimport { clamp } from './MathUtils.js';\r\n\r\nconst _matrix = /*@__PURE__*/ new Matrix4();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nclass Euler {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\r\n\r\n\t\tthis.isEuler = true;\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order;\r\n\r\n\t}\r\n\r\n\tget x() {\r\n\r\n\t\treturn this._x;\r\n\r\n\t}\r\n\r\n\tset x( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget y() {\r\n\r\n\t\treturn this._y;\r\n\r\n\t}\r\n\r\n\tset y( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget z() {\r\n\r\n\t\treturn this._z;\r\n\r\n\t}\r\n\r\n\tset z( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget order() {\r\n\r\n\t\treturn this._order;\r\n\r\n\t}\r\n\r\n\tset order( value ) {\r\n\r\n\t\tthis._order = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tset( x, y, z, order = this._order ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t}\r\n\r\n\tcopy( euler ) {\r\n\r\n\t\tthis._x = euler._x;\r\n\t\tthis._y = euler._y;\r\n\t\tthis._z = euler._z;\r\n\t\tthis._order = euler._order;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tconst te = m.elements;\r\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tswitch ( order ) {\r\n\r\n\t\t\tcase 'XYZ':\r\n\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YXZ':\r\n\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZXY':\r\n\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZYX':\r\n\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YZX':\r\n\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'XZY':\r\n\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tthis._order = order;\r\n\r\n\t\tif ( update === true ) this._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromQuaternion( q, order, update ) {\r\n\r\n\t\t_matrix.makeRotationFromQuaternion( q );\r\n\r\n\t\treturn this.setFromRotationMatrix( _matrix, order, update );\r\n\r\n\t}\r\n\r\n\tsetFromVector3( v, order = this._order ) {\r\n\r\n\t\treturn this.set( v.x, v.y, v.z, order );\r\n\r\n\t}\r\n\r\n\treorder( newOrder ) {\r\n\r\n\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\t_quaternion.setFromEuler( this );\r\n\r\n\t\treturn this.setFromQuaternion( _quaternion, newOrder );\r\n\r\n\t}\r\n\r\n\tequals( euler ) {\r\n\r\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t}\r\n\r\n\tfromArray( array ) {\r\n\r\n\t\tthis._x = array[ 0 ];\r\n\t\tthis._y = array[ 1 ];\r\n\t\tthis._z = array[ 2 ];\r\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t_onChange( callback ) {\r\n\r\n\t\tthis._onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_onChangeCallback() {}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this._x;\r\n\t\tyield this._y;\r\n\t\tyield this._z;\r\n\t\tyield this._order;\r\n\r\n\t}\r\n\r\n}\r\n\r\nEuler.DEFAULT_ORDER = 'XYZ';\r\n\r\nexport { Euler };\r\n", "class Layers {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.mask = 1 | 0;\r\n\r\n\t}\r\n\r\n\tset( channel ) {\r\n\r\n\t\tthis.mask = ( 1 << channel | 0 ) >>> 0;\r\n\r\n\t}\r\n\r\n\tenable( channel ) {\r\n\r\n\t\tthis.mask |= 1 << channel | 0;\r\n\r\n\t}\r\n\r\n\tenableAll() {\r\n\r\n\t\tthis.mask = 0xffffffff | 0;\r\n\r\n\t}\r\n\r\n\ttoggle( channel ) {\r\n\r\n\t\tthis.mask ^= 1 << channel | 0;\r\n\r\n\t}\r\n\r\n\tdisable( channel ) {\r\n\r\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\r\n\r\n\t}\r\n\r\n\tdisableAll() {\r\n\r\n\t\tthis.mask = 0;\r\n\r\n\t}\r\n\r\n\ttest( layers ) {\r\n\r\n\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t}\r\n\r\n\tisEnabled( channel ) {\r\n\r\n\t\treturn ( this.mask & ( 1 << channel | 0 ) ) !== 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Layers };\r\n", "import { Quaternion } from '../math/Quaternion.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { EventDispatcher } from './EventDispatcher.js';\r\nimport { Euler } from '../math/Euler.js';\r\nimport { Layers } from './Layers.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nlet _object3DId = 0;\r\n\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _q1 = /*@__PURE__*/ new Quaternion();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _target = /*@__PURE__*/ new Vector3();\r\n\r\nconst _position = /*@__PURE__*/ new Vector3();\r\nconst _scale = /*@__PURE__*/ new Vector3();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\r\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\r\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\r\n\r\nconst _addedEvent = { type: 'added' };\r\nconst _removedEvent = { type: 'removed' };\r\n\r\nconst _childaddedEvent = { type: 'childadded', child: null };\r\nconst _childremovedEvent = { type: 'childremoved', child: null };\r\n\r\nclass Object3D extends EventDispatcher {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isObject3D = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Object3D';\r\n\r\n\t\tthis.parent = null;\r\n\t\tthis.children = [];\r\n\r\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\r\n\r\n\t\tconst position = new Vector3();\r\n\t\tconst rotation = new Euler();\r\n\t\tconst quaternion = new Quaternion();\r\n\t\tconst scale = new Vector3( 1, 1, 1 );\r\n\r\n\t\tfunction onRotationChange() {\r\n\r\n\t\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onQuaternionChange() {\r\n\r\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t\t}\r\n\r\n\t\trotation._onChange( onRotationChange );\r\n\t\tquaternion._onChange( onQuaternionChange );\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tposition: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: position\r\n\t\t\t},\r\n\t\t\trotation: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: rotation\r\n\t\t\t},\r\n\t\t\tquaternion: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: quaternion\r\n\t\t\t},\r\n\t\t\tscale: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: scale\r\n\t\t\t},\r\n\t\t\tmodelViewMatrix: {\r\n\t\t\t\tvalue: new Matrix4()\r\n\t\t\t},\r\n\t\t\tnormalMatrix: {\r\n\t\t\t\tvalue: new Matrix3()\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.matrixWorld = new Matrix4();\r\n\r\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\r\n\r\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tthis.layers = new Layers();\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.castShadow = false;\r\n\t\tthis.receiveShadow = false;\r\n\r\n\t\tthis.frustumCulled = true;\r\n\t\tthis.renderOrder = 0;\r\n\r\n\t\tthis.animations = [];\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tonBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\r\n\r\n\tonAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\r\n\r\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\r\n\r\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tthis.matrix.premultiply( matrix );\r\n\r\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t}\r\n\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\tthis.quaternion.premultiply( q );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetRotationFromAxisAngle( axis, angle ) {\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t}\r\n\r\n\tsetRotationFromEuler( euler ) {\r\n\r\n\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t}\r\n\r\n\tsetRotationFromMatrix( m ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t}\r\n\r\n\tsetRotationFromQuaternion( q ) {\r\n\r\n\t\t// assumes q is normalized\r\n\r\n\t\tthis.quaternion.copy( q );\r\n\r\n\t}\r\n\r\n\trotateOnAxis( axis, angle ) {\r\n\r\n\t\t// rotate object on axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.quaternion.multiply( _q1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateOnWorldAxis( axis, angle ) {\r\n\r\n\t\t// rotate object on axis in world space\r\n\t\t// axis is assumed to be normalized\r\n\t\t// method assumes no rotated parent\r\n\r\n\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.quaternion.premultiply( _q1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateX( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _xAxis, angle );\r\n\r\n\t}\r\n\r\n\trotateY( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _yAxis, angle );\r\n\r\n\t}\r\n\r\n\trotateZ( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _zAxis, angle );\r\n\r\n\t}\r\n\r\n\ttranslateOnAxis( axis, distance ) {\r\n\r\n\t\t// translate object by distance along axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\t_v1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\tthis.position.add( _v1.multiplyScalar( distance ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslateX( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _xAxis, distance );\r\n\r\n\t}\r\n\r\n\ttranslateY( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _yAxis, distance );\r\n\r\n\t}\r\n\r\n\ttranslateZ( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _zAxis, distance );\r\n\r\n\t}\r\n\r\n\tlocalToWorld( vector ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t}\r\n\r\n\tworldToLocal( vector ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\treturn vector.applyMatrix4( _m1.copy( this.matrixWorld ).invert() );\r\n\r\n\t}\r\n\r\n\tlookAt( x, y, z ) {\r\n\r\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t_target.copy( x );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_target.set( x, y, z );\r\n\r\n\t\t}\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t_position.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\tif ( this.isCamera || this.isLight ) {\r\n\r\n\t\t\t_m1.lookAt( _position, _target, this.up );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_m1.lookAt( _target, _position, this.up );\r\n\r\n\t\t}\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\tif ( parent ) {\r\n\r\n\t\t\t_m1.extractRotation( parent.matrixWorld );\r\n\t\t\t_q1.setFromRotationMatrix( _m1 );\r\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tadd( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object && object.isObject3D ) {\r\n\r\n\t\t\tobject.removeFromParent();\r\n\t\t\tobject.parent = this;\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t\tobject.dispatchEvent( _addedEvent );\r\n\r\n\t\t\t_childaddedEvent.child = object;\r\n\t\t\tthis.dispatchEvent( _childaddedEvent );\r\n\t\t\t_childaddedEvent.child = null;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremove( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = null;\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\tobject.dispatchEvent( _removedEvent );\r\n\r\n\t\t\t_childremovedEvent.child = object;\r\n\t\t\tthis.dispatchEvent( _childremovedEvent );\r\n\t\t\t_childremovedEvent.child = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tremoveFromParent() {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tparent.remove( this );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclear() {\r\n\r\n\t\treturn this.remove( ... this.children );\r\n\r\n\t}\r\n\r\n\tattach( object ) {\r\n\r\n\t\t// adds object as a child of this, while maintaining the object's world transform\r\n\r\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t_m1.copy( this.matrixWorld ).invert();\r\n\r\n\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\tobject.parent.updateWorldMatrix( true, false );\r\n\r\n\t\t\t_m1.multiply( object.parent.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tobject.applyMatrix4( _m1 );\r\n\r\n\t\tobject.removeFromParent();\r\n\t\tobject.parent = this;\r\n\t\tthis.children.push( object );\r\n\r\n\t\tobject.updateWorldMatrix( false, true );\r\n\r\n\t\tobject.dispatchEvent( _addedEvent );\r\n\r\n\t\t_childaddedEvent.child = object;\r\n\t\tthis.dispatchEvent( _childaddedEvent );\r\n\t\t_childaddedEvent.child = null;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetObjectById( id ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t}\r\n\r\n\tgetObjectByName( name ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t}\r\n\r\n\tgetObjectByProperty( name, value ) {\r\n\r\n\t\tif ( this[ name ] === value ) return this;\r\n\r\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst child = this.children[ i ];\r\n\t\t\tconst object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\treturn object;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n\tgetObjectsByProperty( name, value, result = [] ) {\r\n\r\n\t\tif ( this[ name ] === value ) result.push( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].getObjectsByProperty( name, value, result );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tgetWorldPosition( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t}\r\n\r\n\tgetWorldQuaternion( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tthis.matrixWorld.decompose( _position, target, _scale );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetWorldScale( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tthis.matrixWorld.decompose( _position, _quaternion, target );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetWorldDirection( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tconst e = this.matrixWorld.elements;\r\n\r\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\r\n\r\n\t}\r\n\r\n\traycast( /* raycaster, intersects */ ) {}\r\n\r\n\ttraverse( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttraverseVisible( callback ) {\r\n\r\n\t\tif ( this.visible === false ) return;\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttraverseAncestors( callback ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tcallback( parent );\r\n\r\n\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMatrix() {\r\n\r\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\t\tif ( this.matrixWorldAutoUpdate === true ) {\r\n\r\n\t\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// make sure descendants are updated if required\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst child = children[ i ];\r\n\r\n\t\t\tchild.updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateWorldMatrix( updateParents, updateChildren ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( updateParents === true && parent !== null ) {\r\n\r\n\t\t\tparent.updateWorldMatrix( true, false );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldAutoUpdate === true ) {\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// make sure descendants are updated\r\n\r\n\t\tif ( updateChildren === true ) {\r\n\r\n\t\t\tconst children = this.children;\r\n\r\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst child = children[ i ];\r\n\r\n\t\t\t\tchild.updateWorldMatrix( false, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\t// meta is a string when called from JSON.stringify\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tconst output = {};\r\n\r\n\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t// not providing it implies that this is the root object\r\n\t\t// being serialized.\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\t// initialize meta obj\r\n\t\t\tmeta = {\r\n\t\t\t\tgeometries: {},\r\n\t\t\t\tmaterials: {},\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tshapes: {},\r\n\t\t\t\tskeletons: {},\r\n\t\t\t\tanimations: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t\toutput.metadata = {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'Object',\r\n\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// standard Object3D serialization\r\n\r\n\t\tconst object = {};\r\n\r\n\t\tobject.uuid = this.uuid;\r\n\t\tobject.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\tif ( this.visible === false ) object.visible = false;\r\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\r\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\r\n\r\n\t\tobject.layers = this.layers.mask;\r\n\t\tobject.matrix = this.matrix.toArray();\r\n\t\tobject.up = this.up.toArray();\r\n\r\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\r\n\r\n\t\t// object specific properties\r\n\r\n\t\tif ( this.isInstancedMesh ) {\r\n\r\n\t\t\tobject.type = 'InstancedMesh';\r\n\t\t\tobject.count = this.count;\r\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\r\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isBatchedMesh ) {\r\n\r\n\t\t\tobject.type = 'BatchedMesh';\r\n\t\t\tobject.perObjectFrustumCulled = this.perObjectFrustumCulled;\r\n\t\t\tobject.sortObjects = this.sortObjects;\r\n\r\n\t\t\tobject.drawRanges = this._drawRanges;\r\n\t\t\tobject.reservedRanges = this._reservedRanges;\r\n\r\n\t\t\tobject.visibility = this._visibility;\r\n\t\t\tobject.active = this._active;\r\n\t\t\tobject.bounds = this._bounds.map( bound => ( {\r\n\t\t\t\tboxInitialized: bound.boxInitialized,\r\n\t\t\t\tboxMin: bound.box.min.toArray(),\r\n\t\t\t\tboxMax: bound.box.max.toArray(),\r\n\r\n\t\t\t\tsphereInitialized: bound.sphereInitialized,\r\n\t\t\t\tsphereRadius: bound.sphere.radius,\r\n\t\t\t\tsphereCenter: bound.sphere.center.toArray()\r\n\t\t\t} ) );\r\n\r\n\t\t\tobject.maxInstanceCount = this._maxInstanceCount;\r\n\t\t\tobject.maxVertexCount = this._maxVertexCount;\r\n\t\t\tobject.maxIndexCount = this._maxIndexCount;\r\n\r\n\t\t\tobject.geometryInitialized = this._geometryInitialized;\r\n\t\t\tobject.geometryCount = this._geometryCount;\r\n\r\n\t\t\tobject.matricesTexture = this._matricesTexture.toJSON( meta );\r\n\r\n\t\t\tif ( this._colorsTexture !== null ) object.colorsTexture = this._colorsTexture.toJSON( meta );\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tobject.boundingSphere = {\r\n\t\t\t\t\tcenter: object.boundingSphere.center.toArray(),\r\n\t\t\t\t\tradius: object.boundingSphere.radius\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tobject.boundingBox = {\r\n\t\t\t\t\tmin: object.boundingBox.min.toArray(),\r\n\t\t\t\t\tmax: object.boundingBox.max.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction serialize( library, element ) {\r\n\r\n\t\t\tif ( library[ element.uuid ] === undefined ) {\r\n\r\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn element.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isScene ) {\r\n\r\n\t\t\tif ( this.background ) {\r\n\r\n\t\t\t\tif ( this.background.isColor ) {\r\n\r\n\t\t\t\t\tobject.background = this.background.toJSON();\r\n\r\n\t\t\t\t} else if ( this.background.isTexture ) {\r\n\r\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\r\n\r\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\r\n\r\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\r\n\r\n\t\t\tconst parameters = this.geometry.parameters;\r\n\r\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\r\n\r\n\t\t\t\tconst shapes = parameters.shapes;\r\n\r\n\t\t\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst shape = shapes[ i ];\r\n\r\n\t\t\t\t\t\tserialize( meta.shapes, shape );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tserialize( meta.shapes, shapes );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isSkinnedMesh ) {\r\n\r\n\t\t\tobject.bindMode = this.bindMode;\r\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\r\n\r\n\t\t\tif ( this.skeleton !== undefined ) {\r\n\r\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\r\n\r\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\tif ( Array.isArray( this.material ) ) {\r\n\r\n\t\t\t\tconst uuids = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.material = uuids;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\tobject.children = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.animations.length > 0 ) {\r\n\r\n\t\t\tobject.animations = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\r\n\r\n\t\t\t\tconst animation = this.animations[ i ];\r\n\r\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tconst geometries = extractFromCache( meta.geometries );\r\n\t\t\tconst materials = extractFromCache( meta.materials );\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst shapes = extractFromCache( meta.shapes );\r\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\r\n\t\t\tconst animations = extractFromCache( meta.animations );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\tif ( images.length > 0 ) output.images = images;\r\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\r\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\r\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\r\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\toutput.object = object;\r\n\r\n\t\treturn output;\r\n\r\n\t\t// extract data from the cache hash\r\n\t\t// remove metadata on each item\r\n\t\t// and return as array\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone( recursive ) {\r\n\r\n\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive = true ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.up.copy( source.up );\r\n\r\n\t\tthis.position.copy( source.position );\r\n\t\tthis.rotation.order = source.rotation.order;\r\n\t\tthis.quaternion.copy( source.quaternion );\r\n\t\tthis.scale.copy( source.scale );\r\n\r\n\t\tthis.matrix.copy( source.matrix );\r\n\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\tthis.layers.mask = source.layers.mask;\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.castShadow = source.castShadow;\r\n\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\tthis.animations = source.animations.slice();\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\tconst child = source.children[ i ];\r\n\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\r\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\r\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\r\n\r\nexport { Object3D };\r\n", "import { Vector3 } from './Vector3.js';\r\n\r\nconst _v0 = /*@__PURE__*/ new Vector3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\nconst _v3 = /*@__PURE__*/ new Vector3();\r\n\r\nconst _vab = /*@__PURE__*/ new Vector3();\r\nconst _vac = /*@__PURE__*/ new Vector3();\r\nconst _vbc = /*@__PURE__*/ new Vector3();\r\nconst _vap = /*@__PURE__*/ new Vector3();\r\nconst _vbp = /*@__PURE__*/ new Vector3();\r\nconst _vcp = /*@__PURE__*/ new Vector3();\r\n\r\nclass Triangle {\r\n\r\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\r\n\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\r\n\t}\r\n\r\n\tstatic getNormal( a, b, c, target ) {\r\n\r\n\t\ttarget.subVectors( c, b );\r\n\t\t_v0.subVectors( a, b );\r\n\t\ttarget.cross( _v0 );\r\n\r\n\t\tconst targetLengthSq = target.lengthSq();\r\n\t\tif ( targetLengthSq > 0 ) {\r\n\r\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn target.set( 0, 0, 0 );\r\n\r\n\t}\r\n\r\n\t// static/instance method to calculate barycentric coordinates\r\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\tstatic getBarycoord( point, a, b, c, target ) {\r\n\r\n\t\t_v0.subVectors( c, a );\r\n\t\t_v1.subVectors( b, a );\r\n\t\t_v2.subVectors( point, a );\r\n\r\n\t\tconst dot00 = _v0.dot( _v0 );\r\n\t\tconst dot01 = _v0.dot( _v1 );\r\n\t\tconst dot02 = _v0.dot( _v2 );\r\n\t\tconst dot11 = _v1.dot( _v1 );\r\n\t\tconst dot12 = _v1.dot( _v2 );\r\n\r\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\t// collinear or singular triangle\r\n\t\tif ( denom === 0 ) {\r\n\r\n\t\t\ttarget.set( 0, 0, 0 );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst invDenom = 1 / denom;\r\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t// barycentric coordinates must always sum to 1\r\n\t\treturn target.set( 1 - u - v, v, u );\r\n\r\n\t}\r\n\r\n\tstatic containsPoint( point, a, b, c ) {\r\n\r\n\t\t// if the triangle is degenerate then we can't contain a point\r\n\t\tif ( this.getBarycoord( point, a, b, c, _v3 ) === null ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\r\n\r\n\t}\r\n\r\n\tstatic getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {\r\n\r\n\t\tif ( this.getBarycoord( point, p1, p2, p3, _v3 ) === null ) {\r\n\r\n\t\t\ttarget.x = 0;\r\n\t\t\ttarget.y = 0;\r\n\t\t\tif ( 'z' in target ) target.z = 0;\r\n\t\t\tif ( 'w' in target ) target.w = 0;\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.setScalar( 0 );\r\n\t\ttarget.addScaledVector( v1, _v3.x );\r\n\t\ttarget.addScaledVector( v2, _v3.y );\r\n\t\ttarget.addScaledVector( v3, _v3.z );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tstatic isFrontFacing( a, b, c, direction ) {\r\n\r\n\t\t_v0.subVectors( c, b );\r\n\t\t_v1.subVectors( a, b );\r\n\r\n\t\t// strictly front facing\r\n\t\treturn ( _v0.cross( _v1 ).dot( direction ) < 0 ) ? true : false;\r\n\r\n\t}\r\n\r\n\tset( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[ i0 ] );\r\n\t\tthis.b.copy( points[ i1 ] );\r\n\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\r\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\r\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetArea() {\r\n\r\n\t\t_v0.subVectors( this.c, this.b );\r\n\t\t_v1.subVectors( this.a, this.b );\r\n\r\n\t\treturn _v0.cross( _v1 ).length() * 0.5;\r\n\r\n\t}\r\n\r\n\tgetMidpoint( target ) {\r\n\r\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t}\r\n\r\n\tgetNormal( target ) {\r\n\r\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\r\n\r\n\t}\r\n\r\n\tgetPlane( target ) {\r\n\r\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t}\r\n\r\n\tgetBarycoord( point, target ) {\r\n\r\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\r\n\r\n\t}\r\n\r\n\tgetInterpolation( point, v1, v2, v3, target ) {\r\n\r\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t}\r\n\r\n\tisFrontFacing( direction ) {\r\n\r\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsTriangle( this );\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( p, target ) {\r\n\r\n\t\tconst a = this.a, b = this.b, c = this.c;\r\n\t\tlet v, w;\r\n\r\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\r\n\t\t// the point lies in with the minimum amount of redundant computation.\r\n\r\n\t\t_vab.subVectors( b, a );\r\n\t\t_vac.subVectors( c, a );\r\n\t\t_vap.subVectors( p, a );\r\n\t\tconst d1 = _vab.dot( _vap );\r\n\t\tconst d2 = _vac.dot( _vap );\r\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\r\n\r\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\r\n\t\t\treturn target.copy( a );\r\n\r\n\t\t}\r\n\r\n\t\t_vbp.subVectors( p, b );\r\n\t\tconst d3 = _vab.dot( _vbp );\r\n\t\tconst d4 = _vac.dot( _vbp );\r\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\r\n\r\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\r\n\t\t\treturn target.copy( b );\r\n\r\n\t\t}\r\n\r\n\t\tconst vc = d1 * d4 - d3 * d2;\r\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\r\n\r\n\t\t\tv = d1 / ( d1 - d3 );\r\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\r\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\r\n\r\n\t\t}\r\n\r\n\t\t_vcp.subVectors( p, c );\r\n\t\tconst d5 = _vab.dot( _vcp );\r\n\t\tconst d6 = _vac.dot( _vcp );\r\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\r\n\r\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\r\n\t\t\treturn target.copy( c );\r\n\r\n\t\t}\r\n\r\n\t\tconst vb = d5 * d2 - d1 * d6;\r\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\r\n\r\n\t\t\tw = d2 / ( d2 - d6 );\r\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\r\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\r\n\r\n\t\t}\r\n\r\n\t\tconst va = d3 * d6 - d5 * d4;\r\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\r\n\r\n\t\t\t_vbc.subVectors( c, b );\r\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\r\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\r\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\r\n\r\n\t\t}\r\n\r\n\t\t// face region\r\n\t\tconst denom = 1 / ( va + vb + vc );\r\n\t\t// u = va * denom\r\n\t\tv = vb * denom;\r\n\t\tw = vc * denom;\r\n\r\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\r\n\r\n\t}\r\n\r\n\tequals( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Triangle };\r\n", "import { Material } from './Material.js';\r\nimport { MultiplyOperation } from '../constants.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nclass MeshBasicMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshBasicMaterial = true;\r\n\r\n\t\tthis.type = 'MeshBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // emissive\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapRotation = new Euler();\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapRotation.copy( source.envMapRotation );\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshBasicMaterial };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Box3 } from '../math/Box3.js';\r\nimport { EventDispatcher } from './EventDispatcher.js';\r\nimport { BufferAttribute, Float32BufferAttribute, Uint16BufferAttribute, Uint32BufferAttribute } from './BufferAttribute.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { Object3D } from './Object3D.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { arrayNeedsUint32 } from '../utils.js';\r\n\r\nlet _id = 0;\r\n\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _obj = /*@__PURE__*/ new Object3D();\r\nconst _offset = /*@__PURE__*/ new Vector3();\r\nconst _box = /*@__PURE__*/ new Box3();\r\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nclass BufferGeometry extends EventDispatcher {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isBufferGeometry = true;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'BufferGeometry';\r\n\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\r\n\t\tthis.morphAttributes = {};\r\n\t\tthis.morphTargetsRelative = false;\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tgetIndex() {\r\n\r\n\t\treturn this.index;\r\n\r\n\t}\r\n\r\n\tsetIndex( index ) {\r\n\r\n\t\tif ( Array.isArray( index ) ) {\r\n\r\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.index = index;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetAttribute( name ) {\r\n\r\n\t\treturn this.attributes[ name ];\r\n\r\n\t}\r\n\r\n\tsetAttribute( name, attribute ) {\r\n\r\n\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdeleteAttribute( name ) {\r\n\r\n\t\tdelete this.attributes[ name ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\thasAttribute( name ) {\r\n\r\n\t\treturn this.attributes[ name ] !== undefined;\r\n\r\n\t}\r\n\r\n\taddGroup( start, count, materialIndex = 0 ) {\r\n\r\n\t\tthis.groups.push( {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tcount: count,\r\n\t\t\tmaterialIndex: materialIndex\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tclearGroups() {\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t}\r\n\r\n\tsetDrawRange( start, count ) {\r\n\r\n\t\tthis.drawRange.start = start;\r\n\t\tthis.drawRange.count = count;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tconst position = this.attributes.position;\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tposition.applyMatrix4( matrix );\r\n\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tconst normal = this.attributes.normal;\r\n\r\n\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\r\n\r\n\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tconst tangent = this.attributes.tangent;\r\n\r\n\t\tif ( tangent !== undefined ) {\r\n\r\n\t\t\ttangent.transformDirection( matrix );\r\n\r\n\t\t\ttangent.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\t_m1.makeRotationFromQuaternion( q );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateX( angle ) {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\t_m1.makeRotationX( angle );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateY( angle ) {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\t_m1.makeRotationY( angle );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotateZ( angle ) {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\t_m1.makeRotationZ( angle );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( x, y, z ) {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\t_m1.makeTranslation( x, y, z );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tscale( x, y, z ) {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\t_m1.makeScale( x, y, z );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlookAt( vector ) {\r\n\r\n\t\t_obj.lookAt( vector );\r\n\r\n\t\t_obj.updateMatrix();\r\n\r\n\t\tthis.applyMatrix4( _obj.matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcenter() {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tthis.boundingBox.getCenter( _offset ).negate();\r\n\r\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tconst position = [];\r\n\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = points[ i ];\r\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tconst position = this.attributes.position;\r\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\tif ( position && position.isGLBufferAttribute ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );\r\n\r\n\t\t\tthis.boundingBox.set(\r\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\r\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\r\n\t\t\t);\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\r\n\r\n\t\t\t// process morph attributes if present\r\n\r\n\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t_box.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t_vector.addVectors( this.boundingBox.min, _box.min );\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t\t_vector.addVectors( this.boundingBox.max, _box.max );\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box.min );\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box.max );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeBoundingSphere() {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tconst position = this.attributes.position;\r\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\tif ( position && position.isGLBufferAttribute ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );\r\n\r\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( position ) {\r\n\r\n\t\t\t// first, find the center of the bounding sphere\r\n\r\n\t\t\tconst center = this.boundingSphere.center;\r\n\r\n\t\t\t_box.setFromBufferAttribute( position );\r\n\r\n\t\t\t// process morph attributes if present\r\n\r\n\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t_vector.addVectors( _box.min, _boxMorphTargets.min );\r\n\t\t\t\t\t\t_box.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t\t_vector.addVectors( _box.max, _boxMorphTargets.max );\r\n\t\t\t\t\t\t_box.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_box.expandByPoint( _boxMorphTargets.min );\r\n\t\t\t\t\t\t_box.expandByPoint( _boxMorphTargets.max );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_box.getCenter( center );\r\n\r\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\r\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\tlet maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t_vector.fromBufferAttribute( position, i );\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// process morph attributes if present\r\n\r\n\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t_vector.fromBufferAttribute( morphAttribute, j );\r\n\r\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\r\n\t\t\t\t\t\t\t_vector.add( _offset );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeTangents() {\r\n\r\n\t\tconst index = this.index;\r\n\t\tconst attributes = this.attributes;\r\n\r\n\t\t// based on http://www.terathon.com/code/tangent.html\r\n\t\t// (per vertex tangents)\r\n\r\n\t\tif ( index === null ||\r\n\t\t\t attributes.position === undefined ||\r\n\t\t\t attributes.normal === undefined ||\r\n\t\t\t attributes.uv === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tconst positionAttribute = attributes.position;\r\n\t\tconst normalAttribute = attributes.normal;\r\n\t\tconst uvAttribute = attributes.uv;\r\n\r\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\r\n\r\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * positionAttribute.count ), 4 ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst tangentAttribute = this.getAttribute( 'tangent' );\r\n\r\n\t\tconst tan1 = [], tan2 = [];\r\n\r\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\r\n\r\n\t\t\ttan1[ i ] = new Vector3();\r\n\t\t\ttan2[ i ] = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tconst vA = new Vector3(),\r\n\t\t\tvB = new Vector3(),\r\n\t\t\tvC = new Vector3(),\r\n\r\n\t\t\tuvA = new Vector2(),\r\n\t\t\tuvB = new Vector2(),\r\n\t\t\tuvC = new Vector2(),\r\n\r\n\t\t\tsdir = new Vector3(),\r\n\t\t\ttdir = new Vector3();\r\n\r\n\t\tfunction handleTriangle( a, b, c ) {\r\n\r\n\t\t\tvA.fromBufferAttribute( positionAttribute, a );\r\n\t\t\tvB.fromBufferAttribute( positionAttribute, b );\r\n\t\t\tvC.fromBufferAttribute( positionAttribute, c );\r\n\r\n\t\t\tuvA.fromBufferAttribute( uvAttribute, a );\r\n\t\t\tuvB.fromBufferAttribute( uvAttribute, b );\r\n\t\t\tuvC.fromBufferAttribute( uvAttribute, c );\r\n\r\n\t\t\tvB.sub( vA );\r\n\t\t\tvC.sub( vA );\r\n\r\n\t\t\tuvB.sub( uvA );\r\n\t\t\tuvC.sub( uvA );\r\n\r\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\r\n\r\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\r\n\r\n\t\t\tif ( ! isFinite( r ) ) return;\r\n\r\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\r\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\r\n\r\n\t\t\ttan1[ a ].add( sdir );\r\n\t\t\ttan1[ b ].add( sdir );\r\n\t\t\ttan1[ c ].add( sdir );\r\n\r\n\t\t\ttan2[ a ].add( tdir );\r\n\t\t\ttan2[ b ].add( tdir );\r\n\t\t\ttan2[ c ].add( tdir );\r\n\r\n\t\t}\r\n\r\n\t\tlet groups = this.groups;\r\n\r\n\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\tgroups = [ {\r\n\t\t\t\tstart: 0,\r\n\t\t\t\tcount: index.count\r\n\t\t\t} ];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\r\n\t\t\tconst start = group.start;\r\n\t\t\tconst count = group.count;\r\n\r\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\thandleTriangle(\r\n\t\t\t\t\tindex.getX( j + 0 ),\r\n\t\t\t\t\tindex.getX( j + 1 ),\r\n\t\t\t\t\tindex.getX( j + 2 )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\r\n\t\tconst n = new Vector3(), n2 = new Vector3();\r\n\r\n\t\tfunction handleVertex( v ) {\r\n\r\n\t\t\tn.fromBufferAttribute( normalAttribute, v );\r\n\t\t\tn2.copy( n );\r\n\r\n\t\t\tconst t = tan1[ v ];\r\n\r\n\t\t\t// Gram-Schmidt orthogonalize\r\n\r\n\t\t\ttmp.copy( t );\r\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\r\n\r\n\t\t\t// Calculate handedness\r\n\r\n\t\t\ttmp2.crossVectors( n2, t );\r\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\r\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\r\n\r\n\t\t\ttangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\r\n\t\t\tconst start = group.start;\r\n\t\t\tconst count = group.count;\r\n\r\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\thandleVertex( index.getX( j + 0 ) );\r\n\t\t\t\thandleVertex( index.getX( j + 1 ) );\r\n\t\t\t\thandleVertex( index.getX( j + 2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeVertexNormals() {\r\n\r\n\t\tconst index = this.index;\r\n\t\tconst positionAttribute = this.getAttribute( 'position' );\r\n\r\n\t\tif ( positionAttribute !== undefined ) {\r\n\r\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\r\n\r\n\t\t\tif ( normalAttribute === undefined ) {\r\n\r\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\r\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\r\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\r\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tconst vA = index.getX( i + 0 );\r\n\t\t\t\t\tconst vB = index.getX( i + 1 );\r\n\t\t\t\t\tconst vC = index.getX( i + 2 );\r\n\r\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\r\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\r\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\r\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\r\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\r\n\r\n\t\t\t\t\tnA.add( cb );\r\n\t\t\t\t\tnB.add( cb );\r\n\t\t\t\t\tnC.add( cb );\r\n\r\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\r\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\r\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tnormalAttribute.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tnormalizeNormals() {\r\n\r\n\t\tconst normals = this.attributes.normal;\r\n\r\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( normals, i );\r\n\r\n\t\t\t_vector.normalize();\r\n\r\n\t\t\tnormals.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoNonIndexed() {\r\n\r\n\t\tfunction convertBufferAttribute( attribute, indices ) {\r\n\r\n\t\t\tconst array = attribute.array;\r\n\t\t\tconst itemSize = attribute.itemSize;\r\n\t\t\tconst normalized = attribute.normalized;\r\n\r\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\tlet index = 0, index2 = 0;\r\n\r\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.index === null ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry2 = new BufferGeometry();\r\n\r\n\t\tconst indices = this.index.array;\r\n\t\tconst attributes = this.attributes;\r\n\r\n\t\t// attributes\r\n\r\n\t\tfor ( const name in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ name ];\r\n\r\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\tgeometry2.setAttribute( name, newAttribute );\r\n\r\n\t\t}\r\n\r\n\t\t// morph attributes\r\n\r\n\t\tconst morphAttributes = this.morphAttributes;\r\n\r\n\t\tfor ( const name in morphAttributes ) {\r\n\r\n\t\t\tconst morphArray = [];\r\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst attribute = morphAttribute[ i ];\r\n\r\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\t\tmorphArray.push( newAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t// groups\r\n\r\n\t\tconst groups = this.groups;\r\n\r\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry2;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard BufferGeometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tconst parameters = this.parameters;\r\n\r\n\t\t\tfor ( const key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\r\n\r\n\t\tdata.data = { attributes: {} };\r\n\r\n\t\tconst index = this.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tdata.data.index = {\r\n\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst attributes = this.attributes;\r\n\r\n\t\tfor ( const key in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ key ];\r\n\r\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\r\n\r\n\t\t}\r\n\r\n\t\tconst morphAttributes = {};\r\n\t\tlet hasMorphAttributes = false;\r\n\r\n\t\tfor ( const key in this.morphAttributes ) {\r\n\r\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\r\n\r\n\t\t\tconst array = [];\r\n\r\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst attribute = attributeArray[ i ];\r\n\r\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( array.length > 0 ) {\r\n\r\n\t\t\t\tmorphAttributes[ key ] = array;\r\n\r\n\t\t\t\thasMorphAttributes = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( hasMorphAttributes ) {\r\n\r\n\t\t\tdata.data.morphAttributes = morphAttributes;\r\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t}\r\n\r\n\t\tconst groups = this.groups;\r\n\r\n\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst boundingSphere = this.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\t// reset\r\n\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\t\tthis.morphAttributes = {};\r\n\t\tthis.groups = [];\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// used for storing cloned, shared data\r\n\r\n\t\tconst data = {};\r\n\r\n\t\t// name\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\t// index\r\n\r\n\t\tconst index = source.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tthis.setIndex( index.clone( data ) );\r\n\r\n\t\t}\r\n\r\n\t\t// attributes\r\n\r\n\t\tconst attributes = source.attributes;\r\n\r\n\t\tfor ( const name in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ name ];\r\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\r\n\r\n\t\t}\r\n\r\n\t\t// morph attributes\r\n\r\n\t\tconst morphAttributes = source.morphAttributes;\r\n\r\n\t\tfor ( const name in morphAttributes ) {\r\n\r\n\t\t\tconst array = [];\r\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t}\r\n\r\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\r\n\r\n\t\t// groups\r\n\r\n\t\tconst groups = source.groups;\r\n\r\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\t// bounding box\r\n\r\n\t\tconst boundingBox = source.boundingBox;\r\n\r\n\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// bounding sphere\r\n\r\n\t\tconst boundingSphere = source.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// draw range\r\n\r\n\t\tthis.drawRange.start = source.drawRange.start;\r\n\t\tthis.drawRange.count = source.drawRange.count;\r\n\r\n\t\t// user data\r\n\r\n\t\tthis.userData = source.userData;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { BufferGeometry };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { Ray } from '../math/Ray.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { Triangle } from '../math/Triangle.js';\r\nimport { BackSide, FrontSide } from '../constants.js';\r\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\n\r\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _ray = /*@__PURE__*/ new Ray();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _sphereHitAt = /*@__PURE__*/ new Vector3();\r\n\r\nconst _vA = /*@__PURE__*/ new Vector3();\r\nconst _vB = /*@__PURE__*/ new Vector3();\r\nconst _vC = /*@__PURE__*/ new Vector3();\r\n\r\nconst _tempA = /*@__PURE__*/ new Vector3();\r\nconst _morphA = /*@__PURE__*/ new Vector3();\r\n\r\nconst _uvA = /*@__PURE__*/ new Vector2();\r\nconst _uvB = /*@__PURE__*/ new Vector2();\r\nconst _uvC = /*@__PURE__*/ new Vector2();\r\n\r\nconst _normalA = /*@__PURE__*/ new Vector3();\r\nconst _normalB = /*@__PURE__*/ new Vector3();\r\nconst _normalC = /*@__PURE__*/ new Vector3();\r\n\r\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\r\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\r\n\r\nclass Mesh extends Object3D {\r\n\r\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMesh = true;\r\n\r\n\t\tthis.type = 'Mesh';\r\n\r\n\t\tthis.geometry = geometry;\r\n\t\tthis.material = material;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tif ( source.morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\r\n\r\n\t\t}\r\n\r\n\t\tif ( source.morphTargetDictionary !== undefined ) {\r\n\r\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\r\n\r\n\t\t}\r\n\r\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\r\n\t\tthis.geometry = source.geometry;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tupdateMorphTargets() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tconst morphAttributes = geometry.morphAttributes;\r\n\t\tconst keys = Object.keys( morphAttributes );\r\n\r\n\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetVertexPosition( index, target ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst position = geometry.attributes.position;\r\n\t\tconst morphPosition = geometry.morphAttributes.position;\r\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\r\n\r\n\t\ttarget.fromBufferAttribute( position, index );\r\n\r\n\t\tconst morphInfluences = this.morphTargetInfluences;\r\n\r\n\t\tif ( morphPosition && morphInfluences ) {\r\n\r\n\t\t\t_morphA.set( 0, 0, 0 );\r\n\r\n\t\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst influence = morphInfluences[ i ];\r\n\t\t\t\tconst morphAttribute = morphPosition[ i ];\r\n\r\n\t\t\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, index );\r\n\r\n\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( target ), influence );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.add( _morphA );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst material = this.material;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\r\n\t\tif ( material === undefined ) return;\r\n\r\n\t\t// test with bounding sphere in world space\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t// check distance from ray origin to bounding sphere\r\n\r\n\t\t_ray.copy( raycaster.ray ).recast( raycaster.near );\r\n\r\n\t\tif ( _sphere.containsPoint( _ray.origin ) === false ) {\r\n\r\n\t\t\tif ( _ray.intersectSphere( _sphere, _sphereHitAt ) === null ) return;\r\n\r\n\t\t\tif ( _ray.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;\r\n\r\n\t\t}\r\n\r\n\t\t// convert ray to local space of mesh\r\n\r\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\r\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\t// test with bounding box in local space\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;\r\n\r\n\t\t}\r\n\r\n\t\t// test for intersections with geometry\r\n\r\n\t\tthis._computeIntersections( raycaster, intersects, _ray );\r\n\r\n\t}\r\n\r\n\t_computeIntersections( raycaster, intersects, rayLocalSpace ) {\r\n\r\n\t\tlet intersection;\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst material = this.material;\r\n\r\n\t\tconst index = geometry.index;\r\n\t\tconst position = geometry.attributes.position;\r\n\t\tconst uv = geometry.attributes.uv;\r\n\t\tconst uv1 = geometry.attributes.uv1;\r\n\t\tconst normal = geometry.attributes.normal;\r\n\t\tconst groups = geometry.groups;\r\n\t\tconst drawRange = geometry.drawRange;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\t// indexed buffer geometry\r\n\r\n\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst group = groups[ i ];\r\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\r\n\r\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\tconst a = index.getX( j );\r\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\r\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\r\n\r\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tconst a = index.getX( i );\r\n\t\t\t\t\tconst b = index.getX( i + 1 );\r\n\t\t\t\t\tconst c = index.getX( i + 2 );\r\n\r\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t// non-indexed buffer geometry\r\n\r\n\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst group = groups[ i ];\r\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\r\n\r\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\tconst a = j;\r\n\t\t\t\t\t\tconst b = j + 1;\r\n\t\t\t\t\t\tconst c = j + 2;\r\n\r\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tconst a = i;\r\n\t\t\t\t\tconst b = i + 1;\r\n\t\t\t\t\tconst c = i + 2;\r\n\r\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\tlet intersect;\r\n\r\n\tif ( material.side === BackSide ) {\r\n\r\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t} else {\r\n\r\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );\r\n\r\n\t}\r\n\r\n\tif ( intersect === null ) return null;\r\n\r\n\t_intersectionPointWorld.copy( point );\r\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\r\n\r\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n\treturn {\r\n\t\tdistance: distance,\r\n\t\tpoint: _intersectionPointWorld.clone(),\r\n\t\tobject: object\r\n\t};\r\n\r\n}\r\n\r\nfunction checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {\r\n\r\n\tobject.getVertexPosition( a, _vA );\r\n\tobject.getVertexPosition( b, _vB );\r\n\tobject.getVertexPosition( c, _vC );\r\n\r\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\r\n\r\n\tif ( intersection ) {\r\n\r\n\t\tif ( uv ) {\r\n\r\n\t\t\t_uvA.fromBufferAttribute( uv, a );\r\n\t\t\t_uvB.fromBufferAttribute( uv, b );\r\n\t\t\t_uvC.fromBufferAttribute( uv, c );\r\n\r\n\t\t\tintersection.uv = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv1 ) {\r\n\r\n\t\t\t_uvA.fromBufferAttribute( uv1, a );\r\n\t\t\t_uvB.fromBufferAttribute( uv1, b );\r\n\t\t\t_uvC.fromBufferAttribute( uv1, c );\r\n\r\n\t\t\tintersection.uv1 = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t}\r\n\r\n\t\tif ( normal ) {\r\n\r\n\t\t\t_normalA.fromBufferAttribute( normal, a );\r\n\t\t\t_normalB.fromBufferAttribute( normal, b );\r\n\t\t\t_normalC.fromBufferAttribute( normal, c );\r\n\r\n\t\t\tintersection.normal = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _normalA, _normalB, _normalC, new Vector3() );\r\n\r\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\r\n\r\n\t\t\t\tintersection.normal.multiplyScalar( - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst face = {\r\n\t\t\ta: a,\r\n\t\t\tb: b,\r\n\t\t\tc: c,\r\n\t\t\tnormal: new Vector3(),\r\n\t\t\tmaterialIndex: 0\r\n\t\t};\r\n\r\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\r\n\r\n\t\tintersection.face = face;\r\n\r\n\t}\r\n\r\n\treturn intersection;\r\n\r\n}\r\n\r\nexport { Mesh };\r\n", "import { ColorManagement } from '../../math/ColorManagement.js';\r\n\r\n/**\r\n * Uniform Utilities\r\n */\r\n\r\nexport function cloneUniforms( src ) {\r\n\r\n\tconst dst = {};\r\n\r\n\tfor ( const u in src ) {\r\n\r\n\t\tdst[ u ] = {};\r\n\r\n\t\tfor ( const p in src[ u ] ) {\r\n\r\n\t\t\tconst property = src[ u ][ p ];\r\n\r\n\t\t\tif ( property && ( property.isColor ||\r\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\r\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\r\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\r\n\r\n\t\t\t\tif ( property.isRenderTargetTexture ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );\r\n\t\t\t\t\tdst[ u ][ p ] = null;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( Array.isArray( property ) ) {\r\n\r\n\t\t\t\tdst[ u ][ p ] = property.slice();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdst[ u ][ p ] = property;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn dst;\r\n\r\n}\r\n\r\nexport function mergeUniforms( uniforms ) {\r\n\r\n\tconst merged = {};\r\n\r\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\r\n\r\n\t\tfor ( const p in tmp ) {\r\n\r\n\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn merged;\r\n\r\n}\r\n\r\nexport function cloneUniformsGroups( src ) {\r\n\r\n\tconst dst = [];\r\n\r\n\tfor ( let u = 0; u < src.length; u ++ ) {\r\n\r\n\t\tdst.push( src[ u ].clone() );\r\n\r\n\t}\r\n\r\n\treturn dst;\r\n\r\n}\r\n\r\nexport function getUnlitUniformColorSpace( renderer ) {\r\n\r\n\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\tif ( currentRenderTarget === null ) {\r\n\r\n\t\t// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\r\n\t\treturn renderer.outputColorSpace;\r\n\r\n\t}\r\n\r\n\t// https://github.com/mrdoob/three.js/issues/27868\r\n\tif ( currentRenderTarget.isXRRenderTarget === true ) {\r\n\r\n\t\treturn currentRenderTarget.texture.colorSpace;\r\n\r\n\t}\r\n\r\n\treturn ColorManagement.workingColorSpace;\r\n\r\n}\r\n\r\n// Legacy\r\n\r\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\r\n\r\nexport { UniformsUtils };\r\n", "export default /* glsl */`\r\nvoid main() {\r\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n}\r\n`;\r\n", "export default /* glsl */`\r\nvoid main() {\r\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\r\n}\r\n`;\r\n", "import { Material } from './Material.js';\r\nimport { cloneUniforms, cloneUniformsGroups } from '../renderers/shaders/UniformsUtils.js';\r\n\r\nimport default_vertex from '../renderers/shaders/ShaderChunk/default_vertex.glsl.js';\r\nimport default_fragment from '../renderers/shaders/ShaderChunk/default_fragment.glsl.js';\r\n\r\nclass ShaderMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isShaderMaterial = true;\r\n\r\n\t\tthis.type = 'ShaderMaterial';\r\n\r\n\t\tthis.defines = {};\r\n\t\tthis.uniforms = {};\r\n\t\tthis.uniformsGroups = [];\r\n\r\n\t\tthis.vertexShader = default_vertex;\r\n\t\tthis.fragmentShader = default_fragment;\r\n\r\n\t\tthis.linewidth = 1;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false; // set to use scene fog\r\n\t\tthis.lights = false; // set to use scene lights\r\n\t\tthis.clipping = false; // set to use user-defined clipping planes\r\n\r\n\t\tthis.forceSinglePass = true;\r\n\r\n\t\tthis.extensions = {\r\n\t\t\tclipCullDistance: false, // set to use vertex shader clipping\r\n\t\t\tmultiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID\r\n\t\t};\r\n\r\n\t\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\t\tthis.defaultAttributeValues = {\r\n\t\t\t'color': [ 1, 1, 1 ],\r\n\t\t\t'uv': [ 0, 0 ],\r\n\t\t\t'uv1': [ 0, 0 ]\r\n\t\t};\r\n\r\n\t\tthis.index0AttributeName = undefined;\r\n\t\tthis.uniformsNeedUpdate = false;\r\n\r\n\t\tthis.glslVersion = null;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tthis.setValues( parameters );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.fragmentShader = source.fragmentShader;\r\n\t\tthis.vertexShader = source.vertexShader;\r\n\r\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\r\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\r\n\r\n\t\tthis.defines = Object.assign( {}, source.defines );\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.fog = source.fog;\r\n\t\tthis.lights = source.lights;\r\n\t\tthis.clipping = source.clipping;\r\n\r\n\t\tthis.extensions = Object.assign( {}, source.extensions );\r\n\r\n\t\tthis.glslVersion = source.glslVersion;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.glslVersion = this.glslVersion;\r\n\t\tdata.uniforms = {};\r\n\r\n\t\tfor ( const name in this.uniforms ) {\r\n\r\n\t\t\tconst uniform = this.uniforms[ name ];\r\n\t\t\tconst value = uniform.value;\r\n\r\n\t\t\tif ( value && value.isTexture ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 't',\r\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isColor ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'c',\r\n\t\t\t\t\tvalue: value.getHex()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector2 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v2',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isMatrix3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isMatrix4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\tvalue: value\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\r\n\r\n\t\tdata.vertexShader = this.vertexShader;\r\n\t\tdata.fragmentShader = this.fragmentShader;\r\n\r\n\t\tdata.lights = this.lights;\r\n\t\tdata.clipping = this.clipping;\r\n\r\n\t\tconst extensions = {};\r\n\r\n\t\tfor ( const key in this.extensions ) {\r\n\r\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ShaderMaterial };\r\n", "import { EventDispatcher } from './EventDispatcher.js';\r\nimport { Texture } from '../textures/Texture.js';\r\nimport { LinearFilter } from '../constants.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\nimport { Source } from '../textures/Source.js';\r\n\r\n/*\r\n In options, we can specify:\r\n * Texture parameters for an auto-generated target texture\r\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n*/\r\nclass RenderTarget extends EventDispatcher {\r\n\r\n\tconstructor( width = 1, height = 1, options = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isRenderTarget = true;\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.depth = 1;\r\n\r\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\r\n\t\tthis.scissorTest = false;\r\n\r\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\r\n\r\n\t\tconst image = { width: width, height: height, depth: 1 };\r\n\r\n\t\toptions = Object.assign( {\r\n\t\t\tgenerateMipmaps: false,\r\n\t\t\tinternalFormat: null,\r\n\t\t\tminFilter: LinearFilter,\r\n\t\t\tdepthBuffer: true,\r\n\t\t\tstencilBuffer: false,\r\n\t\t\tresolveDepthBuffer: true,\r\n\t\t\tresolveStencilBuffer: true,\r\n\t\t\tdepthTexture: null,\r\n\t\t\tsamples: 0,\r\n\t\t\tcount: 1\r\n\t\t}, options );\r\n\r\n\t\tconst texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\r\n\r\n\t\ttexture.flipY = false;\r\n\t\ttexture.generateMipmaps = options.generateMipmaps;\r\n\t\ttexture.internalFormat = options.internalFormat;\r\n\r\n\t\tthis.textures = [];\r\n\r\n\t\tconst count = options.count;\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tthis.textures[ i ] = texture.clone();\r\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\r\n\r\n\t\t}\r\n\r\n\t\tthis.depthBuffer = options.depthBuffer;\r\n\t\tthis.stencilBuffer = options.stencilBuffer;\r\n\r\n\t\tthis.resolveDepthBuffer = options.resolveDepthBuffer;\r\n\t\tthis.resolveStencilBuffer = options.resolveStencilBuffer;\r\n\r\n\t\tthis.depthTexture = options.depthTexture;\r\n\r\n\t\tthis.samples = options.samples;\r\n\r\n\t}\r\n\r\n\tget texture() {\r\n\r\n\t\treturn this.textures[ 0 ];\r\n\r\n\t}\r\n\r\n\tset texture( value ) {\r\n\r\n\t\tthis.textures[ 0 ] = value;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height, depth = 1 ) {\r\n\r\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\r\n\r\n\t\t\tthis.width = width;\r\n\t\t\tthis.height = height;\r\n\t\t\tthis.depth = depth;\r\n\r\n\t\t\tfor ( let i = 0, il = this.textures.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.textures[ i ].image.width = width;\r\n\t\t\t\tthis.textures[ i ].image.height = height;\r\n\t\t\t\tthis.textures[ i ].image.depth = depth;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\tthis.scissor.set( 0, 0, width, height );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.width = source.width;\r\n\t\tthis.height = source.height;\r\n\t\tthis.depth = source.depth;\r\n\r\n\t\tthis.scissor.copy( source.scissor );\r\n\t\tthis.scissorTest = source.scissorTest;\r\n\r\n\t\tthis.viewport.copy( source.viewport );\r\n\r\n\t\tthis.textures.length = 0;\r\n\r\n\t\tfor ( let i = 0, il = source.textures.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.textures[ i ] = source.textures[ i ].clone();\r\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\r\n\r\n\t\t}\r\n\r\n\t\t// ensure image object is not shared, see #20328\r\n\r\n\t\tconst image = Object.assign( {}, source.texture.image );\r\n\t\tthis.texture.source = new Source( image );\r\n\r\n\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\r\n\t\tthis.resolveDepthBuffer = source.resolveDepthBuffer;\r\n\t\tthis.resolveStencilBuffer = source.resolveStencilBuffer;\r\n\r\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\r\n\r\n\t\tthis.samples = source.samples;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RenderTarget };\r\n", "import { WebGLCoordinateSystem } from '../constants.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\nclass Camera extends Object3D {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isCamera = true;\r\n\r\n\t\tthis.type = 'Camera';\r\n\r\n\t\tthis.matrixWorldInverse = new Matrix4();\r\n\r\n\t\tthis.projectionMatrix = new Matrix4();\r\n\t\tthis.projectionMatrixInverse = new Matrix4();\r\n\r\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\r\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\r\n\r\n\t\tthis.coordinateSystem = source.coordinateSystem;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetWorldDirection( target ) {\r\n\r\n\t\treturn super.getWorldDirection( target ).negate();\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\r\n\r\n\t}\r\n\r\n\tupdateWorldMatrix( updateParents, updateChildren ) {\r\n\r\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\r\n\r\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Camera };\r\n", "import { Camera } from './Camera.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nconst _v3 = /*@__PURE__*/ new Vector3();\r\nconst _minTarget = /*@__PURE__*/ new Vector2();\r\nconst _maxTarget = /*@__PURE__*/ new Vector2();\r\n\r\n\r\nclass PerspectiveCamera extends Camera {\r\n\r\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isPerspectiveCamera = true;\r\n\r\n\t\tthis.type = 'PerspectiveCamera';\r\n\r\n\t\tthis.fov = fov;\r\n\t\tthis.zoom = 1;\r\n\r\n\t\tthis.near = near;\r\n\t\tthis.far = far;\r\n\t\tthis.focus = 10;\r\n\r\n\t\tthis.aspect = aspect;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\r\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.fov = source.fov;\r\n\t\tthis.zoom = source.zoom;\r\n\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\t\tthis.focus = source.focus;\r\n\r\n\t\tthis.aspect = source.aspect;\r\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\tthis.filmGauge = source.filmGauge;\r\n\t\tthis.filmOffset = source.filmOffset;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\r\n\t *\r\n\t * The default film gauge is 35, so that the focal length can be specified for\r\n\t * a 35mm (full frame) camera.\r\n\t *\r\n\t * Values for focal length and film gauge must have the same unit.\r\n\t */\r\n\tsetFocalLength( focalLength ) {\r\n\r\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\r\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\r\n\r\n\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the focal length from the current .fov and .filmGauge.\r\n\t */\r\n\tgetFocalLength() {\r\n\r\n\t\tconst vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\r\n\r\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\r\n\r\n\t}\r\n\r\n\tgetEffectiveFOV() {\r\n\r\n\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\r\n\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\r\n\r\n\t}\r\n\r\n\tgetFilmWidth() {\r\n\r\n\t\t// film not completely covered in portrait format (aspect < 1)\r\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\r\n\r\n\t}\r\n\r\n\tgetFilmHeight() {\r\n\r\n\t\t// film not completely covered in landscape format (aspect > 1)\r\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\r\n\t * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.\r\n\t */\r\n\tgetViewBounds( distance, minTarget, maxTarget ) {\r\n\r\n\t\t_v3.set( - 1, - 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\r\n\r\n\t\tminTarget.set( _v3.x, _v3.y ).multiplyScalar( - distance / _v3.z );\r\n\r\n\t\t_v3.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\r\n\r\n\t\tmaxTarget.set( _v3.x, _v3.y ).multiplyScalar( - distance / _v3.z );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\r\n\t * Copies the result into the target Vector2, where x is width and y is height.\r\n\t */\r\n\tgetViewSize( distance, target ) {\r\n\r\n\t\tthis.getViewBounds( distance, _minTarget, _maxTarget );\r\n\r\n\t\treturn target.subVectors( _maxTarget, _minTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t * multi-monitor/multi-machine setups.\r\n\t *\r\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t * the monitors are in grid like this\r\n\t *\r\n\t *   +---+---+---+\r\n\t *   | A | B | C |\r\n\t *   +---+---+---+\r\n\t *   | D | E | F |\r\n\t *   +---+---+---+\r\n\t *\r\n\t * then for each monitor you would call it like this\r\n\t *\r\n\t *   const w = 1920;\r\n\t *   const h = 1080;\r\n\t *   const fullWidth = w * 3;\r\n\t *   const fullHeight = h * 2;\r\n\t *\r\n\t *   --A--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t *   --B--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t *   --C--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t *   --D--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t *   --E--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t *   --F--\r\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t *\r\n\t *   Note there is no reason monitors have to be the same size or in a grid.\r\n\t */\r\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\tthis.aspect = fullWidth / fullHeight;\r\n\r\n\t\tif ( this.view === null ) {\r\n\r\n\t\t\tthis.view = {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tfullWidth: 1,\r\n\t\t\t\tfullHeight: 1,\r\n\t\t\t\toffsetX: 0,\r\n\t\t\t\toffsetY: 0,\r\n\t\t\t\twidth: 1,\r\n\t\t\t\theight: 1\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tthis.view.enabled = true;\r\n\t\tthis.view.fullWidth = fullWidth;\r\n\t\tthis.view.fullHeight = fullHeight;\r\n\t\tthis.view.offsetX = x;\r\n\t\tthis.view.offsetY = y;\r\n\t\tthis.view.width = width;\r\n\t\tthis.view.height = height;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tclearViewOffset() {\r\n\r\n\t\tif ( this.view !== null ) {\r\n\r\n\t\t\tthis.view.enabled = false;\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tupdateProjectionMatrix() {\r\n\r\n\t\tconst near = this.near;\r\n\t\tlet top = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom;\r\n\t\tlet height = 2 * top;\r\n\t\tlet width = this.aspect * height;\r\n\t\tlet left = - 0.5 * width;\r\n\t\tconst view = this.view;\r\n\r\n\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\tconst fullWidth = view.fullWidth,\r\n\t\t\t\tfullHeight = view.fullHeight;\r\n\r\n\t\t\tleft += view.offsetX * width / fullWidth;\r\n\t\t\ttop -= view.offsetY * height / fullHeight;\r\n\t\t\twidth *= view.width / fullWidth;\r\n\t\t\theight *= view.height / fullHeight;\r\n\r\n\t\t}\r\n\r\n\t\tconst skew = this.filmOffset;\r\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\r\n\r\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );\r\n\r\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.fov = this.fov;\r\n\t\tdata.object.zoom = this.zoom;\r\n\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\t\tdata.object.focus = this.focus;\r\n\r\n\t\tdata.object.aspect = this.aspect;\r\n\r\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\r\n\r\n\t\tdata.object.filmGauge = this.filmGauge;\r\n\t\tdata.object.filmOffset = this.filmOffset;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PerspectiveCamera };\r\n", "import { tslFn, int, float, vec2, vec3, vec4, If } from '../shadernode/ShaderNode.js';\r\nimport { cos, sin, abs, max, exp2, log2, clamp, fract, mix, floor, normalize, cross, all } from '../math/MathNode.js';\r\nimport { mul } from '../math/OperatorNode.js';\r\nimport { cond } from '../math/CondNode.js';\r\nimport { loop, Break } from '../utils/LoopNode.js';\r\n\r\n// These defines must match with PMREMGenerator\r\n\r\nconst cubeUV_r0 = float( 1.0 );\r\nconst cubeUV_m0 = float( - 2.0 );\r\nconst cubeUV_r1 = float( 0.8 );\r\nconst cubeUV_m1 = float( - 1.0 );\r\nconst cubeUV_r4 = float( 0.4 );\r\nconst cubeUV_m4 = float( 2.0 );\r\nconst cubeUV_r5 = float( 0.305 );\r\nconst cubeUV_m5 = float( 3.0 );\r\nconst cubeUV_r6 = float( 0.21 );\r\nconst cubeUV_m6 = float( 4.0 );\r\n\r\nconst cubeUV_minMipLevel = float( 4.0 );\r\nconst cubeUV_minTileSize = float( 16.0 );\r\n\r\n// These shader functions convert between the UV coordinates of a single face of\r\n// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\r\n// sampling a textureCube (not generally normalized ).\r\n\r\nconst getFace = tslFn( ( [ direction ] ) => {\r\n\r\n\tconst absDirection = vec3( abs( direction ) ).toVar();\r\n\tconst face = float( - 1.0 ).toVar();\r\n\r\n\tIf( absDirection.x.greaterThan( absDirection.z ), () => {\r\n\r\n\t\tIf( absDirection.x.greaterThan( absDirection.y ), () => {\r\n\r\n\t\t\tface.assign( cond( direction.x.greaterThan( 0.0 ), 0.0, 3.0 ) );\r\n\r\n\t\t} ).else( () => {\r\n\r\n\t\t\tface.assign( cond( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );\r\n\r\n\t\t} );\r\n\r\n\t} ).else( () => {\r\n\r\n\t\tIf( absDirection.z.greaterThan( absDirection.y ), () => {\r\n\r\n\t\t\tface.assign( cond( direction.z.greaterThan( 0.0 ), 2.0, 5.0 ) );\r\n\r\n\t\t} ).else( () => {\r\n\r\n\t\t\tface.assign( cond( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\treturn face;\r\n\r\n} ).setLayout( {\r\n\tname: 'getFace',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'direction', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n// RH coordinate system; PMREM face-indexing convention\r\nconst getUV = tslFn( ( [ direction, face ] ) => {\r\n\r\n\tconst uv = vec2().toVar();\r\n\r\n\tIf( face.equal( 0.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.z, direction.y ).div( abs( direction.x ) ) ); // pos x\r\n\r\n\t} ).elseif( face.equal( 1.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.x.negate(), direction.z.negate() ).div( abs( direction.y ) ) ); // pos y\r\n\r\n\t} ).elseif( face.equal( 2.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.x.negate(), direction.y ).div( abs( direction.z ) ) ); // pos z\r\n\r\n\t} ).elseif( face.equal( 3.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.z.negate(), direction.y ).div( abs( direction.x ) ) ); // neg x\r\n\r\n\t} ).elseif( face.equal( 4.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.x.negate(), direction.z ).div( abs( direction.y ) ) ); // neg y\r\n\r\n\t} ).else( () => {\r\n\r\n\t\tuv.assign( vec2( direction.x, direction.y ).div( abs( direction.z ) ) ); // neg z\r\n\r\n\t} );\r\n\r\n\treturn mul( 0.5, uv.add( 1.0 ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'getUV',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'direction', type: 'vec3' },\r\n\t\t{ name: 'face', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst roughnessToMip = tslFn( ( [ roughness ] ) => {\r\n\r\n\tconst mip = float( 0.0 ).toVar();\r\n\r\n\tIf( roughness.greaterThanEqual( cubeUV_r1 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r0.sub( roughness ).mul( cubeUV_m1.sub( cubeUV_m0 ) ).div( cubeUV_r0.sub( cubeUV_r1 ) ).add( cubeUV_m0 ) );\r\n\r\n\t} ).elseif( roughness.greaterThanEqual( cubeUV_r4 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r1.sub( roughness ).mul( cubeUV_m4.sub( cubeUV_m1 ) ).div( cubeUV_r1.sub( cubeUV_r4 ) ).add( cubeUV_m1 ) );\r\n\r\n\t} ).elseif( roughness.greaterThanEqual( cubeUV_r5 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r4.sub( roughness ).mul( cubeUV_m5.sub( cubeUV_m4 ) ).div( cubeUV_r4.sub( cubeUV_r5 ) ).add( cubeUV_m4 ) );\r\n\r\n\t} ).elseif( roughness.greaterThanEqual( cubeUV_r6 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r5.sub( roughness ).mul( cubeUV_m6.sub( cubeUV_m5 ) ).div( cubeUV_r5.sub( cubeUV_r6 ) ).add( cubeUV_m5 ) );\r\n\r\n\t} ).else( () => {\r\n\r\n\t\tmip.assign( float( - 2.0 ).mul( log2( mul( 1.16, roughness ) ) ) ); // 1.16 = 1.79^0.25\r\n\r\n\t} );\r\n\r\n\treturn mip;\r\n\r\n} ).setLayout( {\r\n\tname: 'roughnessToMip',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'roughness', type: 'float' }\r\n\t]\r\n} );\r\n\r\n// RH coordinate system; PMREM face-indexing convention\r\nexport const getDirection = tslFn( ( [ uv_immutable, face ] ) => {\r\n\r\n\tconst uv = uv_immutable.toVar();\r\n\tuv.assign( mul( 2.0, uv ).sub( 1.0 ) );\r\n\tconst direction = vec3( uv, 1.0 ).toVar();\r\n\r\n\tIf( face.equal( 0.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.zyx ); // ( 1, v, u ) pos x\r\n\r\n\t} ).elseif( face.equal( 1.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.xzy );\r\n\t\tdirection.xz.mulAssign( - 1.0 ); // ( -u, 1, -v ) pos y\r\n\r\n\t} ).elseif( face.equal( 2.0 ), () => {\r\n\r\n\t\tdirection.x.mulAssign( - 1.0 ); // ( -u, v, 1 ) pos z\r\n\r\n\t} ).elseif( face.equal( 3.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.zyx );\r\n\t\tdirection.xz.mulAssign( - 1.0 ); // ( -1, v, -u ) neg x\r\n\r\n\t} ).elseif( face.equal( 4.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.xzy );\r\n\t\tdirection.xy.mulAssign( - 1.0 ); // ( -u, -1, v ) neg y\r\n\r\n\t} ).elseif( face.equal( 5.0 ), () => {\r\n\r\n\t\tdirection.z.mulAssign( - 1.0 ); // ( u, v, -1 ) neg zS\r\n\r\n\t} );\r\n\r\n\treturn direction;\r\n\r\n} ).setLayout( {\r\n\tname: 'getDirection',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'uv', type: 'vec2' },\r\n\t\t{ name: 'face', type: 'float' }\r\n\t]\r\n} );\r\n\r\n//\r\n\r\nexport const textureCubeUV = tslFn( ( [ envMap, sampleDir_immutable, roughness_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {\r\n\r\n\tconst roughness = float( roughness_immutable );\r\n\tconst sampleDir = vec3( sampleDir_immutable );\r\n\r\n\tconst mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\r\n\tconst mipF = fract( mip );\r\n\tconst mipInt = floor( mip );\r\n\tconst color0 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();\r\n\r\n\tIf( mipF.notEqual( 0.0 ), () => {\r\n\r\n\t\tconst color1 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt.add( 1.0 ), CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();\r\n\r\n\t\tcolor0.assign( mix( color0, color1, mipF ) );\r\n\r\n\t} );\r\n\r\n\treturn color0;\r\n\r\n} );\r\n\r\nconst bilinearCubeUV = tslFn( ( [ envMap, direction_immutable, mipInt_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {\r\n\r\n\tconst mipInt = float( mipInt_immutable ).toVar();\r\n\tconst direction = vec3( direction_immutable );\r\n\tconst face = float( getFace( direction ) ).toVar();\r\n\tconst filterInt = float( max( cubeUV_minMipLevel.sub( mipInt ), 0.0 ) ).toVar();\r\n\tmipInt.assign( max( mipInt, cubeUV_minMipLevel ) );\r\n\tconst faceSize = float( exp2( mipInt ) ).toVar();\r\n\tconst uv = vec2( getUV( direction, face ).mul( faceSize.sub( 2.0 ) ).add( 1.0 ) ).toVar();\r\n\r\n\tIf( face.greaterThan( 2.0 ), () => {\r\n\r\n\t\tuv.y.addAssign( faceSize );\r\n\t\tface.subAssign( 3.0 );\r\n\r\n\t} );\r\n\r\n\tuv.x.addAssign( face.mul( faceSize ) );\r\n\tuv.x.addAssign( filterInt.mul( mul( 3.0, cubeUV_minTileSize ) ) );\r\n\tuv.y.addAssign( mul( 4.0, exp2( CUBEUV_MAX_MIP ).sub( faceSize ) ) );\r\n\tuv.x.mulAssign( CUBEUV_TEXEL_WIDTH );\r\n\tuv.y.mulAssign( CUBEUV_TEXEL_HEIGHT );\r\n\r\n\treturn envMap.uv( uv ).grad( vec2(), vec2() ); // disable anisotropic filtering\r\n\r\n} );\r\n\r\nconst getSample = tslFn( ( { envMap, mipInt, outputDirection, theta, axis, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {\r\n\r\n\tconst cosTheta = cos( theta );\r\n\r\n\t// Rodrigues' axis-angle rotation\r\n\tconst sampleDirection = outputDirection.mul( cosTheta )\r\n\t\t.add( axis.cross( outputDirection ).mul( sin( theta ) ) )\r\n\t\t.add( axis.mul( axis.dot( outputDirection ).mul( cosTheta.oneMinus() ) ) );\r\n\r\n\treturn bilinearCubeUV( envMap, sampleDirection, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP );\r\n\r\n} );\r\n\r\nexport const blur = tslFn( ( { n, latitudinal, poleAxis, outputDirection, weights, samples, dTheta, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {\r\n\r\n\tconst axis = vec3( cond( latitudinal, poleAxis, cross( poleAxis, outputDirection ) ) ).toVar();\r\n\r\n\tIf( all( axis.equals( vec3( 0.0 ) ) ), () => {\r\n\r\n\t\taxis.assign( vec3( outputDirection.z, 0.0, outputDirection.x.negate() ) );\r\n\r\n\t} );\r\n\r\n\taxis.assign( normalize( axis ) );\r\n\r\n\tconst gl_FragColor = vec3().toVar();\r\n\tgl_FragColor.addAssign( weights.element( int( 0 ) ).mul( getSample( { theta: 0.0, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\r\n\r\n\tloop( { start: int( 1 ), end: n }, ( { i } ) => {\r\n\r\n\t\tIf( i.greaterThanEqual( samples ), () => {\r\n\r\n\t\t\tBreak();\r\n\r\n\t\t} );\r\n\r\n\t\tconst theta = float( dTheta.mul( float( i ) ) ).toVar();\r\n\t\tgl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta: theta.mul( - 1.0 ), axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\r\n\t\tgl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\r\n\r\n\t} );\r\n\r\n\treturn vec4( gl_FragColor, 1 );\r\n\r\n} );\r\n", "import { Camera } from './Camera.js';\r\n\r\nclass OrthographicCamera extends Camera {\r\n\r\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isOrthographicCamera = true;\r\n\r\n\t\tthis.type = 'OrthographicCamera';\r\n\r\n\t\tthis.zoom = 1;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.left = left;\r\n\t\tthis.right = right;\r\n\t\tthis.top = top;\r\n\t\tthis.bottom = bottom;\r\n\r\n\t\tthis.near = near;\r\n\t\tthis.far = far;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.left = source.left;\r\n\t\tthis.right = source.right;\r\n\t\tthis.top = source.top;\r\n\t\tthis.bottom = source.bottom;\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\r\n\t\tthis.zoom = source.zoom;\r\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\tif ( this.view === null ) {\r\n\r\n\t\t\tthis.view = {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tfullWidth: 1,\r\n\t\t\t\tfullHeight: 1,\r\n\t\t\t\toffsetX: 0,\r\n\t\t\t\toffsetY: 0,\r\n\t\t\t\twidth: 1,\r\n\t\t\t\theight: 1\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tthis.view.enabled = true;\r\n\t\tthis.view.fullWidth = fullWidth;\r\n\t\tthis.view.fullHeight = fullHeight;\r\n\t\tthis.view.offsetX = x;\r\n\t\tthis.view.offsetY = y;\r\n\t\tthis.view.width = width;\r\n\t\tthis.view.height = height;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tclearViewOffset() {\r\n\r\n\t\tif ( this.view !== null ) {\r\n\r\n\t\t\tthis.view.enabled = false;\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tupdateProjectionMatrix() {\r\n\r\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\tconst cx = ( this.right + this.left ) / 2;\r\n\t\tconst cy = ( this.top + this.bottom ) / 2;\r\n\r\n\t\tlet left = cx - dx;\r\n\t\tlet right = cx + dx;\r\n\t\tlet top = cy + dy;\r\n\t\tlet bottom = cy - dy;\r\n\r\n\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\r\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\r\n\r\n\t\t\tleft += scaleW * this.view.offsetX;\r\n\t\t\tright = left + scaleW * this.view.width;\r\n\t\t\ttop -= scaleH * this.view.offsetY;\r\n\t\t\tbottom = top - scaleH * this.view.height;\r\n\r\n\t\t}\r\n\r\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );\r\n\r\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.zoom = this.zoom;\r\n\t\tdata.object.left = this.left;\r\n\t\tdata.object.right = this.right;\r\n\t\tdata.object.top = this.top;\r\n\t\tdata.object.bottom = this.bottom;\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\r\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { OrthographicCamera };\r\n", "import NodeMaterial from '../../../nodes/materials/NodeMaterial.js';\r\nimport { getDirection, blur } from '../../../nodes/pmrem/PMREMUtils.js';\r\nimport { equirectUV } from '../../../nodes/utils/EquirectUVNode.js';\r\nimport { uniform } from '../../../nodes/core/UniformNode.js';\r\nimport { uniforms } from '../../../nodes/accessors/UniformsNode.js';\r\nimport { texture } from '../../../nodes/accessors/TextureNode.js';\r\nimport { cubeTexture } from '../../../nodes/accessors/CubeTextureNode.js';\r\nimport { float, vec3 } from '../../../nodes/shadernode/ShaderNode.js';\r\nimport { uv } from '../../../nodes/accessors/UVNode.js';\r\nimport { attribute } from '../../../nodes/core/AttributeNode.js';\r\n\r\nimport { OrthographicCamera } from '../../../cameras/OrthographicCamera.js';\r\nimport { Color } from '../../../math/Color.js';\r\nimport { Vector3 } from '../../../math/Vector3.js';\r\nimport { BufferGeometry } from '../../../core/BufferGeometry.js';\r\nimport { BufferAttribute } from '../../../core/BufferAttribute.js';\r\nimport { RenderTarget } from '../../../core/RenderTarget.js';\r\nimport { Mesh } from '../../../objects/Mesh.js';\r\nimport { PerspectiveCamera } from '../../../cameras/PerspectiveCamera.js';\r\nimport { MeshBasicMaterial } from '../../../materials/MeshBasicMaterial.js';\r\nimport { BoxGeometry } from '../../../geometries/BoxGeometry.js';\r\nimport {\r\n\tCubeReflectionMapping,\r\n\tCubeRefractionMapping,\r\n\tCubeUVReflectionMapping,\r\n\tLinearFilter,\r\n\tNoBlending,\r\n\tRGBAFormat,\r\n\tHalfFloatType,\r\n\tBackSide,\r\n\tLinearSRGBColorSpace\r\n} from '../../../constants.js';\r\n\r\nconst LOD_MIN = 4;\r\n\r\n// The standard deviations (radians) associated with the extra mips. These are\r\n// chosen to approximate a Trowbridge-Reitz distribution function times the\r\n// geometric shadowing function. These sigma values squared must match the\r\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\r\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\r\n\r\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\r\n// samples and exit early, but not recompile the shader.\r\nconst MAX_SAMPLES = 20;\r\n\r\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\nconst _cubeCamera = /*@__PURE__*/ new PerspectiveCamera( 90, 1 );\r\nconst _clearColor = /*@__PURE__*/ new Color();\r\nlet _oldTarget = null;\r\nlet _oldActiveCubeFace = 0;\r\nlet _oldActiveMipmapLevel = 0;\r\n\r\n// Golden Ratio\r\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\r\nconst INV_PHI = 1 / PHI;\r\n\r\n// Vertices of a dodecahedron (except the opposites, which represent the\r\n// same axis), used as axis directions evenly spread on a sphere.\r\nconst _axisDirections = [\r\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ),\r\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\r\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\r\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\r\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\r\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\r\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\r\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\r\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\r\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 )\r\n];\r\n\r\n//\r\n\r\n// WebGPU Face indices\r\nconst _faceLib = [\r\n\t3, 1, 5,\r\n\t0, 4, 2\r\n];\r\n\r\nconst direction = getDirection( uv(), attribute( 'faceIndex' ) ).normalize();\r\nconst outputDirection = vec3( direction.x, direction.y.negate(), direction.z );\r\n\r\n/**\r\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\r\n * (PMREM) from a cubeMap environment texture. This allows different levels of\r\n * blur to be quickly accessed based on material roughness. It is packed into a\r\n * special CubeUV format that allows us to perform custom interpolation so that\r\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\r\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\r\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\r\n * higher roughness levels. In this way we maintain resolution to smoothly\r\n * interpolate diffuse lighting while limiting sampling computation.\r\n *\r\n * Paper: Fast, Accurate Image-Based Lighting\r\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\r\n*/\r\n\r\nclass PMREMGenerator {\r\n\r\n\tconstructor( renderer ) {\r\n\r\n\t\tthis._renderer = renderer;\r\n\t\tthis._pingPongRenderTarget = null;\r\n\r\n\t\tthis._lodMax = 0;\r\n\t\tthis._cubeSize = 0;\r\n\t\tthis._lodPlanes = [];\r\n\t\tthis._sizeLods = [];\r\n\t\tthis._sigmas = [];\r\n\t\tthis._lodMeshes = [];\r\n\r\n\t\tthis._blurMaterial = null;\r\n\t\tthis._cubemapMaterial = null;\r\n\t\tthis._equirectMaterial = null;\r\n\t\tthis._backgroundBox = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\r\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\r\n\t * in radians to be applied to the scene before PMREM generation. Optional near\r\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\r\n\t * is placed at the origin).\r\n\t */\r\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\r\n\r\n\t\t_oldTarget = this._renderer.getRenderTarget();\r\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\r\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\r\n\r\n\t\tthis._setSize( 256 );\r\n\r\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\r\n\t\tcubeUVRenderTarget.depthBuffer = true;\r\n\r\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\r\n\r\n\t\tif ( sigma > 0 ) {\r\n\r\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\r\n\r\n\t\t}\r\n\r\n\t\tthis._applyPMREM( cubeUVRenderTarget );\r\n\r\n\t\tthis._cleanup( cubeUVRenderTarget );\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\r\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\r\n\t * as this matches best with the 256 x 256 cubemap output.\r\n\t */\r\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\r\n\r\n\t\treturn this._fromTexture( equirectangular, renderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\r\n\t * or HDR. The ideal input cube size is 256 x 256,\r\n\t * as this matches best with the 256 x 256 cubemap output.\r\n\t */\r\n\tfromCubemap( cubemap, renderTarget = null ) {\r\n\r\n\t\treturn this._fromTexture( cubemap, renderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\r\n\t * your texture's network fetch for increased concurrency.\r\n\t */\r\n\tcompileCubemapShader() {\r\n\r\n\t\tif ( this._cubemapMaterial === null ) {\r\n\r\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\r\n\t\t\tthis._compileMaterial( this._cubemapMaterial );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\r\n\t * your texture's network fetch for increased concurrency.\r\n\t */\r\n\tcompileEquirectangularShader() {\r\n\r\n\t\tif ( this._equirectMaterial === null ) {\r\n\r\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\r\n\t\t\tthis._compileMaterial( this._equirectMaterial );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\r\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\r\n\t * one of them will cause any others to also become unusable.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis._dispose();\r\n\r\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\r\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\r\n\t\tif ( this._backgroundBox !== null ) {\r\n\r\n\t\t\tthis._backgroundBox.geometry.dispose();\r\n\t\t\tthis._backgroundBox.material.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// private interface\r\n\r\n\t_setSize( cubeSize ) {\r\n\r\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\r\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\r\n\r\n\t}\r\n\r\n\t_dispose() {\r\n\r\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\r\n\r\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\r\n\r\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\r\n\r\n\t\t\tthis._lodPlanes[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_cleanup( outputTarget ) {\r\n\r\n\t\tthis._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );\r\n\t\toutputTarget.scissorTest = false;\r\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\r\n\r\n\t}\r\n\r\n\t_fromTexture( texture, renderTarget ) {\r\n\r\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\r\n\r\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\r\n\r\n\t\t} else { // Equirectangular\r\n\r\n\t\t\tthis._setSize( texture.image.width / 4 );\r\n\r\n\t\t}\r\n\r\n\t\t_oldTarget = this._renderer.getRenderTarget();\r\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\r\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\r\n\r\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\r\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\r\n\t\tthis._applyPMREM( cubeUVRenderTarget );\r\n\t\tthis._cleanup( cubeUVRenderTarget );\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t_allocateTargets() {\r\n\r\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\r\n\t\tconst height = 4 * this._cubeSize;\r\n\r\n\t\tconst params = {\r\n\t\t\tmagFilter: LinearFilter,\r\n\t\t\tminFilter: LinearFilter,\r\n\t\t\tgenerateMipmaps: false,\r\n\t\t\ttype: HalfFloatType,\r\n\t\t\tformat: RGBAFormat,\r\n\t\t\tcolorSpace: LinearSRGBColorSpace,\r\n\t\t\t//depthBuffer: false\r\n\t\t};\r\n\r\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\r\n\r\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {\r\n\r\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\r\n\r\n\t\t\t\tthis._dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\r\n\r\n\t\t\tconst { _lodMax } = this;\r\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas, lodMeshes: this._lodMeshes } = _createPlanes( _lodMax ) );\r\n\r\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\r\n\r\n\t\t}\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t_compileMaterial( material ) {\r\n\r\n\t\tconst tmpMesh = this._lodMeshes[ 0 ];\r\n\t\ttmpMesh.material = material;\r\n\r\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\r\n\r\n\t}\r\n\r\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\r\n\r\n\t\tconst cubeCamera = _cubeCamera;\r\n\t\tcubeCamera.near = near;\r\n\t\tcubeCamera.far = far;\r\n\r\n\t\t// px, py, pz, nx, ny, nz\r\n\t\tconst upSign = [ - 1, 1, - 1, - 1, - 1, - 1 ];\r\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\r\n\r\n\t\tconst renderer = this._renderer;\r\n\r\n\t\tconst originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.getClearColor( _clearColor );\r\n\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tlet backgroundBox = this._backgroundBox;\r\n\r\n\t\tif ( backgroundBox === null ) {\r\n\r\n\t\t\tconst backgroundMaterial = new MeshBasicMaterial( {\r\n\t\t\t\tname: 'PMREM.Background',\r\n\t\t\t\tside: BackSide,\r\n\t\t\t\tdepthWrite: false,\r\n\t\t\t\tdepthTest: false\r\n\t\t\t} );\r\n\r\n\t\t\tbackgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\r\n\r\n\t\t}\r\n\r\n\t\tlet useSolidColor = false;\r\n\t\tconst background = scene.background;\r\n\r\n\t\tif ( background ) {\r\n\r\n\t\t\tif ( background.isColor ) {\r\n\r\n\t\t\t\tbackgroundBox.material.color.copy( background );\r\n\t\t\t\tscene.background = null;\r\n\t\t\t\tuseSolidColor = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbackgroundBox.material.color.copy( _clearColor );\r\n\t\t\tuseSolidColor = true;\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\r\n\r\n\t\trenderer.clear();\r\n\r\n\t\tif ( useSolidColor ) {\r\n\r\n\t\t\trenderer.render( backgroundBox, cubeCamera );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst col = i % 3;\r\n\r\n\t\t\tif ( col === 0 ) {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\r\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\r\n\r\n\t\t\t} else if ( col === 1 ) {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\r\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\r\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst size = this._cubeSize;\r\n\r\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\r\n\r\n\t\t\trenderer.render( scene, cubeCamera );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\tscene.background = background;\r\n\r\n\t}\r\n\r\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\r\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\r\n\r\n\t\tif ( isCubeTexture ) {\r\n\r\n\t\t\tif ( this._cubemapMaterial === null ) {\r\n\r\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this._equirectMaterial === null ) {\r\n\r\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\r\n\t\tmaterial.fragmentNode.value = texture;\r\n\r\n\t\tconst mesh = this._lodMeshes[ 0 ];\r\n\t\tmesh.material = material;\r\n\r\n\t\tconst size = this._cubeSize;\r\n\r\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\r\n\r\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\r\n\t\trenderer.render( mesh, _flatCamera );\r\n\r\n\t}\r\n\r\n\t_applyPMREM( cubeUVRenderTarget ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst autoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\t\tconst n = this._lodPlanes.length;\r\n\r\n\t\tfor ( let i = 1; i < n; i ++ ) {\r\n\r\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\r\n\r\n\t\t\tconst poleAxis = _axisDirections[ ( n - i - 1 ) % _axisDirections.length ];\r\n\r\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = autoClear;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\r\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\r\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\r\n\t * the poles) to approximate the orthogonally-separable blur. It is least\r\n\t * accurate at the poles, but still does a decent job.\r\n\t */\r\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\r\n\r\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\r\n\r\n\t\tthis._halfBlur(\r\n\t\t\tcubeUVRenderTarget,\r\n\t\t\tpingPongRenderTarget,\r\n\t\t\tlodIn,\r\n\t\t\tlodOut,\r\n\t\t\tsigma,\r\n\t\t\t'latitudinal',\r\n\t\t\tpoleAxis );\r\n\r\n\t\tthis._halfBlur(\r\n\t\t\tpingPongRenderTarget,\r\n\t\t\tcubeUVRenderTarget,\r\n\t\t\tlodOut,\r\n\t\t\tlodOut,\r\n\t\t\tsigma,\r\n\t\t\t'longitudinal',\r\n\t\t\tpoleAxis );\r\n\r\n\t}\r\n\r\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst blurMaterial = this._blurMaterial;\r\n\r\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\r\n\r\n\t\t\tconsole.error( 'blur direction must be either latitudinal or longitudinal!' );\r\n\r\n\t\t}\r\n\r\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\r\n\t\tconst STANDARD_DEVIATIONS = 3;\r\n\r\n\t\tconst blurMesh = this._lodMeshes[ lodOut ];\r\n\t\tblurMesh.material = blurMaterial;\r\n\r\n\t\tconst blurUniforms = blurMaterial.uniforms;\r\n\r\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\r\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\r\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\r\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\r\n\r\n\t\tif ( samples > MAX_SAMPLES ) {\r\n\r\n\t\t\tconsole.warn( `sigmaRadians, ${\r\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\r\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\r\n\r\n\t\t}\r\n\r\n\t\tconst weights = [];\r\n\t\tlet sum = 0;\r\n\r\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\r\n\r\n\t\t\tconst x = i / sigmaPixels;\r\n\t\t\tconst weight = Math.exp( - x * x / 2 );\r\n\t\t\tweights.push( weight );\r\n\r\n\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\tsum += weight;\r\n\r\n\t\t\t} else if ( i < samples ) {\r\n\r\n\t\t\t\tsum += 2 * weight;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\r\n\r\n\t\t\tweights[ i ] = weights[ i ] / sum;\r\n\r\n\t\t}\r\n\r\n\t\ttargetIn.texture.frame = ( targetIn.texture.frame || 0 ) + 1;\r\n\r\n\t\tblurUniforms.envMap.value = targetIn.texture;\r\n\t\tblurUniforms.samples.value = samples;\r\n\t\tblurUniforms.weights.array = weights;\r\n\t\tblurUniforms.latitudinal.value = direction === 'latitudinal' ? 1 : 0;\r\n\r\n\t\tif ( poleAxis ) {\r\n\r\n\t\t\tblurUniforms.poleAxis.value = poleAxis;\r\n\r\n\t\t}\r\n\r\n\t\tconst { _lodMax } = this;\r\n\t\tblurUniforms.dTheta.value = radiansPerPixel;\r\n\t\tblurUniforms.mipInt.value = _lodMax - lodIn;\r\n\r\n\t\tconst outputSize = this._sizeLods[ lodOut ];\r\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\r\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\r\n\r\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\r\n\t\trenderer.setRenderTarget( targetOut );\r\n\t\trenderer.render( blurMesh, _flatCamera );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction _createPlanes( lodMax ) {\r\n\r\n\tconst lodPlanes = [];\r\n\tconst sizeLods = [];\r\n\tconst sigmas = [];\r\n\tconst lodMeshes = [];\r\n\r\n\tlet lod = lodMax;\r\n\r\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\r\n\r\n\tfor ( let i = 0; i < totalLods; i ++ ) {\r\n\r\n\t\tconst sizeLod = Math.pow( 2, lod );\r\n\t\tsizeLods.push( sizeLod );\r\n\t\tlet sigma = 1.0 / sizeLod;\r\n\r\n\t\tif ( i > lodMax - LOD_MIN ) {\r\n\r\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\r\n\r\n\t\t} else if ( i === 0 ) {\r\n\r\n\t\t\tsigma = 0;\r\n\r\n\t\t}\r\n\r\n\t\tsigmas.push( sigma );\r\n\r\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\r\n\t\tconst min = - texelSize;\r\n\t\tconst max = 1 + texelSize;\r\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\r\n\r\n\t\tconst cubeFaces = 6;\r\n\t\tconst vertices = 6;\r\n\t\tconst positionSize = 3;\r\n\t\tconst uvSize = 2;\r\n\t\tconst faceIndexSize = 1;\r\n\r\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\r\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\r\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\r\n\r\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\r\n\r\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\r\n\t\t\tconst y = face > 2 ? 0 : - 1;\r\n\t\t\tconst coordinates = [\r\n\t\t\t\tx, y, 0,\r\n\t\t\t\tx + 2 / 3, y, 0,\r\n\t\t\t\tx + 2 / 3, y + 1, 0,\r\n\t\t\t\tx, y, 0,\r\n\t\t\t\tx + 2 / 3, y + 1, 0,\r\n\t\t\t\tx, y + 1, 0\r\n\t\t\t];\r\n\r\n\t\t\tconst faceIdx = _faceLib[ face ];\r\n\t\t\tposition.set( coordinates, positionSize * vertices * faceIdx );\r\n\t\t\tuv.set( uv1, uvSize * vertices * faceIdx );\r\n\t\t\tconst fill = [ faceIdx, faceIdx, faceIdx, faceIdx, faceIdx, faceIdx ];\r\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * faceIdx );\r\n\r\n\t\t}\r\n\r\n\t\tconst planes = new BufferGeometry();\r\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\r\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\r\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\r\n\t\tlodPlanes.push( planes );\r\n\t\tlodMeshes.push( new Mesh( planes, null ) );\r\n\r\n\t\tif ( lod > LOD_MIN ) {\r\n\r\n\t\t\tlod --;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn { lodPlanes, sizeLods, sigmas, lodMeshes };\r\n\r\n}\r\n\r\nfunction _createRenderTarget( width, height, params ) {\r\n\r\n\tconst cubeUVRenderTarget = new RenderTarget( width, height, params );\r\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\r\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\r\n\tcubeUVRenderTarget.texture.isPMREMTexture = true;\r\n\tcubeUVRenderTarget.scissorTest = true;\r\n\treturn cubeUVRenderTarget;\r\n\r\n}\r\n\r\nfunction _setViewport( target, x, y, width, height ) {\r\n\r\n\tconst viewY = target.height - height - y;\r\n\r\n\ttarget.viewport.set( x, viewY, width, height );\r\n\ttarget.scissor.set( x, viewY, width, height );\r\n\r\n}\r\n\r\nfunction _getMaterial() {\r\n\r\n\tconst material = new NodeMaterial();\r\n\tmaterial.depthTest = false;\r\n\tmaterial.depthWrite = false;\r\n\tmaterial.blending = NoBlending;\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nfunction _getBlurShader( lodMax, width, height ) {\r\n\r\n\tconst weights = uniforms( new Array( MAX_SAMPLES ).fill( 0 ) );\r\n\tconst poleAxis = uniform( new Vector3( 0, 1, 0 ) );\r\n\tconst dTheta = uniform( 0 );\r\n\tconst n = float( MAX_SAMPLES );\r\n\tconst latitudinal = uniform( 0 ); // false, bool\r\n\tconst samples = uniform( 1 ); // int\r\n\tconst envMap = texture( null );\r\n\tconst mipInt = uniform( 0 ); // int\r\n\tconst CUBEUV_TEXEL_WIDTH = float( 1 / width );\r\n\tconst CUBEUV_TEXEL_HEIGHT = float( 1 / height );\r\n\tconst CUBEUV_MAX_MIP = float( lodMax );\r\n\r\n\tconst materialUniforms = {\r\n\t\tn,\r\n\t\tlatitudinal,\r\n\t\tweights,\r\n\t\tpoleAxis,\r\n\t\toutputDirection,\r\n\t\tdTheta,\r\n\t\tsamples,\r\n\t\tenvMap,\r\n\t\tmipInt,\r\n\t\tCUBEUV_TEXEL_WIDTH,\r\n\t\tCUBEUV_TEXEL_HEIGHT,\r\n\t\tCUBEUV_MAX_MIP\r\n\t};\r\n\r\n\tconst material = _getMaterial();\r\n\tmaterial.uniforms = materialUniforms; // TODO: Move to outside of the material\r\n\tmaterial.fragmentNode = blur( { ...materialUniforms, latitudinal: latitudinal.equal( 1 ) } );\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nfunction _getCubemapMaterial( envTexture ) {\r\n\r\n\tconst material = _getMaterial();\r\n\tmaterial.fragmentNode = cubeTexture( envTexture, outputDirection );\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nfunction _getEquirectMaterial( envTexture ) {\r\n\r\n\tconst material = _getMaterial();\r\n\tmaterial.fragmentNode = texture( envTexture, equirectUV( outputDirection ), 0 );\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nexport default PMREMGenerator;\r\n", "class NodeFunctionInput {\r\n\r\n\tconstructor( type, name, count = null, qualifier = '', isConst = false ) {\r\n\r\n\t\tthis.type = type;\r\n\t\tthis.name = name;\r\n\t\tthis.count = count;\r\n\t\tthis.qualifier = qualifier;\r\n\t\tthis.isConst = isConst;\r\n\r\n\t}\r\n\r\n}\r\n\r\nNodeFunctionInput.isNodeFunctionInput = true;\r\n\r\nexport default NodeFunctionInput;\r\n", "import Node, { addNodeClass } from './Node.js';\r\n\r\nclass StructTypeNode extends Node {\r\n\r\n\tconstructor( types ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.types = types;\r\n\t\tthis.isStructTypeNode = true;\r\n\r\n\t}\r\n\r\n\tgetMemberTypes() {\r\n\r\n\t\treturn this.types;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StructTypeNode;\r\n\r\naddNodeClass( 'StructTypeNode', StructTypeNode );\r\n", "import Node, { addNodeClass } from './Node.js';\r\nimport StructTypeNode from './StructTypeNode.js';\r\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass OutputStructNode extends Node {\r\n\r\n\tconstructor( ...members ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.members = members;\r\n\r\n\t\tthis.isOutputStructNode = true;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst members = this.members;\r\n\t\tconst types = [];\r\n\r\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\r\n\r\n\t\t\ttypes.push( members[ i ].getNodeType( builder ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.nodeType = builder.getStructTypeFromNode( new StructTypeNode( types ) ).name;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst propertyName = builder.getOutputStructName();\r\n\t\tconst members = this.members;\r\n\r\n\t\tconst structPrefix = propertyName !== '' ? propertyName + '.' : '';\r\n\r\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\r\n\r\n\t\t\tconst snippet = members[ i ].build( builder, output );\r\n\r\n\t\t\tbuilder.addLineFlowCode( `${ structPrefix }m${ i } = ${ snippet }` );\r\n\r\n\t\t}\r\n\r\n\t\treturn propertyName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default OutputStructNode;\r\n\r\nexport const outputStruct = nodeProxy( OutputStructNode );\r\n\r\naddNodeClass( 'OutputStructNode', OutputStructNode );\r\n", "import { addNodeClass } from './Node.js';\r\nimport OutputStructNode from './OutputStructNode.js';\r\nimport { nodeProxy, vec4 } from '../shadernode/ShaderNode.js';\r\n\r\nfunction getTextureIndex( textures, name ) {\r\n\r\n\tfor ( let i = 0; i < textures.length; i ++ ) {\r\n\r\n\t\tif ( textures[ i ].name === name ) {\r\n\r\n\t\t\treturn i;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn - 1;\r\n\r\n}\r\n\r\nclass MRTNode extends OutputStructNode {\r\n\r\n\tconstructor( outputNodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.outputNodes = outputNodes;\r\n\r\n\t\tthis.isMRTNode = true;\r\n\r\n\t}\r\n\r\n\tgetNode( name ) {\r\n\r\n\t\treturn this.outputNodes[ name ];\r\n\r\n\t}\r\n\r\n\tmerge( mrtNode ) {\r\n\r\n\t\tconst outputs = { ...this.outputNodes, ...mrtNode.outputNodes };\r\n\r\n\t\treturn mrt( outputs );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst outputNodes = this.outputNodes;\r\n\t\tconst mrt = builder.renderer.getRenderTarget();\r\n\r\n\t\tconst members = [];\r\n\r\n\t\tconst textures = mrt.textures;\r\n\r\n\t\tfor ( const name in outputNodes ) {\r\n\r\n\t\t\tconst index = getTextureIndex( textures, name );\r\n\r\n\t\t\tmembers[ index ] = vec4( outputNodes[ name ] );\r\n\r\n\t\t}\r\n\r\n\t\tthis.members = members;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MRTNode;\r\n\r\nexport const mrt = nodeProxy( MRTNode );\r\n\r\naddNodeClass( 'MRTNode', MRTNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass HashNode extends Node {\r\n\r\n\tconstructor( seedNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.seedNode = seedNode;\r\n\r\n\t}\r\n\r\n\tsetup( /*builder*/ ) {\r\n\r\n\t\t// Taken from https://www.shadertoy.com/view/XlGcRh, originally from pcg-random.org\r\n\r\n\t\tconst state = this.seedNode.toUint().mul( 747796405 ).add( 2891336453 );\r\n\t\tconst word = state.shiftRight( state.shiftRight( 28 ).add( 4 ) ).bitXor( state ).mul( 277803737 );\r\n\t\tconst result = word.shiftRight( 22 ).bitXor( word );\r\n\r\n\t\treturn result.toFloat().mul( 1 / 2 ** 32 ); // Convert to range [0, 1)\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default HashNode;\r\n\r\nexport const hash = nodeProxy( HashNode );\r\n\r\naddNodeElement( 'hash', hash );\r\n\r\naddNodeClass( 'HashNode', HashNode );\r\n", "import { sub, mul, div, add } from './OperatorNode.js';\r\nimport { addNodeElement } from '../shadernode/ShaderNode.js';\r\nimport { PI, pow, sin } from './MathNode.js';\r\n\r\n// remapping functions https://iquilezles.org/articles/functions/\r\nexport const parabola = ( x, k ) => pow( mul( 4.0, x.mul( sub( 1.0, x ) ) ), k );\r\nexport const gain = ( x, k ) => x.lessThan( 0.5 ) ? parabola( x.mul( 2.0 ), k ).div( 2.0 ) : sub( 1.0, parabola( mul( sub( 1.0, x ), 2.0 ), k ).div( 2.0 ) );\r\nexport const pcurve = ( x, a, b ) => pow( div( pow( x, a ), add( pow( x, a ), pow( sub( 1.0, x ), b ) ) ), 1.0 / a );\r\nexport const sinc = ( x, k ) => sin( PI.mul( k.mul( x ).sub( 1.0 ) ) ).div( PI.mul( k.mul( x ).sub( 1.0 ) ) );\r\n\r\n\r\naddNodeElement( 'parabola', parabola );\r\naddNodeElement( 'gain', gain );\r\naddNodeElement( 'pcurve', pcurve );\r\naddNodeElement( 'sinc', sinc );\r\n", "// https://github.com/cabbibo/glsl-tri-noise-3d\r\n\r\nimport { loop } from '../utils/LoopNode.js';\r\nimport { float, vec3, tslFn } from '../shadernode/ShaderNode.js';\r\n\r\nconst tri = tslFn( ( [ x ] ) => {\r\n\r\n\treturn x.fract().sub( .5 ).abs();\r\n\r\n} );\r\n\r\nconst tri3 = tslFn( ( [ p ] ) => {\r\n\r\n\treturn vec3( tri( p.z.add( tri( p.y.mul( 1. ) ) ) ), tri( p.z.add( tri( p.x.mul( 1. ) ) ) ), tri( p.y.add( tri( p.x.mul( 1. ) ) ) ) );\r\n\r\n} );\r\n\r\nconst triNoise3D = tslFn( ( [ p_immutable, spd, time ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst z = float( 1.4 ).toVar();\r\n\tconst rz = float( 0.0 ).toVar();\r\n\tconst bp = vec3( p ).toVar();\r\n\r\n\tloop( { start: float( 0.0 ), end: float( 3.0 ), type: 'float', condition: '<=' }, () => {\r\n\r\n\t\tconst dg = vec3( tri3( bp.mul( 2.0 ) ) ).toVar();\r\n\t\tp.addAssign( dg.add( time.mul( float( 0.1 ).mul( spd ) ) ) );\r\n\t\tbp.mulAssign( 1.8 );\r\n\t\tz.mulAssign( 1.5 );\r\n\t\tp.mulAssign( 1.2 );\r\n\r\n\t\tconst t = float( tri( p.z.add( tri( p.x.add( tri( p.y ) ) ) ) ) ).toVar();\r\n\t\trz.addAssign( t.div( z ) );\r\n\t\tbp.addAssign( 0.14 );\r\n\r\n\t} );\r\n\r\n\treturn rz;\r\n\r\n} );\r\n\r\n// layouts\r\n\r\ntri.setLayout( {\r\n\tname: 'tri',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'float' }\r\n\t]\r\n} );\r\n\r\ntri3.setLayout( {\r\n\tname: 'tri3',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\ntriNoise3D.setLayout( {\r\n\tname: 'triNoise3D',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'spd', type: 'float' },\r\n\t\t{ name: 'time', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport { tri, tri3, triNoise3D };\r\n", "import CondNode from '../math/CondNode.js';\r\nimport { expression } from '../code/ExpressionNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nlet discardExpression;\r\n\r\nclass DiscardNode extends CondNode {\r\n\r\n\tconstructor( condNode ) {\r\n\r\n\t\tdiscardExpression = discardExpression || expression( 'discard' );\r\n\r\n\t\tsuper( condNode, discardExpression );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default DiscardNode;\r\n\r\nexport const inlineDiscard = nodeProxy( DiscardNode );\r\nexport const discard = ( condNode ) => inlineDiscard( condNode ).append();\r\nexport const Return = () => expression( 'return' ).append();\r\n\r\naddNodeElement( 'discard', discard ); // @TODO: Check... this cause a little confusing using in chaining\r\n\r\naddNodeClass( 'DiscardNode', DiscardNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass FunctionOverloadingNode extends Node {\r\n\r\n\tconstructor( functionNodes = [], ...parametersNodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.functionNodes = functionNodes;\r\n\t\tthis.parametersNodes = parametersNodes;\r\n\r\n\t\tthis._candidateFnCall = null;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType() {\r\n\r\n\t\treturn this.functionNodes[ 0 ].shaderNode.layout.type;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst params = this.parametersNodes;\r\n\r\n\t\tlet candidateFnCall = this._candidateFnCall;\r\n\r\n\t\tif ( candidateFnCall === null ) {\r\n\r\n\t\t\tlet candidateFn = null;\r\n\t\t\tlet candidateScore = - 1;\r\n\r\n\t\t\tfor ( const functionNode of this.functionNodes ) {\r\n\r\n\t\t\t\tconst shaderNode = functionNode.shaderNode;\r\n\t\t\t\tconst layout = shaderNode.layout;\r\n\r\n\t\t\t\tif ( layout === null ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'FunctionOverloadingNode: FunctionNode must be a layout.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst inputs = layout.inputs;\r\n\r\n\t\t\t\tif ( params.length === inputs.length ) {\r\n\r\n\t\t\t\t\tlet score = 0;\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst param = params[ i ];\r\n\t\t\t\t\t\tconst input = inputs[ i ];\r\n\r\n\t\t\t\t\t\tif ( param.getNodeType( builder ) === input.type ) {\r\n\r\n\t\t\t\t\t\t\tscore ++;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tscore = 0;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( score > candidateScore ) {\r\n\r\n\t\t\t\t\t\tcandidateFn = functionNode;\r\n\t\t\t\t\t\tcandidateScore = score;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._candidateFnCall = candidateFnCall = candidateFn( ...params );\r\n\r\n\t\t}\r\n\r\n\t\treturn candidateFnCall;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FunctionOverloadingNode;\r\n\r\nconst overloadingBaseFn = nodeProxy( FunctionOverloadingNode );\r\n\r\nexport const overloadingFn = ( functionNodes ) => ( ...params ) => overloadingBaseFn( functionNodes, ...params );\r\n\r\naddNodeClass( 'FunctionOverloadingNode', FunctionOverloadingNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { transformedNormalView } from '../accessors/NormalNode.js';\r\nimport { positionViewDirection } from '../accessors/PositionNode.js';\r\nimport { nodeImmutable, vec2, vec3 } from '../shadernode/ShaderNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nclass MatcapUVNode extends TempNode {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst x = vec3( positionViewDirection.z, 0, positionViewDirection.x.negate() ).normalize();\r\n\t\tconst y = positionViewDirection.cross( x );\r\n\r\n\t\treturn vec2( x.dot( transformedNormalView ), y.dot( transformedNormalView ) ).mul( 0.495 ).add( 0.5 ); // 0.495 to remove artifacts caused by undersized matcap disks\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MatcapUVNode;\r\n\r\nexport const matcapUV = nodeImmutable( MatcapUVNode );\r\n\r\naddNodeClass( 'MatcapUVNode', MatcapUVNode );\r\n", "import UniformNode from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeObject, nodeImmutable } from '../shadernode/ShaderNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nclass TimerNode extends UniformNode {\r\n\r\n\tconstructor( scope = TimerNode.LOCAL, scale = 1, value = 0 ) {\r\n\r\n\t\tsuper( value );\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.scale = scale;\r\n\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\t/*\r\n\t@TODO:\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === TimerNode.FRAME ) {\r\n\r\n\t\t\treturn 'uint';\r\n\r\n\t\t}\r\n\r\n\t\treturn 'float';\r\n\r\n\t}\r\n*/\r\n\tupdate( frame ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\t\tconst scale = this.scale;\r\n\r\n\t\tif ( scope === TimerNode.LOCAL ) {\r\n\r\n\t\t\tthis.value += frame.deltaTime * scale;\r\n\r\n\t\t} else if ( scope === TimerNode.DELTA ) {\r\n\r\n\t\t\tthis.value = frame.deltaTime * scale;\r\n\r\n\t\t} else if ( scope === TimerNode.FRAME ) {\r\n\r\n\t\t\tthis.value = frame.frameId;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// global\r\n\r\n\t\t\tthis.value = frame.time * scale;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.scope = this.scope;\r\n\t\tdata.scale = this.scale;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.scope = data.scope;\r\n\t\tthis.scale = data.scale;\r\n\r\n\t}\r\n\r\n}\r\n\r\nTimerNode.LOCAL = 'local';\r\nTimerNode.GLOBAL = 'global';\r\nTimerNode.DELTA = 'delta';\r\nTimerNode.FRAME = 'frame';\r\n\r\nexport default TimerNode;\r\n\r\n// @TODO: add support to use node in timeScale\r\nexport const timerLocal = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.LOCAL, timeScale, value ) );\r\nexport const timerGlobal = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.GLOBAL, timeScale, value ) );\r\nexport const timerDelta = ( timeScale, value = 0 ) => nodeObject( new TimerNode( TimerNode.DELTA, timeScale, value ) );\r\nexport const frameId = nodeImmutable( TimerNode, TimerNode.FRAME ).toUint();\r\n\r\naddNodeClass( 'TimerNode', TimerNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { timerLocal } from './TimerNode.js';\r\nimport { nodeObject, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass OscNode extends Node {\r\n\r\n\tconstructor( method = OscNode.SINE, timeNode = timerLocal() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.method = method;\r\n\t\tthis.timeNode = timeNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.timeNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst method = this.method;\r\n\t\tconst timeNode = nodeObject( this.timeNode );\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tif ( method === OscNode.SINE ) {\r\n\r\n\t\t\toutputNode = timeNode.add( 0.75 ).mul( Math.PI * 2 ).sin().mul( 0.5 ).add( 0.5 );\r\n\r\n\t\t} else if ( method === OscNode.SQUARE ) {\r\n\r\n\t\t\toutputNode = timeNode.fract().round();\r\n\r\n\t\t} else if ( method === OscNode.TRIANGLE ) {\r\n\r\n\t\t\toutputNode = timeNode.add( 0.5 ).fract().mul( 2 ).sub( 1 ).abs();\r\n\r\n\t\t} else if ( method === OscNode.SAWTOOTH ) {\r\n\r\n\t\t\toutputNode = timeNode.fract();\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.method = this.method;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.method = data.method;\r\n\r\n\t}\r\n\r\n}\r\n\r\nOscNode.SINE = 'sine';\r\nOscNode.SQUARE = 'square';\r\nOscNode.TRIANGLE = 'triangle';\r\nOscNode.SAWTOOTH = 'sawtooth';\r\n\r\nexport default OscNode;\r\n\r\nexport const oscSine = nodeProxy( OscNode, OscNode.SINE );\r\nexport const oscSquare = nodeProxy( OscNode, OscNode.SQUARE );\r\nexport const oscTriangle = nodeProxy( OscNode, OscNode.TRIANGLE );\r\nexport const oscSawtooth = nodeProxy( OscNode, OscNode.SAWTOOTH );\r\n\r\naddNodeClass( 'OscNode', OscNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass PackingNode extends TempNode {\r\n\r\n\tconstructor( scope, node ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.node = node;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { scope, node } = this;\r\n\r\n\t\tlet result = null;\r\n\r\n\t\tif ( scope === PackingNode.DIRECTION_TO_COLOR ) {\r\n\r\n\t\t\tresult = node.mul( 0.5 ).add( 0.5 );\r\n\r\n\t\t} else if ( scope === PackingNode.COLOR_TO_DIRECTION ) {\r\n\r\n\t\t\tresult = node.mul( 2.0 ).sub( 1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\nPackingNode.DIRECTION_TO_COLOR = 'directionToColor';\r\nPackingNode.COLOR_TO_DIRECTION = 'colorToDirection';\r\n\r\nexport default PackingNode;\r\n\r\nexport const directionToColor = nodeProxy( PackingNode, PackingNode.DIRECTION_TO_COLOR );\r\nexport const colorToDirection = nodeProxy( PackingNode, PackingNode.COLOR_TO_DIRECTION );\r\n\r\naddNodeElement( 'directionToColor', directionToColor );\r\naddNodeElement( 'colorToDirection', colorToDirection );\r\n\r\naddNodeClass( 'PackingNode', PackingNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { float, addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass RemapNode extends Node {\r\n\r\n\tconstructor( node, inLowNode, inHighNode, outLowNode = float( 0 ), outHighNode = float( 1 ) ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.inLowNode = inLowNode;\r\n\t\tthis.inHighNode = inHighNode;\r\n\t\tthis.outLowNode = outLowNode;\r\n\t\tthis.outHighNode = outHighNode;\r\n\r\n\t\tthis.doClamp = true;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { node, inLowNode, inHighNode, outLowNode, outHighNode, doClamp } = this;\r\n\r\n\t\tlet t = node.sub( inLowNode ).div( inHighNode.sub( inLowNode ) );\r\n\r\n\t\tif ( doClamp === true ) t = t.clamp();\r\n\r\n\t\treturn t.mul( outHighNode.sub( outLowNode ) ).add( outLowNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RemapNode;\r\n\r\nexport const remap = nodeProxy( RemapNode, null, null, { doClamp: false } );\r\nexport const remapClamp = nodeProxy( RemapNode );\r\n\r\naddNodeElement( 'remap', remap );\r\naddNodeElement( 'remapClamp', remapClamp );\r\n\r\naddNodeClass( 'RemapNode', RemapNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy, vec2 } from '../shadernode/ShaderNode.js';\r\n\r\nclass RotateUVNode extends TempNode {\r\n\r\n\tconstructor( uvNode, rotationNode, centerNode = vec2( 0.5 ) ) {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\tthis.uvNode = uvNode;\r\n\t\tthis.rotationNode = rotationNode;\r\n\t\tthis.centerNode = centerNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { uvNode, rotationNode, centerNode } = this;\r\n\r\n\t\tconst vector = uvNode.sub( centerNode );\r\n\r\n\t\treturn vector.rotate( rotationNode ).add( centerNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RotateUVNode;\r\n\r\nexport const rotateUV = nodeProxy( RotateUVNode );\r\n\r\naddNodeElement( 'rotateUV', rotateUV );\r\n\r\naddNodeClass( 'RotateUVNode', RotateUVNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport {\r\n\taddNodeElement,\r\n\tnodeProxy,\r\n\tvec4,\r\n\tmat2,\r\n\tmat4,\r\n} from '../shadernode/ShaderNode.js';\r\nimport { cos, sin } from '../math/MathNode.js';\r\n\r\nclass RotateNode extends TempNode {\r\n\r\n\tconstructor( positionNode, rotationNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.positionNode = positionNode;\r\n\t\tthis.rotationNode = rotationNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.positionNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { rotationNode, positionNode } = this;\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tif ( nodeType === 'vec2' ) {\r\n\r\n\t\t\tconst cosAngle = rotationNode.cos();\r\n\t\t\tconst sinAngle = rotationNode.sin();\r\n\r\n\t\t\tconst rotationMatrix = mat2(\r\n\t\t\t\tcosAngle, sinAngle,\r\n\t\t\t\tsinAngle.negate(), cosAngle\r\n\t\t\t);\r\n\r\n\t\t\treturn rotationMatrix.mul( positionNode );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst rotation = rotationNode;\r\n\t\t\tconst rotationXMatrix = mat4( vec4( 1.0, 0.0, 0.0, 0.0 ), vec4( 0.0, cos( rotation.x ), sin( rotation.x ).negate(), 0.0 ), vec4( 0.0, sin( rotation.x ), cos( rotation.x ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\r\n\t\t\tconst rotationYMatrix = mat4( vec4( cos( rotation.y ), 0.0, sin( rotation.y ), 0.0 ), vec4( 0.0, 1.0, 0.0, 0.0 ), vec4( sin( rotation.y ).negate(), 0.0, cos( rotation.y ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\r\n\t\t\tconst rotationZMatrix = mat4( vec4( cos( rotation.z ), sin( rotation.z ).negate(), 0.0, 0.0 ), vec4( sin( rotation.z ), cos( rotation.z ), 0.0, 0.0 ), vec4( 0.0, 0.0, 1.0, 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\r\n\r\n\t\t\treturn rotationXMatrix.mul( rotationYMatrix ).mul( rotationZMatrix ).mul( vec4( positionNode, 1.0 ) ).xyz;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RotateNode;\r\n\r\nexport const rotate = nodeProxy( RotateNode );\r\n\r\naddNodeElement( 'rotate', rotate );\r\n\r\naddNodeClass( 'RotateNode', RotateNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { nodeProxy, float, vec2 } from '../shadernode/ShaderNode.js';\r\n\r\nclass SpriteSheetUVNode extends Node {\r\n\r\n\tconstructor( countNode, uvNode = uv(), frameNode = float( 0 ) ) {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\tthis.countNode = countNode;\r\n\t\tthis.uvNode = uvNode;\r\n\t\tthis.frameNode = frameNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { frameNode, uvNode, countNode } = this;\r\n\r\n\t\tconst { width, height } = countNode;\r\n\r\n\t\tconst frameNum = frameNode.mod( width.mul( height ) ).floor();\r\n\r\n\t\tconst column = frameNum.mod( width );\r\n\t\tconst row = height.sub( frameNum.add( 1 ).div( width ).ceil() );\r\n\r\n\t\tconst scale = countNode.reciprocal();\r\n\t\tconst uvFrameOffset = vec2( column, row );\r\n\r\n\t\treturn uvNode.add( uvFrameOffset ).mul( scale );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SpriteSheetUVNode;\r\n\r\nexport const spritesheetUV = nodeProxy( SpriteSheetUVNode );\r\n\r\naddNodeClass( 'SpriteSheetUVNode', SpriteSheetUVNode );\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport { nodeProxy, addNodeElement } from '../shadernode/ShaderNode.js';\r\nimport ArrayElementNode from './ArrayElementNode.js';\r\n\r\nclass StorageArrayElementNode extends ArrayElementNode {\r\n\r\n\tconstructor( storageBufferNode, indexNode ) {\r\n\r\n\t\tsuper( storageBufferNode, indexNode );\r\n\r\n\t\tthis.isStorageArrayElementNode = true;\r\n\r\n\t}\r\n\r\n\tset storageBufferNode( value ) {\r\n\r\n\t\tthis.node = value;\r\n\r\n\t}\r\n\r\n\tget storageBufferNode() {\r\n\r\n\t\treturn this.node;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( builder.isAvailable( 'storageBuffer' ) === false ) {\r\n\r\n\t\t\tif ( ! this.node.instanceIndex && this.node.bufferObject === true ) {\r\n\r\n\t\t\t\tbuilder.setupPBO( this.node );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tconst isAssignContext = builder.context.assign;\r\n\r\n\t\t//\r\n\r\n\t\tif ( builder.isAvailable( 'storageBuffer' ) === false ) {\r\n\r\n\t\t\tconst { node } = this;\r\n\r\n\t\t\tif ( ! node.instanceIndex && this.node.bufferObject === true && isAssignContext !== true ) {\r\n\r\n\t\t\t\tsnippet = builder.generatePBO( this );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippet = node.build( builder );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = super.generate( builder );\r\n\r\n\t\t}\r\n\r\n\t\tif ( isAssignContext !== true ) {\r\n\r\n\t\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\t\tsnippet = builder.format( snippet, type, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StorageArrayElementNode;\r\n\r\nexport const storageElement = nodeProxy( StorageArrayElementNode );\r\n\r\naddNodeElement( 'storageElement', storageElement );\r\n\r\naddNodeClass( 'StorageArrayElementNode', StorageArrayElementNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { normalLocal } from '../accessors/NormalNode.js';\r\nimport { positionLocal } from '../accessors/PositionNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { addNodeElement, nodeProxy, float, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nclass TriplanarTexturesNode extends Node {\r\n\r\n\tconstructor( textureXNode, textureYNode = null, textureZNode = null, scaleNode = float( 1 ), positionNode = positionLocal, normalNode = normalLocal ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.textureXNode = textureXNode;\r\n\t\tthis.textureYNode = textureYNode;\r\n\t\tthis.textureZNode = textureZNode;\r\n\r\n\t\tthis.scaleNode = scaleNode;\r\n\r\n\t\tthis.positionNode = positionNode;\r\n\t\tthis.normalNode = normalNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { textureXNode, textureYNode, textureZNode, scaleNode, positionNode, normalNode } = this;\r\n\r\n\t\t// Ref: https://github.com/keijiro/StandardTriplanar\r\n\r\n\t\t// Blending factor of triplanar mapping\r\n\t\tlet bf = normalNode.abs().normalize();\r\n\t\tbf = bf.div( bf.dot( vec3( 1.0 ) ) );\r\n\r\n\t\t// Triplanar mapping\r\n\t\tconst tx = positionNode.yz.mul( scaleNode );\r\n\t\tconst ty = positionNode.zx.mul( scaleNode );\r\n\t\tconst tz = positionNode.xy.mul( scaleNode );\r\n\r\n\t\t// Base color\r\n\t\tconst textureX = textureXNode.value;\r\n\t\tconst textureY = textureYNode !== null ? textureYNode.value : textureX;\r\n\t\tconst textureZ = textureZNode !== null ? textureZNode.value : textureX;\r\n\r\n\t\tconst cx = texture( textureX, tx ).mul( bf.x );\r\n\t\tconst cy = texture( textureY, ty ).mul( bf.y );\r\n\t\tconst cz = texture( textureZ, tz ).mul( bf.z );\r\n\r\n\t\treturn add( cx, cy, cz );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TriplanarTexturesNode;\r\n\r\nexport const triplanarTextures = nodeProxy( TriplanarTexturesNode );\r\nexport const triplanarTexture = ( ...params ) => triplanarTextures( ...params );\r\n\r\naddNodeElement( 'triplanarTexture', triplanarTexture );\r\n\r\naddNodeClass( 'TriplanarTexturesNode', TriplanarTexturesNode );\r\n", "import { Matrix3 } from './Matrix3.js';\r\nimport { Vector3 } from './Vector3.js';\r\n\r\nconst _vector1 = /*@__PURE__*/ new Vector3();\r\nconst _vector2 = /*@__PURE__*/ new Vector3();\r\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\r\n\r\nclass Plane {\r\n\r\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\r\n\r\n\t\tthis.isPlane = true;\r\n\r\n\t\t// normal is assumed to be normalized\r\n\r\n\t\tthis.normal = normal;\r\n\t\tthis.constant = constant;\r\n\r\n\t}\r\n\r\n\tset( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponents( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCoplanarPoints( a, b, c ) {\r\n\r\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.constant *= - 1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t}\r\n\r\n\tdistanceToSphere( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t}\r\n\r\n\tprojectPoint( point, target ) {\r\n\r\n\t\treturn target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );\r\n\r\n\t}\r\n\r\n\tintersectLine( line, target ) {\r\n\r\n\t\tconst direction = line.delta( _vector1 );\r\n\r\n\t\tconst denominator = this.normal.dot( direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\treturn target.copy( line.start );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( line.start ).addScaledVector( direction, t );\r\n\r\n\t}\r\n\r\n\tintersectsLine( line ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tconst startSign = this.distanceToPoint( line.start );\r\n\t\tconst endSign = this.distanceToPoint( line.end );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsPlane( this );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t}\r\n\r\n\tcoplanarPoint( target ) {\r\n\r\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\r\n\r\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\r\n\r\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\r\n\r\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.constant -= offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Plane };\r\n", "import TextureNode from '../accessors/TextureNode.js';\r\nimport { nodeObject, vec2 } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { viewportTopLeft } from '../display/ViewportNode.js';\r\n\r\nimport { HalfFloatType, LinearMipMapLinearFilter } from '../../constants.js';\r\nimport { Plane } from '../../math/Plane.js';\r\nimport { Object3D } from '../../core/Object3D.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\n\r\nconst _reflectorPlane = new Plane();\r\nconst _normal = new Vector3();\r\nconst _reflectorWorldPosition = new Vector3();\r\nconst _cameraWorldPosition = new Vector3();\r\nconst _rotationMatrix = new Matrix4();\r\nconst _lookAtPosition = new Vector3( 0, 0, - 1 );\r\nconst clipPlane = new Vector4();\r\n\r\nconst _view = new Vector3();\r\nconst _target = new Vector3();\r\nconst _q = new Vector4();\r\n\r\nconst _size = new Vector2();\r\n\r\nconst _defaultRT = new RenderTarget();\r\nconst _defaultUV = vec2( viewportTopLeft.x.oneMinus(), viewportTopLeft.y );\r\n\r\nlet _inReflector = false;\r\n\r\nclass ReflectorNode extends TextureNode {\r\n\r\n\tconstructor( parameters = {} ) {\r\n\r\n\t\tsuper( _defaultRT.texture, _defaultUV );\r\n\r\n\t\tconst {\r\n\t\t\ttarget = new Object3D(),\r\n\t\t\tresolution = 1,\r\n\t\t\tgenerateMipmaps = false,\r\n\t\t\tbounces = true\r\n\t\t} = parameters;\r\n\r\n\t\t//\r\n\r\n\t\tthis.target = target;\r\n\t\tthis.resolution = resolution;\r\n\t\tthis.generateMipmaps = generateMipmaps;\r\n\t\tthis.bounces = bounces;\r\n\r\n\t\tthis.updateBeforeType = bounces ? NodeUpdateType.RENDER : NodeUpdateType.FRAME;\r\n\r\n\t\tthis.virtualCameras = new WeakMap();\r\n\t\tthis.renderTargets = new WeakMap();\r\n\r\n\r\n\t}\r\n\r\n\t_updateResolution( renderTarget, renderer ) {\r\n\r\n\t\tconst resolution = this.resolution;\r\n\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\trenderTarget.setSize( Math.round( _size.width * resolution ), Math.round( _size.height * resolution ) );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis._updateResolution( _defaultRT, builder.renderer );\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this.textureNode;\r\n\r\n\t}\r\n\r\n\tgetVirtualCamera( camera ) {\r\n\r\n\t\tlet virtualCamera = this.virtualCameras.get( camera );\r\n\r\n\t\tif ( virtualCamera === undefined ) {\r\n\r\n\t\t\tvirtualCamera = camera.clone();\r\n\r\n\t\t\tthis.virtualCameras.set( camera, virtualCamera );\r\n\r\n\t\t}\r\n\r\n\t\treturn virtualCamera;\r\n\r\n\t}\r\n\r\n\tgetRenderTarget( camera ) {\r\n\r\n\t\tlet renderTarget = this.renderTargets.get( camera );\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\trenderTarget = new RenderTarget( 0, 0, { type: HalfFloatType } );\r\n\r\n\t\t\tif ( this.generateMipmaps === true ) {\r\n\r\n\t\t\t    renderTarget.texture.minFilter = LinearMipMapLinearFilter;\r\n\t\t\t    renderTarget.texture.generateMipmaps = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.renderTargets.set( camera, renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\treturn renderTarget;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tif ( this.bounces === false && _inReflector ) return false;\r\n\r\n\t\t_inReflector = true;\r\n\r\n\t\tconst { scene, camera, renderer, material } = frame;\r\n\t\tconst { target } = this;\r\n\r\n\t\tconst virtualCamera = this.getVirtualCamera( camera );\r\n\t\tconst renderTarget = this.getRenderTarget( virtualCamera );\r\n\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\tthis._updateResolution( renderTarget, renderer );\r\n\r\n\t\t//\r\n\r\n\t\t_reflectorWorldPosition.setFromMatrixPosition( target.matrixWorld );\r\n\t\t_cameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\r\n\r\n\t\t_rotationMatrix.extractRotation( target.matrixWorld );\r\n\r\n\t\t_normal.set( 0, 0, 1 );\r\n\t\t_normal.applyMatrix4( _rotationMatrix );\r\n\r\n\t\t_view.subVectors( _reflectorWorldPosition, _cameraWorldPosition );\r\n\r\n\t\t// Avoid rendering when reflector is facing away\r\n\r\n\t\tif ( _view.dot( _normal ) > 0 ) return;\r\n\r\n\t\t_view.reflect( _normal ).negate();\r\n\t\t_view.add( _reflectorWorldPosition );\r\n\r\n\t\t_rotationMatrix.extractRotation( camera.matrixWorld );\r\n\r\n\t\t_lookAtPosition.set( 0, 0, - 1 );\r\n\t\t_lookAtPosition.applyMatrix4( _rotationMatrix );\r\n\t\t_lookAtPosition.add( _cameraWorldPosition );\r\n\r\n\t\t_target.subVectors( _reflectorWorldPosition, _lookAtPosition );\r\n\t\t_target.reflect( _normal ).negate();\r\n\t\t_target.add( _reflectorWorldPosition );\r\n\r\n\t\t//\r\n\r\n\t\tvirtualCamera.coordinateSystem = camera.coordinateSystem;\r\n\t\tvirtualCamera.position.copy( _view );\r\n\t\tvirtualCamera.up.set( 0, 1, 0 );\r\n\t\tvirtualCamera.up.applyMatrix4( _rotationMatrix );\r\n\t\tvirtualCamera.up.reflect( _normal );\r\n\t\tvirtualCamera.lookAt( _target );\r\n\r\n\t\tvirtualCamera.near = camera.near;\r\n\t\tvirtualCamera.far = camera.far;\r\n\r\n\t\tvirtualCamera.updateMatrixWorld();\r\n\t\tvirtualCamera.projectionMatrix.copy( camera.projectionMatrix );\r\n\r\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\r\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\r\n\t\t_reflectorPlane.setFromNormalAndCoplanarPoint( _normal, _reflectorWorldPosition );\r\n\t\t_reflectorPlane.applyMatrix4( virtualCamera.matrixWorldInverse );\r\n\r\n\t\tclipPlane.set( _reflectorPlane.normal.x, _reflectorPlane.normal.y, _reflectorPlane.normal.z, _reflectorPlane.constant );\r\n\r\n\t\tconst projectionMatrix = virtualCamera.projectionMatrix;\r\n\r\n\t\t_q.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\r\n\t\t_q.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\r\n\t\t_q.z = - 1.0;\r\n\t\t_q.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\r\n\r\n\t\t// Calculate the scaled plane vector\r\n\t\tclipPlane.multiplyScalar( 1.0 / clipPlane.dot( _q ) );\r\n\r\n\t\tconst clipBias = 0;\r\n\r\n\t\t// Replacing the third row of the projection matrix\r\n\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\r\n\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\r\n\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z - clipBias;\r\n\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\r\n\r\n\t\t//\r\n\r\n\t\tthis.value = renderTarget.texture;\r\n\r\n\t\tmaterial.visible = false;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\trenderer.render( scene, virtualCamera );\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\tmaterial.visible = true;\r\n\r\n\t\t_inReflector = false;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const reflector = ( parameters ) => nodeObject( new ReflectorNode( parameters ) );\r\n\r\nexport default ReflectorNode;\r\n\r\n", "import { BufferGeometry } from '../../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../../core/BufferAttribute.js';\r\nimport { Mesh } from '../../objects/Mesh.js';\r\nimport { OrthographicCamera } from '../../cameras/OrthographicCamera.js';\r\n\r\n// Helper for passes that need to fill the viewport with a single quad.\r\n\r\nconst _camera = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\r\n// https://github.com/mrdoob/three.js/pull/21358\r\n\r\nclass QuadGeometry extends BufferGeometry {\r\n\r\n\tconstructor( flipY = false ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tconst uv = flipY === false ? [ 0, - 1, 0, 1, 2, 1 ] : [ 0, 2, 0, 0, 2, 0 ];\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uv, 2 ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _geometry = /*@__PURE__*/ new QuadGeometry();\r\n\r\nclass QuadMesh extends Mesh {\r\n\r\n\tconstructor( material = null ) {\r\n\r\n\t\tsuper( _geometry, material );\r\n\r\n\t\tthis.camera = _camera;\r\n\r\n\t}\r\n\r\n\trenderAsync( renderer ) {\r\n\r\n\t\treturn renderer.renderAsync( this, _camera );\r\n\r\n\t}\r\n\r\n\trender( renderer ) {\r\n\r\n\t\trenderer.render( this, _camera );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default QuadMesh;\r\n", "import { nodeObject, addNodeElement } from '../shadernode/ShaderNode.js';\r\nimport TextureNode from '../accessors/TextureNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport NodeMaterial from '../materials/NodeMaterial.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\n\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { HalfFloatType } from '../../constants.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nclass RTTNode extends TextureNode {\r\n\r\n\tconstructor( node, width = null, height = null, options = { type: HalfFloatType } ) {\r\n\r\n\t\tconst renderTarget = new RenderTarget( width, height, options );\r\n\r\n\t\tsuper( renderTarget.texture, uv() );\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.renderTarget = renderTarget;\r\n\r\n\t\tthis.textureNeedsUpdate = true;\r\n\t\tthis.autoUpdate = true;\r\n\r\n\t\tthis.updateMap = new WeakMap();\r\n\r\n\t\tthis._rttNode = null;\r\n\t\tthis._quadMesh = new QuadMesh( new NodeMaterial() );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tget autoSize() {\r\n\r\n\t\treturn this.width === null;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis._rttNode = this.node.context( builder.getSharedContext() );\r\n\t\tthis._quadMesh.material.needsUpdate = true;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tconst effectiveWidth = width * this.pixelRatio;\r\n\t\tconst effectiveHeight = height * this.pixelRatio;\r\n\r\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t\tthis.textureNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\tsetPixelRatio( pixelRatio ) {\r\n\r\n\t\tthis.pixelRatio = pixelRatio;\r\n\r\n\t\tthis.setSize( this.width, this.height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( { renderer } ) {\r\n\r\n\t\tif ( this.textureNeedsUpdate === false && this.autoUpdate === false ) return;\r\n\r\n\t\tthis.textureNeedsUpdate = false;\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.autoSize === true ) {\r\n\r\n\t\t\tthis.pixelRatio = renderer.getPixelRatio();\r\n\r\n\t\t\tconst size = renderer.getSize( _size );\r\n\r\n\t\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis._quadMesh.material.fragmentNode = this._rttNode;\r\n\r\n\t\t//\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\trenderer.setRenderTarget( this.renderTarget );\r\n\r\n\t\tthis._quadMesh.render( renderer );\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst newNode = new TextureNode( this.value, this.uvNode, this.levelNode );\r\n\t\tnewNode.sampler = this.sampler;\r\n\t\tnewNode.referenceNode = this;\r\n\r\n\t\treturn newNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RTTNode;\r\n\r\nexport const rtt = ( node, ...params ) => nodeObject( new RTTNode( nodeObject( node ), ...params ) );\r\n\r\naddNodeElement( 'toTexture', ( node, ...params ) => node.isTextureNode ? node : rtt( node, ...params ) );\r\n\r\naddNodeClass( 'RTTNode', RTTNode );\r\n", "import { varying } from '../core/VaryingNode.js';\r\nimport { cameraViewMatrix } from './CameraNode.js';\r\nimport { normalGeometry, normalLocal, normalView, normalWorld, transformedNormalView } from './NormalNode.js';\r\nimport { tangentGeometry, tangentLocal, tangentView, tangentWorld, transformedTangentView } from './TangentNode.js';\r\n\r\nconst getBitangent = ( crossNormalTangent ) => crossNormalTangent.mul( tangentGeometry.w ).xyz;\r\n\r\nexport const bitangentGeometry = /*#__PURE__*/ varying( getBitangent( normalGeometry.cross( tangentGeometry ) ), 'v_bitangentGeometry' ).normalize().toVar( 'bitangentGeometry' );\r\nexport const bitangentLocal = /*#__PURE__*/ varying( getBitangent( normalLocal.cross( tangentLocal ) ), 'v_bitangentLocal' ).normalize().toVar( 'bitangentLocal' );\r\nexport const bitangentView = /*#__PURE__*/ varying( getBitangent( normalView.cross( tangentView ) ), 'v_bitangentView' ).normalize().toVar( 'bitangentView' );\r\nexport const bitangentWorld = /*#__PURE__*/ varying( getBitangent( normalWorld.cross( tangentWorld ) ), 'v_bitangentWorld' ).normalize().toVar( 'bitangentWorld' );\r\nexport const transformedBitangentView = /*#__PURE__*/ getBitangent( transformedNormalView.cross( transformedTangentView ) ).normalize().toVar( 'transformedBitangentView' );\r\nexport const transformedBitangentWorld = /*#__PURE__*/ transformedBitangentView.transformDirection( cameraViewMatrix ).normalize().toVar( 'transformedBitangentWorld' );\r\n", "import { bitangentView } from './BitangentNode.js';\r\nimport { normalView, transformedNormalView } from './NormalNode.js';\r\nimport { tangentView } from './TangentNode.js';\r\nimport { mat3 } from '../shadernode/ShaderNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { anisotropy, anisotropyB, roughness } from '../core/PropertyNode.js';\r\nimport { positionViewDirection } from './PositionNode.js';\r\n\r\nexport const TBNViewMatrix = mat3( tangentView, bitangentView, normalView );\r\n\r\nexport const parallaxDirection = positionViewDirection.mul( TBNViewMatrix )/*.normalize()*/;\r\nexport const parallaxUV = ( uv, scale ) => uv.sub( parallaxDirection.mul( scale ) );\r\n\r\nexport const transformedBentNormalView = ( () => {\r\n\r\n\t// https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy\r\n\r\n\tlet bentNormal = anisotropyB.cross( positionViewDirection );\r\n\tbentNormal = bentNormal.cross( anisotropyB ).normalize();\r\n\tbentNormal = mix( bentNormal, transformedNormalView, anisotropy.mul( roughness.oneMinus() ).oneMinus().pow2().pow2() ).normalize();\r\n\r\n\treturn bentNormal;\r\n\r\n\r\n} )();\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport AttributeNode from '../core/AttributeNode.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\nclass VertexColorNode extends AttributeNode {\r\n\r\n\tconstructor( index = 0 ) {\r\n\r\n\t\tsuper( null, 'vec4' );\r\n\r\n\t\tthis.isVertexColorNode = true;\r\n\r\n\t\tthis.index = index;\r\n\r\n\t}\r\n\r\n\tgetAttributeName( /*builder*/ ) {\r\n\r\n\t\tconst index = this.index;\r\n\r\n\t\treturn 'color' + ( index > 0 ? index : '' );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst attributeName = this.getAttributeName( builder );\r\n\t\tconst geometryAttribute = builder.hasGeometryAttribute( attributeName );\r\n\r\n\t\tlet result;\r\n\r\n\t\tif ( geometryAttribute === true ) {\r\n\r\n\t\t\tresult = super.generate( builder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Vertex color fallback should be white\r\n\t\t\tresult = builder.generateConst( this.nodeType, new Vector4( 1, 1, 1, 1 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.index = this.index;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.index = data.index;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VertexColorNode;\r\n\r\nexport const vertexColor = ( ...params ) => nodeObject( new VertexColorNode( ...params ) );\r\n\r\naddNodeClass( 'VertexColorNode', VertexColorNode );\r\n", "import ReferenceNode from './ReferenceNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass RendererReferenceNode extends ReferenceNode {\r\n\r\n\tconstructor( property, inputType, renderer = null ) {\r\n\r\n\t\tsuper( property, inputType, renderer );\r\n\r\n\t\tthis.renderer = renderer;\r\n\r\n\t}\r\n\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.renderer !== null ? this.renderer : state.renderer;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RendererReferenceNode;\r\n\r\nexport const rendererReference = ( name, type, renderer ) => nodeObject( new RendererReferenceNode( name, type, renderer ) );\r\n\r\naddNodeClass( 'RendererReferenceNode', RendererReferenceNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { add, mul, div } from '../math/OperatorNode.js';\r\nimport { floor, ceil, fract, pow } from '../math/MathNode.js';\r\nimport { nodeProxy, addNodeElement, float, vec2, vec4, int } from '../shadernode/ShaderNode.js';\r\n\r\n// Mipped Bicubic Texture Filtering by N8\r\n// https://www.shadertoy.com/view/Dl2SDW\r\n\r\nconst bC = 1.0 / 6.0;\r\n\r\nconst w0 = ( a ) => mul( bC, mul( a, mul( a, a.negate().add( 3.0 ) ).sub( 3.0 ) ).add( 1.0 ) );\r\n\r\nconst w1 = ( a ) => mul( bC, mul( a, mul( a, mul( 3.0, a ).sub( 6.0 ) ) ).add( 4.0 ) );\r\n\r\nconst w2 = ( a ) => mul( bC, mul( a, mul( a, mul( - 3.0, a ).add( 3.0 ) ).add( 3.0 ) ).add( 1.0 ) );\r\n\r\nconst w3 = ( a ) => mul( bC, pow( a, 3 ) );\r\n\r\nconst g0 = ( a ) => w0( a ).add( w1( a ) );\r\n\r\nconst g1 = ( a ) => w2( a ).add( w3( a ) );\r\n\r\n// h0 and h1 are the two offset functions\r\nconst h0 = ( a ) => add( - 1.0, w1( a ).div( w0( a ).add( w1( a ) ) ) );\r\n\r\nconst h1 = ( a ) => add( 1.0, w3( a ).div( w2( a ).add( w3( a ) ) ) );\r\n\r\nconst bicubic = ( textureNode, texelSize, lod ) => {\r\n\r\n\tconst uv = textureNode.uvNode;\r\n\tconst uvScaled = mul( uv, texelSize.zw ).add( 0.5 );\r\n\r\n\tconst iuv = floor( uvScaled );\r\n\tconst fuv = fract( uvScaled );\r\n\r\n\tconst g0x = g0( fuv.x );\r\n\tconst g1x = g1( fuv.x );\r\n\tconst h0x = h0( fuv.x );\r\n\tconst h1x = h1( fuv.x );\r\n\tconst h0y = h0( fuv.y );\r\n\tconst h1y = h1( fuv.y );\r\n\r\n\tconst p0 = vec2( iuv.x.add( h0x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\tconst p1 = vec2( iuv.x.add( h1x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\tconst p2 = vec2( iuv.x.add( h0x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\tconst p3 = vec2( iuv.x.add( h1x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\r\n\tconst a = g0( fuv.y ).mul( add( g0x.mul( textureNode.uv( p0 ).level( lod ) ), g1x.mul( textureNode.uv( p1 ).level( lod ) ) ) );\r\n\tconst b = g1( fuv.y ).mul( add( g0x.mul( textureNode.uv( p2 ).level( lod ) ), g1x.mul( textureNode.uv( p3 ).level( lod ) ) ) );\r\n\r\n\treturn a.add( b );\r\n\r\n};\r\n\r\nconst textureBicubicMethod = ( textureNode, lodNode ) => {\r\n\r\n\tconst fLodSize = vec2( textureNode.size( int( lodNode ) ) );\r\n\tconst cLodSize = vec2( textureNode.size( int( lodNode.add( 1.0 ) ) ) );\r\n\tconst fLodSizeInv = div( 1.0, fLodSize );\r\n\tconst cLodSizeInv = div( 1.0, cLodSize );\r\n\tconst fSample = bicubic( textureNode, vec4( fLodSizeInv, fLodSize ), floor( lodNode ) );\r\n\tconst cSample = bicubic( textureNode, vec4( cLodSizeInv, cLodSize ), ceil( lodNode ) );\r\n\r\n\treturn fract( lodNode ).mix( fSample, cSample );\r\n\r\n};\r\n\r\nclass TextureBicubicNode extends TempNode {\r\n\r\n\tconstructor( textureNode, blurNode = float( 3 ) ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.blurNode = blurNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn textureBicubicMethod( this.textureNode, this.blurNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TextureBicubicNode;\r\n\r\nexport const textureBicubic = nodeProxy( TextureBicubicNode );\r\n\r\naddNodeElement( 'bicubic', textureBicubic );\r\n\r\naddNodeClass( 'TextureBicubicNode', TextureBicubicNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\r\n\r\nclass PointUVNode extends Node {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\tthis.isPointUVNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( /*builder*/ ) {\r\n\r\n\t\treturn 'vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PointUVNode;\r\n\r\nexport const pointUV = nodeImmutable( PointUVNode );\r\n\r\naddNodeClass( 'PointUVNode', PointUVNode );\r\n", "import Node from '../core/Node.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\r\nimport { reference } from './ReferenceNode.js';\r\n\r\nclass SceneNode extends Node {\r\n\r\n\tconstructor( scope = SceneNode.BACKGROUND_BLURRINESS, scene = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.scene = scene;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\t\tconst scene = this.scene !== null ? this.scene : builder.scene;\r\n\r\n\t\tlet output;\r\n\r\n\t\tif ( scope === SceneNode.BACKGROUND_BLURRINESS ) {\r\n\r\n\t\t\toutput = reference( 'backgroundBlurriness', 'float', scene );\r\n\r\n\t\t} else if ( scope === SceneNode.BACKGROUND_INTENSITY ) {\r\n\r\n\t\t\toutput = reference( 'backgroundIntensity', 'float', scene );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneNode: Unknown scope:', scope );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSceneNode.BACKGROUND_BLURRINESS = 'backgroundBlurriness';\r\nSceneNode.BACKGROUND_INTENSITY = 'backgroundIntensity';\r\n\r\nexport default SceneNode;\r\n\r\nexport const backgroundBlurriness = nodeImmutable( SceneNode, SceneNode.BACKGROUND_BLURRINESS );\r\nexport const backgroundIntensity = nodeImmutable( SceneNode, SceneNode.BACKGROUND_INTENSITY );\r\n\r\naddNodeClass( 'SceneNode', SceneNode );\r\n", "export const GPUPrimitiveTopology = {\r\n\tPointList: 'point-list',\r\n\tLineList: 'line-list',\r\n\tLineStrip: 'line-strip',\r\n\tTriangleList: 'triangle-list',\r\n\tTriangleStrip: 'triangle-strip',\r\n};\r\n\r\nexport const GPUCompareFunction = {\r\n\tNever: 'never',\r\n\tLess: 'less',\r\n\tEqual: 'equal',\r\n\tLessEqual: 'less-equal',\r\n\tGreater: 'greater',\r\n\tNotEqual: 'not-equal',\r\n\tGreaterEqual: 'greater-equal',\r\n\tAlways: 'always'\r\n};\r\n\r\nexport const GPUStoreOp = {\r\n\tStore: 'store',\r\n\tDiscard: 'discard'\r\n};\r\n\r\nexport const GPULoadOp = {\r\n\tLoad: 'load',\r\n\tClear: 'clear'\r\n};\r\n\r\nexport const GPUFrontFace = {\r\n\tCCW: 'ccw',\r\n\tCW: 'cw'\r\n};\r\n\r\nexport const GPUCullMode = {\r\n\tNone: 'none',\r\n\tFront: 'front',\r\n\tBack: 'back'\r\n};\r\n\r\nexport const GPUIndexFormat = {\r\n\tUint16: 'uint16',\r\n\tUint32: 'uint32'\r\n};\r\n\r\nexport const GPUVertexFormat = {\r\n\tUint8x2: 'uint8x2',\r\n\tUint8x4: 'uint8x4',\r\n\tSint8x2: 'sint8x2',\r\n\tSint8x4: 'sint8x4',\r\n\tUnorm8x2: 'unorm8x2',\r\n\tUnorm8x4: 'unorm8x4',\r\n\tSnorm8x2: 'snorm8x2',\r\n\tSnorm8x4: 'snorm8x4',\r\n\tUint16x2: 'uint16x2',\r\n\tUint16x4: 'uint16x4',\r\n\tSint16x2: 'sint16x2',\r\n\tSint16x4: 'sint16x4',\r\n\tUnorm16x2: 'unorm16x2',\r\n\tUnorm16x4: 'unorm16x4',\r\n\tSnorm16x2: 'snorm16x2',\r\n\tSnorm16x4: 'snorm16x4',\r\n\tFloat16x2: 'float16x2',\r\n\tFloat16x4: 'float16x4',\r\n\tFloat32: 'float32',\r\n\tFloat32x2: 'float32x2',\r\n\tFloat32x3: 'float32x3',\r\n\tFloat32x4: 'float32x4',\r\n\tUint32: 'uint32',\r\n\tUint32x2: 'uint32x2',\r\n\tUint32x3: 'uint32x3',\r\n\tUint32x4: 'uint32x4',\r\n\tSint32: 'sint32',\r\n\tSint32x2: 'sint32x2',\r\n\tSint32x3: 'sint32x3',\r\n\tSint32x4: 'sint32x4'\r\n};\r\n\r\nexport const GPUTextureFormat = {\r\n\r\n\t// 8-bit formats\r\n\r\n\tR8Unorm: 'r8unorm',\r\n\tR8Snorm: 'r8snorm',\r\n\tR8Uint: 'r8uint',\r\n\tR8Sint: 'r8sint',\r\n\r\n\t// 16-bit formats\r\n\r\n\tR16Uint: 'r16uint',\r\n\tR16Sint: 'r16sint',\r\n\tR16Float: 'r16float',\r\n\tRG8Unorm: 'rg8unorm',\r\n\tRG8Snorm: 'rg8snorm',\r\n\tRG8Uint: 'rg8uint',\r\n\tRG8Sint: 'rg8sint',\r\n\r\n\t// 32-bit formats\r\n\r\n\tR32Uint: 'r32uint',\r\n\tR32Sint: 'r32sint',\r\n\tR32Float: 'r32float',\r\n\tRG16Uint: 'rg16uint',\r\n\tRG16Sint: 'rg16sint',\r\n\tRG16Float: 'rg16float',\r\n\tRGBA8Unorm: 'rgba8unorm',\r\n\tRGBA8UnormSRGB: 'rgba8unorm-srgb',\r\n\tRGBA8Snorm: 'rgba8snorm',\r\n\tRGBA8Uint: 'rgba8uint',\r\n\tRGBA8Sint: 'rgba8sint',\r\n\tBGRA8Unorm: 'bgra8unorm',\r\n\tBGRA8UnormSRGB: 'bgra8unorm-srgb',\r\n\t// Packed 32-bit formats\r\n\tRGB9E5UFloat: 'rgb9e5ufloat',\r\n\tRGB10A2Unorm: 'rgb10a2unorm',\r\n\tRG11B10uFloat: 'rgb10a2unorm',\r\n\r\n\t// 64-bit formats\r\n\r\n\tRG32Uint: 'rg32uint',\r\n\tRG32Sint: 'rg32sint',\r\n\tRG32Float: 'rg32float',\r\n\tRGBA16Uint: 'rgba16uint',\r\n\tRGBA16Sint: 'rgba16sint',\r\n\tRGBA16Float: 'rgba16float',\r\n\r\n\t// 128-bit formats\r\n\r\n\tRGBA32Uint: 'rgba32uint',\r\n\tRGBA32Sint: 'rgba32sint',\r\n\tRGBA32Float: 'rgba32float',\r\n\r\n\t// Depth and stencil formats\r\n\r\n\tStencil8: 'stencil8',\r\n\tDepth16Unorm: 'depth16unorm',\r\n\tDepth24Plus: 'depth24plus',\r\n\tDepth24PlusStencil8: 'depth24plus-stencil8',\r\n\tDepth32Float: 'depth32float',\r\n\r\n\t// 'depth32float-stencil8' extension\r\n\r\n\tDepth32FloatStencil8: 'depth32float-stencil8',\r\n\r\n\t// BC compressed formats usable if 'texture-compression-bc' is both\r\n\t// supported by the device/user agent and enabled in requestDevice.\r\n\r\n\tBC1RGBAUnorm: 'bc1-rgba-unorm',\r\n\tBC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\r\n\tBC2RGBAUnorm: 'bc2-rgba-unorm',\r\n\tBC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\r\n\tBC3RGBAUnorm: 'bc3-rgba-unorm',\r\n\tBC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\r\n\tBC4RUnorm: 'bc4-r-unorm',\r\n\tBC4RSnorm: 'bc4-r-snorm',\r\n\tBC5RGUnorm: 'bc5-rg-unorm',\r\n\tBC5RGSnorm: 'bc5-rg-snorm',\r\n\tBC6HRGBUFloat: 'bc6h-rgb-ufloat',\r\n\tBC6HRGBFloat: 'bc6h-rgb-float',\r\n\tBC7RGBAUnorm: 'bc7-rgba-unorm',\r\n\tBC7RGBAUnormSRGB: 'bc7-rgba-srgb',\r\n\r\n\t// ETC2 compressed formats usable if 'texture-compression-etc2' is both\r\n\t// supported by the device/user agent and enabled in requestDevice.\r\n\r\n\tETC2RGB8Unorm: 'etc2-rgb8unorm',\r\n\tETC2RGB8UnormSRGB: 'etc2-rgb8unorm-srgb',\r\n\tETC2RGB8A1Unorm: 'etc2-rgb8a1unorm',\r\n\tETC2RGB8A1UnormSRGB: 'etc2-rgb8a1unorm-srgb',\r\n\tETC2RGBA8Unorm: 'etc2-rgba8unorm',\r\n\tETC2RGBA8UnormSRGB: 'etc2-rgba8unorm-srgb',\r\n\tEACR11Unorm: 'eac-r11unorm',\r\n\tEACR11Snorm: 'eac-r11snorm',\r\n\tEACRG11Unorm: 'eac-rg11unorm',\r\n\tEACRG11Snorm: 'eac-rg11snorm',\r\n\r\n\t// ASTC compressed formats usable if 'texture-compression-astc' is both\r\n\t// supported by the device/user agent and enabled in requestDevice.\r\n\r\n\tASTC4x4Unorm: 'astc-4x4-unorm',\r\n\tASTC4x4UnormSRGB: 'astc-4x4-unorm-srgb',\r\n\tASTC5x4Unorm: 'astc-5x4-unorm',\r\n\tASTC5x4UnormSRGB: 'astc-5x4-unorm-srgb',\r\n\tASTC5x5Unorm: 'astc-5x5-unorm',\r\n\tASTC5x5UnormSRGB: 'astc-5x5-unorm-srgb',\r\n\tASTC6x5Unorm: 'astc-6x5-unorm',\r\n\tASTC6x5UnormSRGB: 'astc-6x5-unorm-srgb',\r\n\tASTC6x6Unorm: 'astc-6x6-unorm',\r\n\tASTC6x6UnormSRGB: 'astc-6x6-unorm-srgb',\r\n\tASTC8x5Unorm: 'astc-8x5-unorm',\r\n\tASTC8x5UnormSRGB: 'astc-8x5-unorm-srgb',\r\n\tASTC8x6Unorm: 'astc-8x6-unorm',\r\n\tASTC8x6UnormSRGB: 'astc-8x6-unorm-srgb',\r\n\tASTC8x8Unorm: 'astc-8x8-unorm',\r\n\tASTC8x8UnormSRGB: 'astc-8x8-unorm-srgb',\r\n\tASTC10x5Unorm: 'astc-10x5-unorm',\r\n\tASTC10x5UnormSRGB: 'astc-10x5-unorm-srgb',\r\n\tASTC10x6Unorm: 'astc-10x6-unorm',\r\n\tASTC10x6UnormSRGB: 'astc-10x6-unorm-srgb',\r\n\tASTC10x8Unorm: 'astc-10x8-unorm',\r\n\tASTC10x8UnormSRGB: 'astc-10x8-unorm-srgb',\r\n\tASTC10x10Unorm: 'astc-10x10-unorm',\r\n\tASTC10x10UnormSRGB: 'astc-10x10-unorm-srgb',\r\n\tASTC12x10Unorm: 'astc-12x10-unorm',\r\n\tASTC12x10UnormSRGB: 'astc-12x10-unorm-srgb',\r\n\tASTC12x12Unorm: 'astc-12x12-unorm',\r\n\tASTC12x12UnormSRGB: 'astc-12x12-unorm-srgb',\r\n\r\n};\r\n\r\nexport const GPUAddressMode = {\r\n\tClampToEdge: 'clamp-to-edge',\r\n\tRepeat: 'repeat',\r\n\tMirrorRepeat: 'mirror-repeat'\r\n};\r\n\r\nexport const GPUFilterMode = {\r\n\tLinear: 'linear',\r\n\tNearest: 'nearest'\r\n};\r\n\r\nexport const GPUBlendFactor = {\r\n\tZero: 'zero',\r\n\tOne: 'one',\r\n\tSrc: 'src',\r\n\tOneMinusSrc: 'one-minus-src',\r\n\tSrcAlpha: 'src-alpha',\r\n\tOneMinusSrcAlpha: 'one-minus-src-alpha',\r\n\tDst: 'dst',\r\n\tOneMinusDstColor: 'one-minus-dst',\r\n\tDstAlpha: 'dst-alpha',\r\n\tOneMinusDstAlpha: 'one-minus-dst-alpha',\r\n\tSrcAlphaSaturated: 'src-alpha-saturated',\r\n\tConstant: 'constant',\r\n\tOneMinusConstant: 'one-minus-constant'\r\n};\r\n\r\nexport const GPUBlendOperation = {\r\n\tAdd: 'add',\r\n\tSubtract: 'subtract',\r\n\tReverseSubtract: 'reverse-subtract',\r\n\tMin: 'min',\r\n\tMax: 'max'\r\n};\r\n\r\nexport const GPUColorWriteFlags = {\r\n\tNone: 0,\r\n\tRed: 0x1,\r\n\tGreen: 0x2,\r\n\tBlue: 0x4,\r\n\tAlpha: 0x8,\r\n\tAll: 0xF\r\n};\r\n\r\nexport const GPUStencilOperation = {\r\n\tKeep: 'keep',\r\n\tZero: 'zero',\r\n\tReplace: 'replace',\r\n\tInvert: 'invert',\r\n\tIncrementClamp: 'increment-clamp',\r\n\tDecrementClamp: 'decrement-clamp',\r\n\tIncrementWrap: 'increment-wrap',\r\n\tDecrementWrap: 'decrement-wrap'\r\n};\r\n\r\nexport const GPUBufferBindingType = {\r\n\tUniform: 'uniform',\r\n\tStorage: 'storage',\r\n\tReadOnlyStorage: 'read-only-storage'\r\n};\r\n\r\nexport const GPUStorageTextureAccess = {\r\n\tWriteOnly: 'write-only',\r\n\tReadOnly: 'read-only',\r\n\tReadWrite: 'read-write',\r\n};\r\n\r\nexport const GPUSamplerBindingType = {\r\n\tFiltering: 'filtering',\r\n\tNonFiltering: 'non-filtering',\r\n\tComparison: 'comparison'\r\n};\r\n\r\nexport const GPUTextureSampleType = {\r\n\tFloat: 'float',\r\n\tUnfilterableFloat: 'unfilterable-float',\r\n\tDepth: 'depth',\r\n\tSInt: 'sint',\r\n\tUInt: 'uint'\r\n};\r\n\r\nexport const GPUTextureDimension = {\r\n\tOneD: '1d',\r\n\tTwoD: '2d',\r\n\tThreeD: '3d'\r\n};\r\n\r\nexport const GPUTextureViewDimension = {\r\n\tOneD: '1d',\r\n\tTwoD: '2d',\r\n\tTwoDArray: '2d-array',\r\n\tCube: 'cube',\r\n\tCubeArray: 'cube-array',\r\n\tThreeD: '3d'\r\n};\r\n\r\nexport const GPUTextureAspect = {\r\n\tAll: 'all',\r\n\tStencilOnly: 'stencil-only',\r\n\tDepthOnly: 'depth-only'\r\n};\r\n\r\nexport const GPUInputStepMode = {\r\n\tVertex: 'vertex',\r\n\tInstance: 'instance'\r\n};\r\n\r\nexport const GPUFeatureName = {\r\n\tDepthClipControl: 'depth-clip-control',\r\n\tDepth32FloatStencil8: 'depth32float-stencil8',\r\n\tTextureCompressionBC: 'texture-compression-bc',\r\n\tTextureCompressionETC2: 'texture-compression-etc2',\r\n\tTextureCompressionASTC: 'texture-compression-astc',\r\n\tTimestampQuery: 'timestamp-query',\r\n\tIndirectFirstInstance: 'indirect-first-instance',\r\n\tShaderF16: 'shader-f16',\r\n\tRG11B10UFloat: 'rg11b10ufloat-renderable',\r\n\tBGRA8UNormStorage: 'bgra8unorm-storage',\r\n\tFloat32Filterable: 'float32-filterable',\r\n\tClipDistances: 'clip-distances',\r\n\tDualSourceBlending: 'dual-source-blending'\r\n};\r\n", "import BufferNode from './BufferNode.js';\r\nimport { bufferAttribute } from './BufferAttributeNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { storageElement } from '../utils/StorageArrayElementNode.js';\r\nimport { GPUBufferBindingType } from '../../renderers/webgpu/utils/WebGPUConstants.js';\r\n\r\nclass StorageBufferNode extends BufferNode {\r\n\r\n\tconstructor( value, bufferType, bufferCount = 0 ) {\r\n\r\n\t\tsuper( value, bufferType, bufferCount );\r\n\r\n\t\tthis.isStorageBufferNode = true;\r\n\r\n\t\tthis.access = GPUBufferBindingType.Storage;\r\n\r\n\t\tthis.bufferObject = false;\r\n\t\tthis.bufferCount = bufferCount;\r\n\r\n\t\tthis._attribute = null;\r\n\t\tthis._varying = null;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t\tif ( value.isStorageBufferAttribute !== true && value.isStorageInstancedBufferAttribute !== true ) {\r\n\r\n\t\t\t// TOOD: Improve it, possibly adding a new property to the BufferAttribute to identify it as a storage buffer read-only attribute in Renderer\r\n\r\n\t\t\tif ( value.isInstancedBufferAttribute ) value.isStorageInstancedBufferAttribute = true;\r\n\t\t\telse value.isStorageBufferAttribute = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\tif ( this.bufferCount === 0 ) {\r\n\r\n\t\t\tlet bufferData = builder.globalCache.getData( this.value );\r\n\r\n\t\t\tif ( bufferData === undefined ) {\r\n\r\n\t\t\t\tbufferData = {\r\n\t\t\t\t\tnode: this\r\n\t\t\t\t};\r\n\r\n\t\t\t\tbuilder.globalCache.setData( this.value, bufferData );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn bufferData.node.uuid;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'storageBuffer';\r\n\r\n\t}\r\n\r\n\telement( indexNode ) {\r\n\r\n\t\treturn storageElement( this, indexNode );\r\n\r\n\t}\r\n\r\n\tsetBufferObject( value ) {\r\n\r\n\t\tthis.bufferObject = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetAccess( value ) {\r\n\r\n\t\tthis.access = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoReadOnly() {\r\n\r\n\t\treturn this.setAccess( GPUBufferBindingType.ReadOnlyStorage );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tif ( builder.isAvailable( 'storageBuffer' ) ) {\r\n\r\n\t\t\treturn super.generate( builder );\r\n\r\n\t\t}\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tif ( this._attribute === null ) {\r\n\r\n\t\t\tthis._attribute = bufferAttribute( this.value );\r\n\t\t\tthis._varying = varying( this._attribute );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tconst output = this._varying.build( builder, nodeType );\r\n\r\n\t\tbuilder.registerTransform( output, this._attribute );\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StorageBufferNode;\r\n\r\n// Read-Write Storage\r\nexport const storage = ( value, type, count ) => nodeObject( new StorageBufferNode( value, type, count ) );\r\nexport const storageObject = ( value, type, count ) => nodeObject( new StorageBufferNode( value, type, count ).setBufferObject( true ) );\r\n\r\naddNodeClass( 'StorageBufferNode', StorageBufferNode );\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport TextureNode from './TextureNode.js';\r\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\r\nimport { GPUStorageTextureAccess } from '../../renderers/webgpu/utils/WebGPUConstants.js';\r\n\r\nclass StorageTextureNode extends TextureNode {\r\n\r\n\tconstructor( value, uvNode, storeNode = null ) {\r\n\r\n\t\tsuper( value, uvNode );\r\n\r\n\t\tthis.storeNode = storeNode;\r\n\r\n\t\tthis.isStorageTextureNode = true;\r\n\r\n\t\tthis.access = GPUStorageTextureAccess.WriteOnly;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'storageTexture';\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.storeNode = this.storeNode;\r\n\r\n\t}\r\n\r\n\tsetAccess( value ) {\r\n\r\n\t\tthis.access = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tif ( this.storeNode !== null ) {\r\n\r\n\t\t\tsnippet = this.generateStore( builder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = super.generate( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\ttoReadOnly() {\r\n\r\n\t\treturn this.setAccess( GPUStorageTextureAccess.ReadOnly );\r\n\r\n\t}\r\n\r\n\ttoWriteOnly() {\r\n\r\n\t\treturn this.setAccess( GPUStorageTextureAccess.WriteOnly );\r\n\r\n\t}\r\n\r\n\tgenerateStore( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tconst { uvNode, storeNode } = properties;\r\n\r\n\t\tconst textureProperty = super.generate( builder, 'property' );\r\n\t\tconst uvSnippet = uvNode.build( builder, 'uvec2' );\r\n\t\tconst storeSnippet = storeNode.build( builder, 'vec4' );\r\n\r\n\t\tconst snippet = builder.generateTextureStore( builder, textureProperty, uvSnippet, storeSnippet );\r\n\r\n\t\tbuilder.addLineFlowCode( snippet );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StorageTextureNode;\r\n\r\nexport const storageTexture = nodeProxy( StorageTextureNode );\r\n\r\nexport const textureStore = ( value, uvNode, storeNode ) => {\r\n\r\n\tconst node = storageTexture( value, uvNode, storeNode );\r\n\r\n\tif ( storeNode !== null ) node.append();\r\n\r\n\treturn node;\r\n\r\n};\r\n\r\naddNodeClass( 'StorageTextureNode', StorageTextureNode );\r\n", "import TextureNode from './TextureNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeProxy, vec3, tslFn, If } from '../shadernode/ShaderNode.js';\r\n\r\nconst normal = tslFn( ( { texture, uv } ) => {\r\n\r\n\tconst epsilon = 0.0001;\r\n\r\n\tconst ret = vec3().temp();\r\n\r\n\tIf( uv.x.lessThan( epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 1, 0, 0 ) );\r\n\r\n\t} ).elseif( uv.y.lessThan( epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, 1, 0 ) );\r\n\r\n\t} ).elseif( uv.z.lessThan( epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, 0, 1 ) );\r\n\r\n\t} ).elseif( uv.x.greaterThan( 1 - epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( - 1, 0, 0 ) );\r\n\r\n\t} ).elseif( uv.y.greaterThan( 1 - epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, - 1, 0 ) );\r\n\r\n\t} ).elseif( uv.z.greaterThan( 1 - epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, 0, - 1 ) );\r\n\r\n\t} ).else( () => {\r\n\r\n\t\tconst step = 0.01;\r\n\r\n\t\tconst x = texture.uv( uv.add( vec3( - step, 0.0, 0.0 ) ) ).r.sub( texture.uv( uv.add( vec3( step, 0.0, 0.0 ) ) ).r );\r\n\t\tconst y = texture.uv( uv.add( vec3( 0.0, - step, 0.0 ) ) ).r.sub( texture.uv( uv.add( vec3( 0.0, step, 0.0 ) ) ).r );\r\n\t\tconst z = texture.uv( uv.add( vec3( 0.0, 0.0, - step ) ) ).r.sub( texture.uv( uv.add( vec3( 0.0, 0.0, step ) ) ).r );\r\n\r\n\t\tret.assign( vec3( x, y, z ) );\r\n\r\n\t} );\r\n\r\n\treturn ret.normalize();\r\n\r\n} );\r\n\r\n\r\nclass Texture3DNode extends TextureNode {\r\n\r\n\tconstructor( value, uvNode = null, levelNode = null ) {\r\n\r\n\t\tsuper( value, uvNode, levelNode );\r\n\r\n\t\tthis.isTexture3DNode = true;\r\n\r\n\t}\r\n\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'texture3D';\r\n\r\n\t}\r\n\r\n\tgetDefaultUV() {\r\n\r\n\t\treturn vec3( 0.5, 0.5, 0.5 );\r\n\r\n\t}\r\n\r\n\tsetUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for 3d TextureNode\r\n\r\n\tsetupUV( builder, uvNode ) {\r\n\r\n\t\treturn uvNode;\r\n\r\n\t}\r\n\r\n\tgenerateUV( builder, uvNode ) {\r\n\r\n\t\treturn uvNode.build( builder, 'vec3' );\r\n\r\n\t}\r\n\r\n\tnormal( uvNode ) {\r\n\r\n\t\treturn normal( { texture: this, uv: uvNode } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Texture3DNode;\r\n\r\nexport const texture3D = nodeProxy( Texture3DNode );\r\n\r\naddNodeClass( 'Texture3DNode', Texture3DNode );\r\n", "import ReferenceNode from './ReferenceNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass UserDataNode extends ReferenceNode {\r\n\r\n\tconstructor( property, inputType, userData = null ) {\r\n\r\n\t\tsuper( property, inputType, userData );\r\n\r\n\t\tthis.userData = userData;\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tthis.reference = this.userData !== null ? this.userData : frame.object.userData;\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default UserDataNode;\r\n\r\nexport const userData = ( name, inputType, userData ) => nodeObject( new UserDataNode( name, inputType, userData ) );\r\n\r\naddNodeClass( 'UserDataNode', UserDataNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { /*mix, step,*/ EPSILON } from '../math/MathNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, tslFn, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nexport const BurnNode = tslFn( ( { base, blend } ) => {\r\n\r\n\tconst fn = ( c ) => blend[ c ].lessThan( EPSILON ).cond( blend[ c ], base[ c ].oneMinus().div( blend[ c ] ).oneMinus().max( 0 ) );\r\n\r\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'burnColor',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const DodgeNode = tslFn( ( { base, blend } ) => {\r\n\r\n\tconst fn = ( c ) => blend[ c ].equal( 1.0 ).cond( blend[ c ], base[ c ].div( blend[ c ].oneMinus() ).max( 0 ) );\r\n\r\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'dodgeColor',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const ScreenNode = tslFn( ( { base, blend } ) => {\r\n\r\n\tconst fn = ( c ) => base[ c ].oneMinus().mul( blend[ c ].oneMinus() ).oneMinus();\r\n\r\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'screenColor',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const OverlayNode = tslFn( ( { base, blend } ) => {\r\n\r\n\tconst fn = ( c ) => base[ c ].lessThan( 0.5 ).cond( base[ c ].mul( blend[ c ], 2.0 ), base[ c ].oneMinus().mul( blend[ c ].oneMinus() ).oneMinus() );\r\n\t//const fn = ( c ) => mix( base[ c ].oneMinus().mul( blend[ c ].oneMinus() ).oneMinus(), base[ c ].mul( blend[ c ], 2.0 ), step( base[ c ], 0.5 ) );\r\n\r\n\treturn vec3( fn( 'x' ), fn( 'y' ), fn( 'z' ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'overlayColor',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nclass BlendModeNode extends TempNode {\r\n\r\n\tconstructor( blendMode, baseNode, blendNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.blendMode = blendMode;\r\n\r\n\t\tthis.baseNode = baseNode;\r\n\t\tthis.blendNode = blendNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { blendMode, baseNode, blendNode } = this;\r\n\t\tconst params = { base: baseNode, blend: blendNode };\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tif ( blendMode === BlendModeNode.BURN ) {\r\n\r\n\t\t\toutputNode = BurnNode( params );\r\n\r\n\t\t} else if ( blendMode === BlendModeNode.DODGE ) {\r\n\r\n\t\t\toutputNode = DodgeNode( params );\r\n\r\n\t\t} else if ( blendMode === BlendModeNode.SCREEN ) {\r\n\r\n\t\t\toutputNode = ScreenNode( params );\r\n\r\n\t\t} else if ( blendMode === BlendModeNode.OVERLAY ) {\r\n\r\n\t\t\toutputNode = OverlayNode( params );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nBlendModeNode.BURN = 'burn';\r\nBlendModeNode.DODGE = 'dodge';\r\nBlendModeNode.SCREEN = 'screen';\r\nBlendModeNode.OVERLAY = 'overlay';\r\n\r\nexport default BlendModeNode;\r\n\r\nexport const burn = nodeProxy( BlendModeNode, BlendModeNode.BURN );\r\nexport const dodge = nodeProxy( BlendModeNode, BlendModeNode.DODGE );\r\nexport const overlay = nodeProxy( BlendModeNode, BlendModeNode.OVERLAY );\r\nexport const screen = nodeProxy( BlendModeNode, BlendModeNode.SCREEN );\r\n\r\naddNodeElement( 'burn', burn );\r\naddNodeElement( 'dodge', dodge );\r\naddNodeElement( 'overlay', overlay );\r\naddNodeElement( 'screen', screen );\r\n\r\naddNodeClass( 'BlendModeNode', BlendModeNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { normalView } from '../accessors/NormalNode.js';\r\nimport { positionView } from '../accessors/PositionNode.js';\r\nimport { faceDirection } from './FrontFacingNode.js';\r\nimport { addNodeElement, tslFn, nodeProxy, float, vec2 } from '../shadernode/ShaderNode.js';\r\n\r\n// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\r\n// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\r\n\r\nconst dHdxy_fwd = tslFn( ( { textureNode, bumpScale } ) => {\r\n\r\n\t// It's used to preserve the same TextureNode instance\r\n\tconst sampleTexture = ( callback ) => textureNode.cache().context( { getUV: ( texNode ) => callback( texNode.uvNode || uv() ), forceUVContext: true } );\r\n\r\n\tconst Hll = float( sampleTexture( ( uvNode ) => uvNode ) );\r\n\r\n\treturn vec2(\r\n\t\tfloat( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdx() ) ) ).sub( Hll ),\r\n\t\tfloat( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdy() ) ) ).sub( Hll )\r\n\t).mul( bumpScale );\r\n\r\n} );\r\n\r\n// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\nconst perturbNormalArb = tslFn( ( inputs ) => {\r\n\r\n\tconst { surf_pos, surf_norm, dHdxy } = inputs;\r\n\r\n\t// normalize is done to ensure that the bump map looks the same regardless of the texture's scale\r\n\tconst vSigmaX = surf_pos.dFdx().normalize();\r\n\tconst vSigmaY = surf_pos.dFdy().normalize();\r\n\tconst vN = surf_norm; // normalized\r\n\r\n\tconst R1 = vSigmaY.cross( vN );\r\n\tconst R2 = vN.cross( vSigmaX );\r\n\r\n\tconst fDet = vSigmaX.dot( R1 ).mul( faceDirection );\r\n\r\n\tconst vGrad = fDet.sign().mul( dHdxy.x.mul( R1 ).add( dHdxy.y.mul( R2 ) ) );\r\n\r\n\treturn fDet.abs().mul( surf_norm ).sub( vGrad ).normalize();\r\n\r\n} );\r\n\r\nclass BumpMapNode extends TempNode {\r\n\r\n\tconstructor( textureNode, scaleNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.scaleNode = scaleNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst bumpScale = this.scaleNode !== null ? this.scaleNode : 1;\r\n\t\tconst dHdxy = dHdxy_fwd( { textureNode: this.textureNode, bumpScale } );\r\n\r\n\t\treturn perturbNormalArb( {\r\n\t\t\tsurf_pos: positionView,\r\n\t\t\tsurf_norm: normalView,\r\n\t\t\tdHdxy\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BumpMapNode;\r\n\r\nexport const bumpMap = nodeProxy( BumpMapNode );\r\n\r\naddNodeElement( 'bumpMap', bumpMap );\r\n\r\naddNodeClass( 'BumpMapNode', BumpMapNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { dot, mix } from '../math/MathNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, tslFn, nodeProxy, float, vec3 } from '../shadernode/ShaderNode.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nconst saturationNode = tslFn( ( { color, adjustment } ) => {\r\n\r\n\treturn adjustment.mix( luminance( color.rgb ), color.rgb );\r\n\r\n} );\r\n\r\nconst vibranceNode = tslFn( ( { color, adjustment } ) => {\r\n\r\n\tconst average = add( color.r, color.g, color.b ).div( 3.0 );\r\n\r\n\tconst mx = color.r.max( color.g.max( color.b ) );\r\n\tconst amt = mx.sub( average ).mul( adjustment ).mul( - 3.0 );\r\n\r\n\treturn mix( color.rgb, mx, amt );\r\n\r\n} );\r\n\r\nconst hueNode = tslFn( ( { color, adjustment } ) => {\r\n\r\n\tconst k = vec3( 0.57735, 0.57735, 0.57735 );\r\n\r\n\tconst cosAngle = adjustment.cos();\r\n\r\n\treturn vec3( color.rgb.mul( cosAngle ).add( k.cross( color.rgb ).mul( adjustment.sin() ).add( k.mul( dot( k, color.rgb ).mul( cosAngle.oneMinus() ) ) ) ) );\r\n\r\n} );\r\n\r\nclass ColorAdjustmentNode extends TempNode {\r\n\r\n\tconstructor( method, colorNode, adjustmentNode = float( 1 ) ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.method = method;\r\n\r\n\t\tthis.colorNode = colorNode;\r\n\t\tthis.adjustmentNode = adjustmentNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { method, colorNode, adjustmentNode } = this;\r\n\r\n\t\tconst callParams = { color: colorNode, adjustment: adjustmentNode };\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tif ( method === ColorAdjustmentNode.SATURATION ) {\r\n\r\n\t\t\toutputNode = saturationNode( callParams );\r\n\r\n\t\t} else if ( method === ColorAdjustmentNode.VIBRANCE ) {\r\n\r\n\t\t\toutputNode = vibranceNode( callParams );\r\n\r\n\t\t} else if ( method === ColorAdjustmentNode.HUE ) {\r\n\r\n\t\t\toutputNode = hueNode( callParams );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( `${ this.type }: Method \"${ this.method }\" not supported!` );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nColorAdjustmentNode.SATURATION = 'saturation';\r\nColorAdjustmentNode.VIBRANCE = 'vibrance';\r\nColorAdjustmentNode.HUE = 'hue';\r\n\r\nexport default ColorAdjustmentNode;\r\n\r\nexport const saturation = nodeProxy( ColorAdjustmentNode, ColorAdjustmentNode.SATURATION );\r\nexport const vibrance = nodeProxy( ColorAdjustmentNode, ColorAdjustmentNode.VIBRANCE );\r\nexport const hue = nodeProxy( ColorAdjustmentNode, ColorAdjustmentNode.HUE );\r\n\r\nconst _luminanceCoefficients = /*#__PURE__*/ new Vector3();\r\nexport const luminance = (\r\n\tcolor,\r\n\tluminanceCoefficients = vec3( ... ColorManagement.getLuminanceCoefficients( _luminanceCoefficients ) )\r\n) => dot( color, luminanceCoefficients );\r\n\r\nexport const threshold = ( color, threshold ) => mix( vec3( 0.0 ), color, luminance( color ).sub( threshold ).max( 0 ) );\r\n\r\naddNodeElement( 'saturation', saturation );\r\naddNodeElement( 'vibrance', vibrance );\r\naddNodeElement( 'hue', hue );\r\naddNodeElement( 'threshold', threshold );\r\n\r\naddNodeClass( 'ColorAdjustmentNode', ColorAdjustmentNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\n\r\nimport { modelNormalMatrix } from '../accessors/ModelNode.js';\r\nimport { normalView } from '../accessors/NormalNode.js';\r\nimport { positionView } from '../accessors/PositionNode.js';\r\nimport { TBNViewMatrix } from '../accessors/AccessorsUtils.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { faceDirection } from './FrontFacingNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, tslFn, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nimport { TangentSpaceNormalMap, ObjectSpaceNormalMap } from '../../constants.js';\r\n\r\n// Normal Mapping Without Precomputed Tangents\r\n// http://www.thetenthplanet.de/archives/1180\r\n\r\nconst perturbNormal2Arb = tslFn( ( inputs ) => {\r\n\r\n\tconst { eye_pos, surf_norm, mapN, uv } = inputs;\r\n\r\n\tconst q0 = eye_pos.dFdx();\r\n\tconst q1 = eye_pos.dFdy();\r\n\tconst st0 = uv.dFdx();\r\n\tconst st1 = uv.dFdy();\r\n\r\n\tconst N = surf_norm; // normalized\r\n\r\n\tconst q1perp = q1.cross( N );\r\n\tconst q0perp = N.cross( q0 );\r\n\r\n\tconst T = q1perp.mul( st0.x ).add( q0perp.mul( st1.x ) );\r\n\tconst B = q1perp.mul( st0.y ).add( q0perp.mul( st1.y ) );\r\n\r\n\tconst det = T.dot( T ).max( B.dot( B ) );\r\n\tconst scale = faceDirection.mul( det.inverseSqrt() );\r\n\r\n\treturn add( T.mul( mapN.x, scale ), B.mul( mapN.y, scale ), N.mul( mapN.z ) ).normalize();\r\n\r\n} );\r\n\r\nclass NormalMapNode extends TempNode {\r\n\r\n\tconstructor( node, scaleNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.scaleNode = scaleNode;\r\n\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { normalMapType, scaleNode } = this;\r\n\r\n\t\tlet normalMap = this.node.mul( 2.0 ).sub( 1.0 );\r\n\r\n\t\tif ( scaleNode !== null ) {\r\n\r\n\t\t\tnormalMap = vec3( normalMap.xy.mul( scaleNode ), normalMap.z );\r\n\r\n\t\t}\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tif ( normalMapType === ObjectSpaceNormalMap ) {\r\n\r\n\t\t\toutputNode = modelNormalMatrix.mul( normalMap ).normalize();\r\n\r\n\t\t} else if ( normalMapType === TangentSpaceNormalMap ) {\r\n\r\n\t\t\tconst tangent = builder.hasGeometryAttribute( 'tangent' );\r\n\r\n\t\t\tif ( tangent === true ) {\r\n\r\n\t\t\t\toutputNode = TBNViewMatrix.mul( normalMap ).normalize();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\toutputNode = perturbNormal2Arb( {\r\n\t\t\t\t\teye_pos: positionView,\r\n\t\t\t\t\tsurf_norm: normalView,\r\n\t\t\t\t\tmapN: normalMap,\r\n\t\t\t\t\tuv: uv()\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NormalMapNode;\r\n\r\nexport const normalMap = nodeProxy( NormalMapNode );\r\n\r\naddNodeElement( 'normalMap', normalMap );\r\n\r\naddNodeClass( 'NormalMapNode', NormalMapNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass PosterizeNode extends TempNode {\r\n\r\n\tconstructor( sourceNode, stepsNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.sourceNode = sourceNode;\r\n\t\tthis.stepsNode = stepsNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { sourceNode, stepsNode } = this;\r\n\r\n\t\treturn sourceNode.mul( stepsNode ).floor().div( stepsNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PosterizeNode;\r\n\r\nexport const posterize = nodeProxy( PosterizeNode );\r\n\r\naddNodeElement( 'posterize', posterize );\r\n\r\naddNodeClass( 'PosterizeNode', PosterizeNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, tslFn, nodeObject, float, mat3, vec3, If } from '../shadernode/ShaderNode.js';\r\nimport { rendererReference } from '../accessors/RendererReferenceNode.js';\r\nimport { cond } from '../math/CondNode.js';\r\nimport { clamp, log2, max, min, pow, mix } from '../math/MathNode.js';\r\nimport { mul, sub, div } from '../math/OperatorNode.js';\r\n\r\nimport { NoToneMapping, LinearToneMapping, ReinhardToneMapping, CineonToneMapping, ACESFilmicToneMapping, AgXToneMapping, NeutralToneMapping } from '../../constants.js';\r\n\r\n// exposure only\r\nconst LinearToneMappingNode = tslFn( ( { color, exposure } ) => {\r\n\r\n\treturn color.mul( exposure ).clamp();\r\n\r\n} );\r\n\r\n// source: https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf\r\nconst ReinhardToneMappingNode = tslFn( ( { color, exposure } ) => {\r\n\r\n\tcolor = color.mul( exposure );\r\n\r\n\treturn color.div( color.add( 1.0 ) ).clamp();\r\n\r\n} );\r\n\r\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\r\nconst OptimizedCineonToneMappingNode = tslFn( ( { color, exposure } ) => {\r\n\r\n\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n\tcolor = color.mul( exposure );\r\n\tcolor = color.sub( 0.004 ).max( 0.0 );\r\n\r\n\tconst a = color.mul( color.mul( 6.2 ).add( 0.5 ) );\r\n\tconst b = color.mul( color.mul( 6.2 ).add( 1.7 ) ).add( 0.06 );\r\n\r\n\treturn a.div( b ).pow( 2.2 );\r\n\r\n} );\r\n\r\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\r\nconst RRTAndODTFit = tslFn( ( { color } ) => {\r\n\r\n\tconst a = color.mul( color.add( 0.0245786 ) ).sub( 0.000090537 );\r\n\tconst b = color.mul( color.add( 0.4329510 ).mul( 0.983729 ) ).add( 0.238081 );\r\n\r\n\treturn a.div( b );\r\n\r\n} );\r\n\r\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\r\nconst ACESFilmicToneMappingNode = tslFn( ( { color, exposure } ) => {\r\n\r\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\r\n\tconst ACESInputMat = mat3(\r\n\t\t0.59719, 0.35458, 0.04823,\r\n\t\t0.07600, 0.90834, 0.01566,\r\n\t\t0.02840, 0.13383, 0.83777\r\n\t);\r\n\r\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\r\n\tconst ACESOutputMat = mat3(\r\n\t\t1.60475, - 0.53108, - 0.07367,\r\n\t\t- 0.10208, 1.10813, - 0.00605,\r\n\t\t- 0.00327, - 0.07276, 1.07602\r\n\t);\r\n\r\n\tcolor = color.mul( exposure ).div( 0.6 );\r\n\r\n\tcolor = ACESInputMat.mul( color );\r\n\r\n\t// Apply RRT and ODT\r\n\tcolor = RRTAndODTFit( { color } );\r\n\r\n\tcolor = ACESOutputMat.mul( color );\r\n\r\n\t// Clamp to [0, 1]\r\n\treturn color.clamp();\r\n\r\n} );\r\n\r\n\r\n\r\nconst LINEAR_REC2020_TO_LINEAR_SRGB = mat3( vec3( 1.6605, - 0.1246, - 0.0182 ), vec3( - 0.5876, 1.1329, - 0.1006 ), vec3( - 0.0728, - 0.0083, 1.1187 ) );\r\nconst LINEAR_SRGB_TO_LINEAR_REC2020 = mat3( vec3( 0.6274, 0.0691, 0.0164 ), vec3( 0.3293, 0.9195, 0.0880 ), vec3( 0.0433, 0.0113, 0.8956 ) );\r\n\r\nconst agxDefaultContrastApprox = tslFn( ( [ x_immutable ] ) => {\r\n\r\n\tconst x = vec3( x_immutable ).toVar();\r\n\tconst x2 = vec3( x.mul( x ) ).toVar();\r\n\tconst x4 = vec3( x2.mul( x2 ) ).toVar();\r\n\r\n\treturn float( 15.5 ).mul( x4.mul( x2 ) ).sub( mul( 40.14, x4.mul( x ) ) ).add( mul( 31.96, x4 ).sub( mul( 6.868, x2.mul( x ) ) ).add( mul( 0.4298, x2 ).add( mul( 0.1191, x ).sub( 0.00232 ) ) ) );\r\n\r\n} );\r\n\r\nconst AGXToneMappingNode = tslFn( ( { color, exposure } ) => {\r\n\r\n\tconst colortone = vec3( color ).toVar();\r\n\tconst AgXInsetMatrix = mat3( vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ), vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ), vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 ) );\r\n\tconst AgXOutsetMatrix = mat3( vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ), vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ), vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 ) );\r\n\tconst AgxMinEv = float( - 12.47393 );\r\n\tconst AgxMaxEv = float( 4.026069 );\r\n\tcolortone.mulAssign( exposure );\r\n\tcolortone.assign( LINEAR_SRGB_TO_LINEAR_REC2020.mul( colortone ) );\r\n\tcolortone.assign( AgXInsetMatrix.mul( colortone ) );\r\n\tcolortone.assign( max( colortone, 1e-10 ) );\r\n\tcolortone.assign( log2( colortone ) );\r\n\tcolortone.assign( colortone.sub( AgxMinEv ).div( AgxMaxEv.sub( AgxMinEv ) ) );\r\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\r\n\tcolortone.assign( agxDefaultContrastApprox( colortone ) );\r\n\tcolortone.assign( AgXOutsetMatrix.mul( colortone ) );\r\n\tcolortone.assign( pow( max( vec3( 0.0 ), colortone ), vec3( 2.2 ) ) );\r\n\tcolortone.assign( LINEAR_REC2020_TO_LINEAR_SRGB.mul( colortone ) );\r\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\r\n\r\n\treturn colortone;\r\n\r\n} );\r\n\r\n// https://modelviewer.dev/examples/tone-mapping\r\n\r\nconst NeutralToneMappingNode = tslFn( ( { color, exposure } ) => {\r\n\r\n\tconst StartCompression = float( 0.8 - 0.04 );\r\n\tconst Desaturation = float( 0.15 );\r\n\r\n\tcolor = color.mul( exposure );\r\n\r\n\tconst x = min( color.r, min( color.g, color.b ) );\r\n\tconst offset = cond( x.lessThan( 0.08 ), x.sub( mul( 6.25, x.mul( x ) ) ), 0.04 );\r\n\r\n\tcolor.subAssign( offset );\r\n\r\n\tconst peak = max( color.r, max( color.g, color.b ) );\r\n\r\n\tIf( peak.lessThan( StartCompression ), () => {\r\n\r\n\t\treturn color;\r\n\r\n\t} );\r\n\r\n\tconst d = sub( 1, StartCompression );\r\n\tconst newPeak = sub( 1, d.mul( d ).div( peak.add( d.sub( StartCompression ) ) ) );\r\n\tcolor.mulAssign( newPeak.div( peak ) );\r\n\tconst g = sub( 1, div( 1, Desaturation.mul( peak.sub( newPeak ) ).add( 1 ) ) );\r\n\r\n\treturn mix( color, vec3( newPeak ), g );\r\n\r\n} ).setLayout( {\r\n\tname: 'NeutralToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst toneMappingLib = {\r\n\t[ LinearToneMapping ]: LinearToneMappingNode,\r\n\t[ ReinhardToneMapping ]: ReinhardToneMappingNode,\r\n\t[ CineonToneMapping ]: OptimizedCineonToneMappingNode,\r\n\t[ ACESFilmicToneMapping ]: ACESFilmicToneMappingNode,\r\n\t[ AgXToneMapping ]: AGXToneMappingNode,\r\n\t[ NeutralToneMapping ]: NeutralToneMappingNode\r\n};\r\n\r\nclass ToneMappingNode extends TempNode {\r\n\r\n\tconstructor( toneMapping = NoToneMapping, exposureNode = toneMappingExposure, colorNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis.toneMapping = toneMapping;\r\n\r\n\t\tthis.exposureNode = exposureNode;\r\n\t\tthis.colorNode = colorNode;\r\n\r\n\t}\r\n\r\n\tgetCacheKey() {\r\n\r\n\t\tlet cacheKey = super.getCacheKey();\r\n\t\tcacheKey = '{toneMapping:' + this.toneMapping + ',nodes:' + cacheKey + '}';\r\n\r\n\t\treturn cacheKey;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst colorNode = this.colorNode || builder.context.color;\r\n\t\tconst toneMapping = this.toneMapping;\r\n\r\n\t\tif ( toneMapping === NoToneMapping ) return colorNode;\r\n\r\n\t\tconst toneMappingParams = { exposure: this.exposureNode, color: colorNode };\r\n\t\tconst toneMappingNode = toneMappingLib[ toneMapping ];\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tif ( toneMappingNode ) {\r\n\r\n\t\t\toutputNode = toneMappingNode( toneMappingParams );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'ToneMappingNode: Unsupported Tone Mapping configuration.', toneMapping );\r\n\r\n\t\t\toutputNode = colorNode;\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ToneMappingNode;\r\n\r\nexport const toneMapping = ( mapping, exposure, color ) => nodeObject( new ToneMappingNode( mapping, nodeObject( exposure ), nodeObject( color ) ) );\r\nexport const toneMappingExposure = rendererReference( 'toneMappingExposure', 'float' );\r\n\r\naddNodeElement( 'toneMapping', ( color, mapping, exposure ) => toneMapping( mapping, exposure, color ) );\r\n\r\naddNodeClass( 'ToneMappingNode', ToneMappingNode );\r\n", "import ViewportTextureNode from './ViewportTextureNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\nimport { viewportTopLeft } from './ViewportNode.js';\r\n\r\nimport { FramebufferTexture } from '../../textures/FramebufferTexture.js';\r\n\r\nlet _sharedFramebuffer = null;\r\n\r\nclass ViewportSharedTextureNode extends ViewportTextureNode {\r\n\r\n\tconstructor( uvNode = viewportTopLeft, levelNode = null ) {\r\n\r\n\t\tif ( _sharedFramebuffer === null ) {\r\n\r\n\t\t\t_sharedFramebuffer = new FramebufferTexture();\r\n\r\n\t\t}\r\n\r\n\t\tsuper( uvNode, levelNode, _sharedFramebuffer );\r\n\r\n\t}\r\n\r\n\tupdateReference() {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ViewportSharedTextureNode;\r\n\r\nexport const viewportSharedTexture = nodeProxy( ViewportSharedTextureNode );\r\n\r\naddNodeElement( 'viewportSharedTexture', viewportSharedTexture );\r\n\r\naddNodeClass( 'ViewportSharedTextureNode', ViewportSharedTextureNode );\r\n", "import { addNodeClass } from '../core/Node.js';\r\nimport TempNode from '../core/TempNode.js';\r\nimport { default as TextureNode/*, texture*/ } from '../accessors/TextureNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeObject } from '../shadernode/ShaderNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { viewZToOrthographicDepth, perspectiveDepthToViewZ } from './ViewportDepthNode.js';\r\n\r\nimport { HalfFloatType/*, FloatType*/ } from '../../constants.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nclass PassTextureNode extends TextureNode {\r\n\r\n\tconstructor( passNode, texture ) {\r\n\r\n\t\tsuper( texture );\r\n\r\n\t\tthis.passNode = passNode;\r\n\r\n\t\tthis.setUpdateMatrix( false );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.passNode.build( builder );\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.passNode, this.value );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass PassMultipleTextureNode extends PassTextureNode {\r\n\r\n\tconstructor( passNode, textureName ) {\r\n\r\n\t\tsuper( passNode, null );\r\n\r\n\t\tthis.textureName = textureName;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.value = this.passNode.getTexture( this.textureName );\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.passNode, this.textureName );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass PassNode extends TempNode {\r\n\r\n\tconstructor( scope, scene, camera, options = {} ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\t\tthis.options = options;\r\n\r\n\t\tthis._pixelRatio = 1;\r\n\t\tthis._width = 1;\r\n\t\tthis._height = 1;\r\n\r\n\t\tconst depthTexture = new DepthTexture();\r\n\t\tdepthTexture.isRenderTargetTexture = true;\r\n\t\t//depthTexture.type = FloatType;\r\n\t\tdepthTexture.name = 'depth';\r\n\r\n\t\tconst renderTarget = new RenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType, ...options, } );\r\n\t\trenderTarget.texture.name = 'output';\r\n\t\trenderTarget.depthTexture = depthTexture;\r\n\r\n\t\tthis.renderTarget = renderTarget;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t\tthis._textures = {\r\n\t\t\toutput: renderTarget.texture,\r\n\t\t\tdepth: depthTexture\r\n\t\t};\r\n\r\n\t\tthis._textureNodes = {};\r\n\t\tthis._linearDepthNodes = {};\r\n\t\tthis._viewZNodes = {};\r\n\r\n\t\tthis._cameraNear = uniform( 0 );\r\n\t\tthis._cameraFar = uniform( 0 );\r\n\r\n\t\tthis._mrt = null;\r\n\r\n\t\tthis.isPassNode = true;\r\n\r\n\t}\r\n\r\n\tsetMRT( mrt ) {\r\n\r\n\t\tthis._mrt = mrt;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetMRT() {\r\n\r\n\t\treturn this._mrt;\r\n\r\n\t}\r\n\r\n\tisGlobal() {\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tgetTexture( name ) {\r\n\r\n\t\tlet texture = this._textures[ name ];\r\n\r\n\t\tif ( texture === undefined ) {\r\n\r\n\t\t\tconst refTexture = this.renderTarget.texture;\r\n\r\n\t\t\ttexture = refTexture.clone();\r\n\t\t\ttexture.isRenderTargetTexture = true;\r\n\t\t\ttexture.name = name;\r\n\r\n\t\t\tthis._textures[ name ] = texture;\r\n\r\n\t\t\tthis.renderTarget.textures.push( texture );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\tgetTextureNode( name = 'output' ) {\r\n\r\n\t\tlet textureNode = this._textureNodes[ name ];\r\n\r\n\t\tif ( textureNode === undefined ) {\r\n\r\n\t\t\tthis._textureNodes[ name ] = textureNode = nodeObject( new PassMultipleTextureNode( this, name ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn textureNode;\r\n\r\n\t}\r\n\r\n\tgetViewZNode( name = 'depth' ) {\r\n\r\n\t\tlet viewZNode = this._viewZNodes[ name ];\r\n\r\n\t\tif ( viewZNode === undefined ) {\r\n\r\n\t\t\tconst cameraNear = this._cameraNear;\r\n\t\t\tconst cameraFar = this._cameraFar;\r\n\r\n\t\t\tthis._viewZNodes[ name ] = viewZNode = perspectiveDepthToViewZ( this.getTextureNode( name ), cameraNear, cameraFar );\r\n\r\n\t\t}\r\n\r\n\t\treturn viewZNode;\r\n\r\n\t}\r\n\r\n\tgetLinearDepthNode( name = 'depth' ) {\r\n\r\n\t\tlet linearDepthNode = this._linearDepthNodes[ name ];\r\n\r\n\t\tif ( linearDepthNode === undefined ) {\r\n\r\n\t\t\tconst cameraNear = this._cameraNear;\r\n\t\t\tconst cameraFar = this._cameraFar;\r\n\t\t\tconst viewZNode = this.getViewZNode( name );\r\n\r\n\t\t\t// TODO: just if ( builder.camera.isPerspectiveCamera )\r\n\r\n\t\t\tthis._linearDepthNodes[ name ] = linearDepthNode = viewZToOrthographicDepth( viewZNode, cameraNear, cameraFar );\r\n\r\n\t\t}\r\n\r\n\t\treturn linearDepthNode;\r\n\r\n\t}\r\n\r\n\tsetup( { renderer } ) {\r\n\r\n\t\tthis.renderTarget.samples = this.options.samples === undefined ? renderer.samples : this.options.samples;\r\n\r\n\t\t// Disable MSAA for WebGL backend for now\r\n\t\tif ( renderer.backend.isWebGLBackend === true ) {\r\n\r\n\t\t\tthis.renderTarget.samples = 0;\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget.depthTexture.isMultisampleRenderTargetTexture = this.renderTarget.samples > 1;\r\n\r\n\t\treturn this.scope === PassNode.COLOR ? this.getTextureNode() : this.getLinearDepthNode();\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\t\tconst { scene, camera } = this;\r\n\r\n\t\tthis._pixelRatio = renderer.getPixelRatio();\r\n\r\n\t\tconst size = renderer.getSize( _size );\r\n\r\n\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\r\n\t\tthis._cameraNear.value = camera.near;\r\n\t\tthis._cameraFar.value = camera.far;\r\n\r\n\t\trenderer.setRenderTarget( this.renderTarget );\r\n\t\trenderer.setMRT( this._mrt );\r\n\r\n\t\trenderer.render( scene, camera );\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\r\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\r\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\r\n\r\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t}\r\n\r\n\tsetPixelRatio( pixelRatio ) {\r\n\r\n\t\tthis._pixelRatio = pixelRatio;\r\n\r\n\t\tthis.setSize( this._width, this._height );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.renderTarget.dispose();\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\nPassNode.COLOR = 'color';\r\nPassNode.DEPTH = 'depth';\r\n\r\nexport default PassNode;\r\n\r\nexport const pass = ( scene, camera, options ) => nodeObject( new PassNode( PassNode.COLOR, scene, camera, options ) );\r\nexport const passTexture = ( pass, texture ) => nodeObject( new PassTextureNode( pass, texture ) );\r\nexport const depthPass = ( scene, camera ) => nodeObject( new PassNode( PassNode.DEPTH, scene, camera ) );\r\n\r\naddNodeClass( 'PassNode', PassNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeObject, addNodeElement, tslFn, float, vec2, vec4 } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { mul } from '../math/OperatorNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { passTexture } from './PassNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\n\r\n// WebGPU: The use of a single QuadMesh for both gaussian blur passes results in a single RenderObject with a SampledTexture binding that\r\n// alternates between source textures and triggers creation of new BindGroups and BindGroupLayouts every frame.\r\n\r\nconst _quadMesh1 = /*@__PURE__*/ new QuadMesh();\r\nconst _quadMesh2 = /*@__PURE__*/ new QuadMesh();\r\n\r\nclass GaussianBlurNode extends TempNode {\r\n\r\n\tconstructor( textureNode, directionNode = null, sigma = 2 ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.directionNode = directionNode;\r\n\t\tthis.sigma = sigma;\r\n\r\n\t\tthis._invSize = uniform( new Vector2() );\r\n\t\tthis._passDirection = uniform( new Vector2() );\r\n\r\n\t\tthis._horizontalRT = new RenderTarget();\r\n\t\tthis._horizontalRT.texture.name = 'GaussianBlurNode.horizontal';\r\n\t\tthis._verticalRT = new RenderTarget();\r\n\t\tthis._verticalRT.texture.name = 'GaussianBlurNode.vertical';\r\n\r\n\t\tthis._textureNode = passTexture( this, this._verticalRT.texture );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t\tthis.resolution = new Vector2( 1, 1 );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\twidth = Math.max( Math.round( width * this.resolution.x ), 1 );\r\n\t\theight = Math.max( Math.round( height * this.resolution.y ), 1 );\r\n\r\n\t\tthis._invSize.value.set( 1 / width, 1 / height );\r\n\t\tthis._horizontalRT.setSize( width, height );\r\n\t\tthis._verticalRT.setSize( width, height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst map = textureNode.value;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\r\n\t\tconst currentTexture = textureNode.value;\r\n\r\n\t\t_quadMesh1.material = this._material;\r\n\t\t_quadMesh2.material = this._material;\r\n\r\n\t\tthis.setSize( map.image.width, map.image.height );\r\n\r\n\t\tconst textureType = map.type;\r\n\r\n\t\tthis._horizontalRT.texture.type = textureType;\r\n\t\tthis._verticalRT.texture.type = textureType;\r\n\r\n\t\t// clear\r\n\r\n\t\trenderer.setMRT( null );\r\n\r\n\t\t// horizontal\r\n\r\n\t\trenderer.setRenderTarget( this._horizontalRT );\r\n\r\n\t\tthis._passDirection.value.set( 1, 0 );\r\n\r\n\t\t_quadMesh1.render( renderer );\r\n\r\n\t\t// vertical\r\n\r\n\t\ttextureNode.value = this._horizontalRT.texture;\r\n\t\trenderer.setRenderTarget( this._verticalRT );\r\n\r\n\t\tthis._passDirection.value.set( 0, 1 );\r\n\r\n\t\t_quadMesh2.render( renderer );\r\n\r\n\t\t// restore\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\t\ttextureNode.value = currentTexture;\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\r\n\t\tif ( textureNode.isTextureNode !== true ) {\r\n\r\n\t\t\tconsole.error( 'GaussianBlurNode requires a TextureNode.' );\r\n\r\n\t\t\treturn vec4();\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\t\tconst directionNode = vec2( this.directionNode || 1 );\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst blur = tslFn( () => {\r\n\r\n\t\t\tconst kernelSize = 3 + ( 2 * this.sigma );\r\n\t\t\tconst gaussianCoefficients = this._getCoefficients( kernelSize );\r\n\r\n\t\t\tconst invSize = this._invSize;\r\n\t\t\tconst direction = directionNode.mul( this._passDirection );\r\n\r\n\t\t\tconst weightSum = float( gaussianCoefficients[ 0 ] ).toVar();\r\n\t\t\tconst diffuseSum = vec4( sampleTexture( uvNode ).mul( weightSum ) ).toVar();\r\n\r\n\t\t\tfor ( let i = 1; i < kernelSize; i ++ ) {\r\n\r\n\t\t\t\tconst x = float( i );\r\n\t\t\t\tconst w = float( gaussianCoefficients[ i ] );\r\n\r\n\t\t\t\tconst uvOffset = vec2( direction.mul( invSize.mul( x ) ) ).toVar();\r\n\r\n\t\t\t\tconst sample1 = vec4( sampleTexture( uvNode.add( uvOffset ) ) );\r\n\t\t\t\tconst sample2 = vec4( sampleTexture( uvNode.sub( uvOffset ) ) );\r\n\r\n\t\t\t\tdiffuseSum.addAssign( sample1.add( sample2 ).mul( w ) );\r\n\t\t\t\tweightSum.addAssign( mul( 2.0, w ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn diffuseSum.div( weightSum );\r\n\r\n\t\t} );\r\n\r\n\t\t//\r\n\r\n\t\tconst material = this._material || ( this._material = builder.createNodeMaterial() );\r\n\t\tmaterial.fragmentNode = blur().context( builder.getSharedContext() );\r\n\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t//\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.textureNode = textureNode;\r\n\r\n\t\t//\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._horizontalRT.dispose();\r\n\t\tthis._verticalRT.dispose();\r\n\r\n\t}\r\n\r\n\t_getCoefficients( kernelRadius ) {\r\n\r\n\t\tconst coefficients = [];\r\n\r\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\r\n\r\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\r\n\r\n\t\t}\r\n\r\n\t\treturn coefficients;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const gaussianBlur = ( node, directionNode, sigma ) => nodeObject( new GaussianBlurNode( nodeObject( node ).toTexture(), directionNode, sigma ) );\r\n\r\naddNodeElement( 'gaussianBlur', gaussianBlur );\r\n\r\nexport default GaussianBlurNode;\r\n\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeObject, addNodeElement, tslFn, float, vec4 } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { passTexture } from './PassNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { sign, max } from '../math/MathNode.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nconst _quadMeshComp = /*@__PURE__*/ new QuadMesh();\r\n\r\nclass AfterImageNode extends TempNode {\r\n\r\n\tconstructor( textureNode, damp = 0.96 ) {\r\n\r\n\t\tsuper( textureNode );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.textureNodeOld = texture();\r\n\t\tthis.damp = uniform( damp );\r\n\r\n\t\tthis._compRT = new RenderTarget();\r\n\t\tthis._compRT.texture.name = 'AfterImageNode.comp';\r\n\r\n\t\tthis._oldRT = new RenderTarget();\r\n\t\tthis._oldRT.texture.name = 'AfterImageNode.old';\r\n\r\n\t\tthis._textureNode = passTexture( this, this._compRT.texture );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis._compRT.setSize( width, height );\r\n\t\tthis._oldRT.setSize( width, height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst map = textureNode.value;\r\n\r\n\t\tconst textureType = map.type;\r\n\r\n\t\tthis._compRT.texture.type = textureType;\r\n\t\tthis._oldRT.texture.type = textureType;\r\n\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\tthis.setSize( _size.x, _size.y );\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentTexture = textureNode.value;\r\n\r\n\t\tthis.textureNodeOld.value = this._oldRT.texture;\r\n\r\n\t\t// comp\r\n\t\trenderer.setRenderTarget( this._compRT );\r\n\t\t_quadMeshComp.render( renderer );\r\n\r\n\t\t// Swap the textures\r\n\t\tconst temp = this._oldRT;\r\n\t\tthis._oldRT = this._compRT;\r\n\t\tthis._compRT = temp;\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\ttextureNode.value = currentTexture;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst textureNodeOld = this.textureNodeOld;\r\n\r\n\t\t//\r\n\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\ttextureNodeOld.uvNode = uvNode;\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst when_gt = tslFn( ( [ x_immutable, y_immutable ] ) => {\r\n\r\n\t\t\tconst y = float( y_immutable ).toVar();\r\n\t\t\tconst x = vec4( x_immutable ).toVar();\r\n\r\n\t\t\treturn max( sign( x.sub( y ) ), 0.0 );\r\n\r\n\t\t} );\r\n\r\n\t\tconst afterImg = tslFn( () => {\r\n\r\n\t\t\tconst texelOld = vec4( textureNodeOld );\r\n\t\t\tconst texelNew = vec4( sampleTexture( uvNode ) );\r\n\r\n\t\t\ttexelOld.mulAssign( this.damp.mul( when_gt( texelOld, 0.1 ) ) );\r\n\t\t\treturn max( texelNew, texelOld );\r\n\r\n\t\t} );\r\n\r\n\t\t//\r\n\r\n\t\tconst materialComposed = this._materialComposed || ( this._materialComposed = builder.createNodeMaterial() );\r\n\t\tmaterialComposed.fragmentNode = afterImg();\r\n\r\n\t\t_quadMeshComp.material = materialComposed;\r\n\r\n\t\t//\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.textureNode = textureNode;\r\n\r\n\t\t//\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._compRT.dispose();\r\n\t\tthis._oldRT.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const afterImage = ( node, damp ) => nodeObject( new AfterImageNode( nodeObject( node ).toTexture(), damp ) );\r\n\r\naddNodeElement( 'afterImage', afterImage );\r\n\r\nexport default AfterImageNode;\r\n\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeObject, addNodeElement, tslFn, float, vec2, vec3 } from '../shadernode/ShaderNode.js';\r\nimport { loop } from '../utils/LoopNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { threshold } from './ColorAdjustmentNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { passTexture } from './PassNode.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\n\r\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\r\n\r\nclass AnamorphicNode extends TempNode {\r\n\r\n\tconstructor( textureNode, tresholdNode, scaleNode, samples ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.tresholdNode = tresholdNode;\r\n\t\tthis.scaleNode = scaleNode;\r\n\t\tthis.colorNode = vec3( 0.1, 0.0, 1.0 );\r\n\t\tthis.samples = samples;\r\n\t\tthis.resolution = new Vector2( 1, 1 );\r\n\r\n\t\tthis._renderTarget = new RenderTarget();\r\n\t\tthis._renderTarget.texture.name = 'anamorphic';\r\n\r\n\t\tthis._invSize = uniform( new Vector2() );\r\n\r\n\t\tthis._textureNode = passTexture( this, this._renderTarget.texture );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis._invSize.value.set( 1 / width, 1 / height );\r\n\r\n\t\twidth = Math.max( Math.round( width * this.resolution.x ), 1 );\r\n\t\theight = Math.max( Math.round( height * this.resolution.y ), 1 );\r\n\r\n\t\tthis._renderTarget.setSize( width, height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst map = textureNode.value;\r\n\r\n\t\tthis._renderTarget.texture.type = map.type;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentTexture = textureNode.value;\r\n\r\n\t\t_quadMesh.material = this._material;\r\n\r\n\t\tthis.setSize( map.image.width, map.image.height );\r\n\r\n\t\t// render\r\n\r\n\t\trenderer.setRenderTarget( this._renderTarget );\r\n\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\t// restore\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\ttextureNode.value = currentTexture;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst anamorph = tslFn( () => {\r\n\r\n\t\t\tconst samples = this.samples;\r\n\t\t\tconst halfSamples = Math.floor( samples / 2 );\r\n\r\n\t\t\tconst total = vec3( 0 ).toVar();\r\n\r\n\t\t\tloop( { start: - halfSamples, end: halfSamples }, ( { i } ) => {\r\n\r\n\t\t\t\tconst softness = float( i ).abs().div( halfSamples ).oneMinus();\r\n\r\n\t\t\t\tconst uv = vec2( uvNode.x.add( this._invSize.x.mul( i ).mul( this.scaleNode ) ), uvNode.y );\r\n\t\t\t\tconst color = sampleTexture( uv );\r\n\t\t\t\tconst pass = threshold( color, this.tresholdNode ).mul( softness );\r\n\r\n\t\t\t\ttotal.addAssign( pass );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn total.mul( this.colorNode );\r\n\r\n\t\t} );\r\n\r\n\t\t//\r\n\r\n\t\tconst material = this._material || ( this._material = builder.createNodeMaterial() );\r\n\t\tmaterial.fragmentNode = anamorph();\r\n\r\n\t\t//\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.textureNode = textureNode;\r\n\r\n\t\t//\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._renderTarget.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const anamorphic = ( node, threshold = .9, scale = 3, samples = 32 ) => nodeObject( new AnamorphicNode( nodeObject( node ).toTexture(), nodeObject( threshold ), nodeObject( scale ), samples ) );\r\n\r\naddNodeElement( 'anamorphic', anamorphic );\r\n\r\nexport default AnamorphicNode;\r\n\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { luminance } from './ColorAdjustmentNode.js';\r\nimport { addNodeElement, tslFn, nodeObject, vec2, vec3, vec4, mat3 } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass SobelOperatorNode extends TempNode {\r\n\r\n\tconstructor( textureNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t\tthis._invSize = uniform( new Vector2() );\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tconst map = this.textureNode.value;\r\n\r\n\t\tthis._invSize.value.set( 1 / map.image.width, 1 / map.image.height );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { textureNode } = this;\r\n\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst sobel = tslFn( () => {\r\n\r\n\t\t\t// Sobel Edge Detection (see https://youtu.be/uihBwtPIBxM)\r\n\r\n\t\t\tconst texel = this._invSize;\r\n\r\n\t\t\t// kernel definition (in glsl matrices are filled in column-major order)\r\n\r\n\t\t\tconst Gx = mat3( - 1, - 2, - 1, 0, 0, 0, 1, 2, 1 ); // x direction kernel\r\n\t\t\tconst Gy = mat3( - 1, 0, 1, - 2, 0, 2, - 1, 0, 1 ); // y direction kernel\r\n\r\n\t\t\t// fetch the 3x3 neighbourhood of a fragment\r\n\r\n\t\t\t// first column\r\n\r\n\t\t\tconst tx0y0 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( - 1, - 1 ) ) ) ).xyz );\r\n\t\t\tconst tx0y1 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( - 1, 0 ) ) ) ).xyz );\r\n\t\t\tconst tx0y2 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( - 1, 1 ) ) ) ).xyz );\r\n\r\n\t\t\t// second column\r\n\r\n\t\t\tconst tx1y0 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 0, - 1 ) ) ) ).xyz );\r\n\t\t\tconst tx1y1 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 0, 0 ) ) ) ).xyz );\r\n\t\t\tconst tx1y2 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 0, 1 ) ) ) ).xyz );\r\n\r\n\t\t\t// third column\r\n\r\n\t\t\tconst tx2y0 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 1, - 1 ) ) ) ).xyz );\r\n\t\t\tconst tx2y1 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 1, 0 ) ) ) ).xyz );\r\n\t\t\tconst tx2y2 = luminance( sampleTexture( uvNode.add( texel.mul( vec2( 1, 1 ) ) ) ).xyz );\r\n\r\n\t\t\t// gradient value in x direction\r\n\r\n\t\t\tconst valueGx = add(\r\n\t\t\t\tGx[ 0 ][ 0 ].mul( tx0y0 ),\r\n\t\t\t\tGx[ 1 ][ 0 ].mul( tx1y0 ),\r\n\t\t\t\tGx[ 2 ][ 0 ].mul( tx2y0 ),\r\n\t\t\t\tGx[ 0 ][ 1 ].mul( tx0y1 ),\r\n\t\t\t\tGx[ 1 ][ 1 ].mul( tx1y1 ),\r\n\t\t\t\tGx[ 2 ][ 1 ].mul( tx2y1 ),\r\n\t\t\t\tGx[ 0 ][ 2 ].mul( tx0y2 ),\r\n\t\t\t\tGx[ 1 ][ 2 ].mul( tx1y2 ),\r\n\t\t\t\tGx[ 2 ][ 2 ].mul( tx2y2 )\r\n\t\t\t);\r\n\r\n\r\n\t\t\t// gradient value in y direction\r\n\r\n\t\t\tconst valueGy = add(\r\n\t\t\t\tGy[ 0 ][ 0 ].mul( tx0y0 ),\r\n\t\t\t\tGy[ 1 ][ 0 ].mul( tx1y0 ),\r\n\t\t\t\tGy[ 2 ][ 0 ].mul( tx2y0 ),\r\n\t\t\t\tGy[ 0 ][ 1 ].mul( tx0y1 ),\r\n\t\t\t\tGy[ 1 ][ 1 ].mul( tx1y1 ),\r\n\t\t\t\tGy[ 2 ][ 1 ].mul( tx2y1 ),\r\n\t\t\t\tGy[ 0 ][ 2 ].mul( tx0y2 ),\r\n\t\t\t\tGy[ 1 ][ 2 ].mul( tx1y2 ),\r\n\t\t\t\tGy[ 2 ][ 2 ].mul( tx2y2 )\r\n\t\t\t);\r\n\r\n\t\t\t// magnitute of the total gradient\r\n\r\n\t\t\tconst G = valueGx.mul( valueGx ).add( valueGy.mul( valueGy ) ).sqrt();\r\n\r\n\t\t\treturn vec4( vec3( G ), 1 );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = sobel();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const sobel = ( node ) => nodeObject( new SobelOperatorNode( nodeObject( node ).toTexture() ) );\r\n\r\naddNodeElement( 'sobel', sobel );\r\n\r\nexport default SobelOperatorNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { addNodeElement, tslFn, nodeObject, vec2, vec4 } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { clamp } from '../math/MathNode.js';\r\n\r\nclass DepthOfFieldNode extends TempNode {\r\n\r\n\tconstructor( textureNode, viewZNode, focusNode, apertureNode, maxblurNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.viewZNode = viewZNode;\r\n\r\n\t\tthis.focusNode = focusNode;\r\n\t\tthis.apertureNode = apertureNode;\r\n\t\tthis.maxblurNode = maxblurNode;\r\n\r\n\t\tthis._aspect = uniform( 0 );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tconst map = this.textureNode.value;\r\n\r\n\t\tthis._aspect.value = map.image.width / map.image.height;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst textureNode = this.textureNode;\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst dof = tslFn( () => {\r\n\r\n\t\t\tconst aspectcorrect = vec2( 1.0, this._aspect );\r\n\r\n\t\t\tconst factor = this.focusNode.add( this.viewZNode );\r\n\r\n\t\t\tconst dofblur = vec2( clamp( factor.mul( this.apertureNode ), this.maxblurNode.negate(), this.maxblurNode ) );\r\n\r\n\t\t\tconst dofblur9 = dofblur.mul( 0.9 );\r\n\t\t\tconst dofblur7 = dofblur.mul( 0.7 );\r\n\t\t\tconst dofblur4 = dofblur.mul( 0.4 );\r\n\r\n\t\t\tlet col = vec4( 0.0 );\r\n\r\n\t\t\tcol = col.add( sampleTexture( uvNode ) );\r\n\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, 0.4 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.15, 0.37 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.37, 0.15 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.40, 0.0 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.37, - 0.15 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.15, - 0.37 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, - 0.4 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.15, 0.37 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.37, 0.15 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.4, 0.0 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.37, - 0.15 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.15, - 0.37 ).mul( aspectcorrect ).mul( dofblur ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.15, 0.37 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.37, 0.15 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.37, - 0.15 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.15, - 0.37 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.15, 0.37 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.37, 0.15 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.37, - 0.15 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.15, - 0.37 ).mul( aspectcorrect ).mul( dofblur9 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.40, 0.0 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, - 0.4 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.4, 0.0 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, 0.4 ).mul( aspectcorrect ).mul( dofblur7 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.4, 0.0 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, - 0.4 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, 0.29 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.4, 0.0 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( - 0.29, - 0.29 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\t\t\tcol = col.add( sampleTexture( uvNode.add( vec2( 0.0, 0.4 ).mul( aspectcorrect ).mul( dofblur4 ) ) ) );\r\n\r\n\t\t\tcol = col.div( 41 );\r\n\t\t\tcol.a = 1;\r\n\r\n\t\t\treturn vec4( col );\r\n\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = dof();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const dof = ( node, viewZNode, focus = 1, aperture = 0.025, maxblur = 1 ) => nodeObject( new DepthOfFieldNode( nodeObject( node ).toTexture(), nodeObject( viewZNode ), nodeObject( focus ), nodeObject( aperture ), nodeObject( maxblur ) ) );\r\n\r\naddNodeElement( 'dof', dof );\r\n\r\nexport default DepthOfFieldNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeObject, addNodeElement, tslFn, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { sin, cos } from '../math/MathNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass DotScreenNode extends TempNode {\r\n\r\n\tconstructor( inputNode, center = new Vector2( 0.5, 0.5 ), angle = 1.57, scale = 1 ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.inputNode = inputNode;\r\n\t\tthis.center = uniform( center );\r\n\t\tthis.angle = uniform( angle );\r\n\t\tthis.scale = uniform( scale );\r\n\r\n\t\tthis._size = uniform( new Vector2() );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\trenderer.getDrawingBufferSize( this._size.value );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst inputNode = this.inputNode;\r\n\r\n\t\tconst pattern = tslFn( () => {\r\n\r\n\t\t\tconst s = sin( this.angle );\r\n\t\t\tconst c = cos( this.angle );\r\n\r\n\t\t\tconst tex = uv().mul( this._size ).sub( this.center );\r\n\t\t\tconst point = vec2( c.mul( tex.x ).sub( s.mul( tex.y ) ), s.mul( tex.x ).add( c.mul( tex.y ) ) ).mul( this.scale );\r\n\r\n\t\t\treturn sin( point.x ).mul( sin( point.y ) ).mul( 4 );\r\n\r\n\t\t} );\r\n\r\n\t\tconst dotScreen = tslFn( () => {\r\n\r\n\t\t\tconst color = inputNode;\r\n\r\n\t\t\tconst average = add( color.r, color.g, color.b ).div( 3 );\r\n\r\n\t\t\treturn vec4( vec3( average.mul( 10 ).sub( 5 ).add( pattern() ) ), color.a );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = dotScreen();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const dotScreen = ( node, center, angle, scale ) => nodeObject( new DotScreenNode( nodeObject( node ), center, angle, scale ) );\r\n\r\naddNodeElement( 'dotScreen', dotScreen );\r\n\r\nexport default DotScreenNode;\r\n\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeObject, addNodeElement, tslFn, vec2, vec4 } from '../shadernode/ShaderNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { sin, cos } from '../math/MathNode.js';\r\n\r\nclass RGBShiftNode extends TempNode {\r\n\r\n\tconstructor( textureNode, amount = 0.005, angle = 0 ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.amount = uniform( amount );\r\n\t\tthis.angle = uniform( angle );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { textureNode } = this;\r\n\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\tconst sampleTexture = ( uv ) => textureNode.uv( uv );\r\n\r\n\t\tconst rgbShift = tslFn( () => {\r\n\r\n\t\t\tconst offset = vec2( cos( this.angle ), sin( this.angle ) ).mul( this.amount );\r\n\t\t\tconst cr = sampleTexture( uvNode.add( offset ) );\r\n\t\t\tconst cga = sampleTexture( uvNode );\r\n\t\t\tconst cb = sampleTexture( uvNode.sub( offset ) );\r\n\r\n\t\t\treturn vec4( cr.r, cga.g, cb.b, cga.a );\r\n\r\n\t\t} );\r\n\r\n\t\treturn rgbShift();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const rgbShift = ( node, amount, angle ) => nodeObject( new RGBShiftNode( nodeObject( node ).toTexture(), amount, angle ) );\r\n\r\naddNodeElement( 'rgbShift', rgbShift );\r\n\r\nexport default RGBShiftNode;\r\n\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { addNodeElement, tslFn, nodeProxy, vec4 } from '../shadernode/ShaderNode.js';\r\nimport { mix, fract, clamp, rand } from '../math/MathNode.js';\r\nimport { timerLocal } from '../utils/TimerNode.js';\r\n\r\nclass FilmNode extends TempNode {\r\n\r\n\tconstructor( inputNode, intensityNode = null, uvNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.inputNode = inputNode;\r\n\t\tthis.intensityNode = intensityNode;\r\n\t\tthis.uvNode = uvNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst uvNode = this.uvNode || uv();\r\n\r\n\t\tconst film = tslFn( () => {\r\n\r\n\t\t\tconst base = this.inputNode.rgb;\r\n\t\t\tconst noise = rand( fract( uvNode.add( timerLocal() ) ) );\r\n\r\n\t\t\tlet color = base.add( base.mul( clamp( noise.add( 0.1 ), 0, 1 ) ) );\r\n\r\n\t\t\tif ( this.intensityNode !== null ) {\r\n\r\n\t\t\t\tcolor = mix( base, color, this.intensityNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn vec4( color, this.inputNode.a );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = film();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const film = nodeProxy( FilmNode );\r\n\r\naddNodeElement( 'film', film );\r\n\r\nexport default FilmNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeElement, tslFn, nodeObject, vec3, vec4, float } from '../shadernode/ShaderNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\n\r\nclass Lut3DNode extends TempNode {\r\n\r\n\tconstructor( inputNode, lutNode, size, intensityNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.inputNode = inputNode;\r\n\t\tthis.lutNode = lutNode;\r\n\t\tthis.size = uniform( size );\r\n\t\tthis.intensityNode = intensityNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { inputNode, lutNode } = this;\r\n\r\n\t\tconst sampleLut = ( uv ) => lutNode.uv( uv );\r\n\r\n\t\tconst lut3D = tslFn( () => {\r\n\r\n\t\t\tconst base = inputNode;\r\n\r\n\t\t\t// pull the sample in by half a pixel so the sample begins at the center of the edge pixels.\r\n\r\n\t\t\tconst pixelWidth = float( 1.0 ).div( this.size );\r\n\t\t\tconst halfPixelWidth = float( 0.5 ).div( this.size );\r\n\t\t\tconst uvw = vec3( halfPixelWidth ).add( base.rgb.mul( float( 1.0 ).sub( pixelWidth ) ) );\r\n\r\n\t\t\tconst lutValue = vec4( sampleLut( uvw ).rgb, base.a );\r\n\r\n\t\t\treturn vec4( mix( base, lutValue, this.intensityNode ) );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = lut3D();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const lut3D = ( node, lut, size, intensity ) => nodeObject( new Lut3DNode( nodeObject( node ), nodeObject( lut ), size, nodeObject( intensity ) ) );\r\n\r\naddNodeElement( 'lut3D', lut3D );\r\n\r\nexport default Lut3DNode;\r\n", "import { Texture } from './Texture.js';\r\nimport { NearestFilter } from '../constants.js';\r\n\r\nclass DataTexture extends Texture {\r\n\r\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace ) {\r\n\r\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\r\n\r\n\t\tthis.isDataTexture = true;\r\n\r\n\t\tthis.image = { data: data, width: width, height: height };\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\t\tthis.unpackAlignment = 1;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DataTexture };\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { textureSize } from '../accessors/TextureSizeNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { addNodeElement, nodeObject, tslFn, mat3, vec2, vec3, vec4, float, int, If } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { DataTexture } from '../../textures/DataTexture.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { PI, cos, sin, pow, clamp, abs, max, mix, sqrt, acos, dot, normalize, cross } from '../math/MathNode.js';\r\nimport { div, mul, add, sub } from '../math/OperatorNode.js';\r\nimport { loop } from '../utils/LoopNode.js';\r\nimport { passTexture } from './PassNode.js';\r\nimport { RepeatWrapping } from '../../constants.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport { Color } from '../../math/Color.js';\r\n\r\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\r\nconst _currentClearColor = /*@__PURE__*/ new Color();\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nclass GTAONode extends TempNode {\r\n\r\n\tconstructor( depthNode, normalNode, camera ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.depthNode = depthNode;\r\n\t\tthis.normalNode = normalNode;\r\n\r\n\t\tthis.radius = uniform( 0.25 );\r\n\t\tthis.resolution = uniform( new Vector2() );\r\n\t\tthis.thickness = uniform( 1 );\r\n\t\tthis.distanceExponent = uniform( 1 );\r\n\t\tthis.distanceFallOff = uniform( 1 );\r\n\t\tthis.scale = uniform( 1 );\r\n\t\tthis.noiseNode = texture( generateMagicSquareNoise() );\r\n\r\n\t\tthis.cameraProjectionMatrix = uniform( camera.projectionMatrix );\r\n\t\tthis.cameraProjectionMatrixInverse = uniform( camera.projectionMatrixInverse );\r\n\r\n\t\tthis.SAMPLES = uniform( 16 );\r\n\r\n\t\tthis._aoRenderTarget = new RenderTarget();\r\n\t\tthis._aoRenderTarget.texture.name = 'GTAONode.AO';\r\n\r\n\t\tthis._material = null;\r\n\t\tthis._textureNode = passTexture( this, this._aoRenderTarget.texture );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.resolution.value.set( width, height );\r\n\t\tthis._aoRenderTarget.setSize( width, height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst size = renderer.getDrawingBufferSize( _size );\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\t\trenderer.getClearColor( _currentClearColor );\r\n\t\tconst currentClearAlpha = renderer.getClearAlpha();\r\n\r\n\t\t_quadMesh.material = this._material;\r\n\r\n\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\t// clear\r\n\r\n\t\trenderer.setMRT( null );\r\n\t\trenderer.setClearColor( 0xffffff, 1 );\r\n\r\n\t\t// ao\r\n\r\n\t\trenderer.setRenderTarget( this._aoRenderTarget );\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\t// restore\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\t\trenderer.setClearColor( _currentClearColor, currentClearAlpha );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst uvNode = uv();\r\n\r\n\t\tconst sampleDepth = ( uv ) => this.depthNode.uv( uv ).x;\r\n\t\tconst sampleNoise = ( uv ) => this.noiseNode.uv( uv );\r\n\r\n\t\tconst getSceneUvAndDepth = tslFn( ( [ sampleViewPos ] )=> {\r\n\r\n\t\t\tconst sampleClipPos = this.cameraProjectionMatrix.mul( vec4( sampleViewPos, 1.0 ) );\r\n\t\t\tlet sampleUv = sampleClipPos.xy.div( sampleClipPos.w ).mul( 0.5 ).add( 0.5 ).toVar();\r\n\t\t\tsampleUv = vec2( sampleUv.x, sampleUv.y.oneMinus() );\r\n\t\t\tconst sampleSceneDepth = sampleDepth( sampleUv );\r\n\t\t\treturn vec3( sampleUv, sampleSceneDepth );\r\n\r\n\t\t} );\r\n\r\n\t\tconst getViewPosition = tslFn( ( [ screenPosition, depth ] ) => {\r\n\r\n\t\t\tscreenPosition = vec2( screenPosition.x, screenPosition.y.oneMinus() ).mul( 2.0 ).sub( 1.0 );\r\n\r\n\t\t\tconst clipSpacePosition = vec4( vec3( screenPosition, depth ), 1.0 );\r\n\t\t\tconst viewSpacePosition = vec4( this.cameraProjectionMatrixInverse.mul( clipSpacePosition ) );\r\n\r\n\t\t\treturn viewSpacePosition.xyz.div( viewSpacePosition.w );\r\n\r\n\t\t} );\r\n\r\n\t\tconst ao = tslFn( () => {\r\n\r\n\t\t\tconst depth = sampleDepth( uvNode );\r\n\r\n\t\t\tdepth.greaterThanEqual( 1.0 ).discard();\r\n\r\n\t\t\tconst viewPosition = getViewPosition( uvNode, depth );\r\n\t\t\tconst viewNormal = this.normalNode.rgb.normalize();\r\n\r\n\t\t\tconst radiusToUse = this.radius;\r\n\r\n\t\t\tconst noiseResolution = textureSize( this.noiseNode, 0 );\r\n\t\t\tlet noiseUv = vec2( uvNode.x, uvNode.y.oneMinus() );\r\n\t\t\tnoiseUv = noiseUv.mul( this.resolution.div( noiseResolution ) );\r\n\t\t\tconst noiseTexel = sampleNoise( noiseUv );\r\n\t\t\tconst randomVec = noiseTexel.xyz.mul( 2.0 ).sub( 1.0 );\r\n\t\t\tconst tangent = vec3( randomVec.xy, 0.0 ).normalize();\r\n\t\t\tconst bitangent = vec3( tangent.y.mul( - 1.0 ), tangent.x, 0.0 );\r\n\t\t\tconst kernelMatrix = mat3( tangent, bitangent, vec3( 0.0, 0.0, 1.0 ) );\r\n\r\n\t\t\tconst DIRECTIONS = this.SAMPLES.lessThan( 30 ).cond( 3, 5 );\r\n\t\t\tconst STEPS = add( this.SAMPLES, DIRECTIONS.sub( 1 ) ).div( DIRECTIONS );\r\n\r\n\t\t\tconst ao = float( 0 ).toVar();\r\n\r\n\t\t\tloop( { start: int( 0 ), end: DIRECTIONS, type: 'int', condition: '<' }, ( { i } ) => {\r\n\r\n\t\t\t\tconst angle = float( i ).div( float( DIRECTIONS ) ).mul( PI );\r\n\t\t\t\tconst sampleDir = vec4( cos( angle ), sin( angle ), 0., add( 0.5, mul( 0.5, noiseTexel.w ) ) );\r\n\t\t\t\tsampleDir.xyz = normalize( kernelMatrix.mul( sampleDir.xyz ) );\r\n\r\n\t\t\t\tconst viewDir = normalize( viewPosition.xyz.negate() );\r\n\t\t\t\tconst sliceBitangent = normalize( cross( sampleDir.xyz, viewDir ) );\r\n\t\t\t\tconst sliceTangent = cross( sliceBitangent, viewDir );\r\n\t\t\t\tconst normalInSlice = normalize( viewNormal.sub( sliceBitangent.mul( dot( viewNormal, sliceBitangent ) ) ) );\r\n\r\n\t\t\t\tconst tangentToNormalInSlice = cross( normalInSlice, sliceBitangent );\r\n\t\t\t\tconst cosHorizons = vec2( dot( viewDir, tangentToNormalInSlice ), dot( viewDir, tangentToNormalInSlice.negate() ) ).toVar();\r\n\r\n\t\t\t\tloop( { end: STEPS, type: 'int', name: 'j', condition: '<' }, ( { j } ) => {\r\n\r\n\t\t\t\t\tconst sampleViewOffset = sampleDir.xyz.mul( radiusToUse ).mul( sampleDir.w ).mul( pow( div( float( j ).add( 1.0 ), float( STEPS ) ), this.distanceExponent ) );\r\n\r\n\t\t\t\t\t// x\r\n\r\n\t\t\t\t\tconst sampleSceneUvDepthX = getSceneUvAndDepth( viewPosition.add( sampleViewOffset ) );\r\n\t\t\t\t\tconst sampleSceneViewPositionX = getViewPosition( sampleSceneUvDepthX.xy, sampleSceneUvDepthX.z );\r\n\t\t\t\t\tconst viewDeltaX = sampleSceneViewPositionX.sub( viewPosition );\r\n\r\n\t\t\t\t\tIf( abs( viewDeltaX.z ).lessThan( this.thickness ), () => {\r\n\r\n\t\t\t\t\t\tconst sampleCosHorizon = dot( viewDir, normalize( viewDeltaX ) );\r\n\t\t\t\t\t\tcosHorizons.x.addAssign( max( 0, mul( sampleCosHorizon.sub( cosHorizons.x ), mix( 1.0, float( 2.0 ).div( float( j ).add( 2 ) ), this.distanceFallOff ) ) ) );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t// y\r\n\r\n\t\t\t\t\tconst sampleSceneUvDepthY = getSceneUvAndDepth( viewPosition.sub( sampleViewOffset ) );\r\n\t\t\t\t\tconst sampleSceneViewPositionY = getViewPosition( sampleSceneUvDepthY.xy, sampleSceneUvDepthY.z );\r\n\t\t\t\t\tconst viewDeltaY = sampleSceneViewPositionY.sub( viewPosition );\r\n\r\n\t\t\t\t\tIf( abs( viewDeltaY.z ).lessThan( this.thickness ), () => {\r\n\r\n\t\t\t\t\t\tconst sampleCosHorizon = dot( viewDir, normalize( viewDeltaY ) );\r\n\t\t\t\t\t\tcosHorizons.y.addAssign( max( 0, mul( sampleCosHorizon.sub( cosHorizons.y ), mix( 1.0, float( 2.0 ).div( float( j ).add( 2 ) ), this.distanceFallOff ) ) ) );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tconst sinHorizons = sqrt( sub( 1.0, cosHorizons.mul( cosHorizons ) ) );\r\n\t\t\t\tconst nx = dot( normalInSlice, sliceTangent );\r\n\t\t\t\tconst ny = dot( normalInSlice, viewDir );\r\n\t\t\t\tconst nxb = mul( 0.5, acos( cosHorizons.y ).sub( acos( cosHorizons.x ) ).add( sinHorizons.x.mul( cosHorizons.x ).sub( sinHorizons.y.mul( cosHorizons.y ) ) ) );\r\n\t\t\t\tconst nyb = mul( 0.5, sub( 2.0, cosHorizons.x.mul( cosHorizons.x ) ).sub( cosHorizons.y.mul( cosHorizons.y ) ) );\r\n\t\t\t\tconst occlusion = nx.mul( nxb ).add( ny.mul( nyb ) );\r\n\t\t\t\tao.addAssign( occlusion );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tao.assign( clamp( ao.div( DIRECTIONS ), 0, 1 ) );\r\n\t\t\tao.assign( pow( ao, this.scale ) );\r\n\r\n\t\t\treturn vec4( vec3( ao ), 1.0 );\r\n\r\n\t\t} );\r\n\r\n\t\tconst material = this._material || ( this._material = builder.createNodeMaterial() );\r\n\t\tmaterial.fragmentNode = ao().context( builder.getSharedContext() );\r\n\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t//\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._aoRenderTarget.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction generateMagicSquareNoise( size = 5 ) {\r\n\r\n\tconst noiseSize = Math.floor( size ) % 2 === 0 ? Math.floor( size ) + 1 : Math.floor( size );\r\n\tconst magicSquare = generateMagicSquare( noiseSize );\r\n\tconst noiseSquareSize = magicSquare.length;\r\n\tconst data = new Uint8Array( noiseSquareSize * 4 );\r\n\r\n\tfor ( let inx = 0; inx < noiseSquareSize; ++ inx ) {\r\n\r\n\t\tconst iAng = magicSquare[ inx ];\r\n\t\tconst angle = ( 2 * Math.PI * iAng ) / noiseSquareSize;\r\n\t\tconst randomVec = new Vector3(\r\n\t\t\tMath.cos( angle ),\r\n\t\t\tMath.sin( angle ),\r\n\t\t\t0\r\n\t\t).normalize();\r\n\t\tdata[ inx * 4 ] = ( randomVec.x * 0.5 + 0.5 ) * 255;\r\n\t\tdata[ inx * 4 + 1 ] = ( randomVec.y * 0.5 + 0.5 ) * 255;\r\n\t\tdata[ inx * 4 + 2 ] = 127;\r\n\t\tdata[ inx * 4 + 3 ] = 255;\r\n\r\n\t}\r\n\r\n\tconst noiseTexture = new DataTexture( data, noiseSize, noiseSize );\r\n\tnoiseTexture.wrapS = RepeatWrapping;\r\n\tnoiseTexture.wrapT = RepeatWrapping;\r\n\tnoiseTexture.needsUpdate = true;\r\n\r\n\treturn noiseTexture;\r\n\r\n}\r\n\r\nfunction generateMagicSquare( size ) {\r\n\r\n\tconst noiseSize = Math.floor( size ) % 2 === 0 ? Math.floor( size ) + 1 : Math.floor( size );\r\n\tconst noiseSquareSize = noiseSize * noiseSize;\r\n\tconst magicSquare = Array( noiseSquareSize ).fill( 0 );\r\n\tlet i = Math.floor( noiseSize / 2 );\r\n\tlet j = noiseSize - 1;\r\n\r\n\tfor ( let num = 1; num <= noiseSquareSize; ) {\r\n\r\n\t\tif ( i === - 1 && j === noiseSize ) {\r\n\r\n\t\t\tj = noiseSize - 2;\r\n\t\t\ti = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( j === noiseSize ) {\r\n\r\n\t\t\t\tj = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( i < 0 ) {\r\n\r\n\t\t\t\ti = noiseSize - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( magicSquare[ i * noiseSize + j ] !== 0 ) {\r\n\r\n\t\t\tj -= 2;\r\n\t\t\ti ++;\r\n\t\t\tcontinue;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmagicSquare[ i * noiseSize + j ] = num ++;\r\n\r\n\t\t}\r\n\r\n\t\tj ++;\r\n\t\ti --;\r\n\r\n\t}\r\n\r\n\treturn magicSquare;\r\n\r\n}\r\n\r\nexport const ao = ( depthNode, normalNode, camera ) => nodeObject( new GTAONode( nodeObject( depthNode ), nodeObject( normalNode ), camera ) );\r\n\r\naddNodeElement( 'ao', ao );\r\n\r\nexport default GTAONode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { addNodeElement, tslFn, nodeObject, float, int, vec2, vec3, vec4, mat2, If } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { uniforms } from '../accessors/UniformsNode.js';\r\nimport { abs, dot, sin, cos, PI, pow, max } from '../math/MathNode.js';\r\nimport { loop } from '../utils/LoopNode.js';\r\nimport { luminance } from './ColorAdjustmentNode.js';\r\nimport { textureSize } from '../accessors/TextureSizeNode.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nclass DenoiseNode extends TempNode {\r\n\r\n\tconstructor( textureNode, depthNode, normalNode, noiseNode, camera ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.depthNode = depthNode;\r\n\t\tthis.normalNode = normalNode;\r\n\t\tthis.noiseNode = noiseNode;\r\n\r\n\t\tthis.cameraProjectionMatrixInverse = uniform( camera.projectionMatrixInverse );\r\n\t\tthis.lumaPhi = uniform( 5 );\r\n\t\tthis.depthPhi = uniform( 5 );\r\n\t\tthis.normalPhi = uniform( 5 );\r\n\t\tthis.radius = uniform( 5 );\r\n\t\tthis.index = uniform( 0 );\r\n\r\n\t\tthis._resolution = uniform( new Vector2() );\r\n\t\tthis._sampleVectors = uniforms( generatePdSamplePointInitializer( 16, 2, 1 ) );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tconst map = this.textureNode.value;\r\n\r\n\t\tthis._resolution.value.set( map.image.width, map.image.height );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst uvNode = uv();\r\n\r\n\t\tconst sampleTexture = ( uv ) => this.textureNode.uv( uv );\r\n\t\tconst sampleDepth = ( uv ) => this.depthNode.uv( uv ).x;\r\n\t\tconst sampleNormal = ( uv ) => this.normalNode.uv( uv );\r\n\t\tconst sampleNoise = ( uv ) => this.noiseNode.uv( uv );\r\n\r\n\t\tconst getViewPosition = tslFn( ( [ screenPosition, depth ] ) => {\r\n\r\n\t\t\tscreenPosition = vec2( screenPosition.x, screenPosition.y.oneMinus() ).mul( 2.0 ).sub( 1.0 );\r\n\r\n\t\t\tconst clipSpacePosition = vec4( vec3( screenPosition, depth ), 1.0 );\r\n\t\t\tconst viewSpacePosition = vec4( this.cameraProjectionMatrixInverse.mul( clipSpacePosition ) );\r\n\r\n\t\t\treturn viewSpacePosition.xyz.div( viewSpacePosition.w );\r\n\r\n\t\t} );\r\n\r\n\t\tconst denoiseSample = tslFn( ( [ center, viewNormal, viewPosition, sampleUv ] ) => {\r\n\r\n\t\t\tconst texel = sampleTexture( sampleUv );\r\n\t\t\tconst depth = sampleDepth( sampleUv );\r\n\t\t\tconst normal = sampleNormal( sampleUv ).rgb.normalize();\r\n\t\t\tconst neighborColor = texel.rgb;\r\n\t\t\tconst viewPos = getViewPosition( sampleUv, depth );\r\n\r\n\t\t\tconst normalDiff = dot( viewNormal, normal ).toVar();\r\n\t\t\tconst normalSimilarity = pow( max( normalDiff, 0 ), this.normalPhi ).toVar();\r\n\t\t\tconst lumaDiff = abs( luminance( neighborColor ).sub( luminance( center ) ) ).toVar();\r\n\t\t\tconst lumaSimilarity = max( float( 1.0 ).sub( lumaDiff.div( this.lumaPhi ) ), 0 ).toVar();\r\n\t\t\tconst depthDiff = abs( dot( viewPosition.sub( viewPos ), viewNormal ) ).toVar();\r\n\t\t\tconst depthSimilarity = max( float( 1.0 ).sub( depthDiff.div( this.depthPhi ) ), 0 );\r\n\t\t\tconst w = lumaSimilarity.mul( depthSimilarity ).mul( normalSimilarity );\r\n\r\n\t\t\treturn vec4( neighborColor.mul( w ), w );\r\n\r\n\t\t} );\r\n\r\n\t\tconst denoise = tslFn( ( [ uvNode ] ) => {\r\n\r\n\t\t\tconst depth = sampleDepth( uvNode );\r\n\t\t\tconst viewNormal = sampleNormal( uvNode ).rgb.normalize();\r\n\r\n\t\t\tconst texel = sampleTexture( uvNode );\r\n\r\n\t\t\tIf( depth.greaterThanEqual( 1.0 ).or( dot( viewNormal, viewNormal ).equal( 0.0 ) ), () => {\r\n\r\n\t\t\t\treturn texel;\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst center = vec3( texel.rgb );\r\n\r\n\t\t\tconst viewPosition = getViewPosition( uvNode, depth );\r\n\r\n\t\t\tconst noiseResolution = textureSize( this.noiseNode, 0 );\r\n\t\t\tlet noiseUv = vec2( uvNode.x, uvNode.y.oneMinus() );\r\n\t\t\tnoiseUv = noiseUv.mul( this._resolution.div( noiseResolution ) );\r\n\t\t\tconst noiseTexel = sampleNoise( noiseUv );\r\n\r\n\t\t\tconst x = sin( noiseTexel.element( this.index.mod( 4 ).mul( 2 ).mul( PI ) ) );\r\n\t\t\tconst y = cos( noiseTexel.element( this.index.mod( 4 ).mul( 2 ).mul( PI ) ) );\r\n\r\n\t\t\tconst noiseVec = vec2( x, y );\r\n\t\t\tconst rotationMatrix = mat2( noiseVec.x, noiseVec.y.negate(), noiseVec.x, noiseVec.y );\r\n\r\n\t\t\tconst totalWeight = float( 1.0 ).toVar();\r\n\t\t\tconst denoised = vec3( texel.rgb ).toVar();\r\n\r\n\t\t\tloop( { start: int( 0 ), end: int( 16 ), type: 'int', condition: '<' }, ( { i } ) => {\r\n\r\n\t\t\t\tconst sampleDir = this._sampleVectors.element( i ).toVar();\r\n\t\t\t\tconst offset = rotationMatrix.mul( sampleDir.xy.mul( float( 1.0 ).add( sampleDir.z.mul( this.radius.sub( 1 ) ) ) ) ).div( this._resolution ).toVar();\r\n\t\t\t\tconst sampleUv = uvNode.add( offset ).toVar();\r\n\r\n\t\t\t\tconst result = denoiseSample( center, viewNormal, viewPosition, sampleUv );\r\n\r\n\t\t\t\tdenoised.addAssign( result.xyz );\r\n\t\t\t\ttotalWeight.addAssign( result.w );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tIf( totalWeight.greaterThan( float( 0 ) ), () => {\r\n\r\n\t\t\t\tdenoised.divAssign( totalWeight );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn vec4( denoised, texel.a );\r\n\r\n\t\t} ).setLayout( {\r\n\t\t\tname: 'denoise',\r\n\t\t\ttype: 'vec4',\r\n\t\t\tinputs: [\r\n\t\t\t\t{ name: 'uv', type: 'vec2' }\r\n\t\t\t]\r\n\t\t} );\r\n\r\n\t\tconst output = tslFn( () => {\r\n\r\n\t\t\treturn denoise( uvNode );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = output();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction generatePdSamplePointInitializer( samples, rings, radiusExponent ) {\r\n\r\n\tconst poissonDisk = generateDenoiseSamples( samples, rings, radiusExponent );\r\n\r\n\tconst array = [];\r\n\r\n\tfor ( let i = 0; i < samples; i ++ ) {\r\n\r\n\t\tconst sample = poissonDisk[ i ];\r\n\t\tarray.push( sample );\r\n\r\n\t}\r\n\r\n\treturn array;\r\n\r\n}\r\n\r\nfunction generateDenoiseSamples( numSamples, numRings, radiusExponent ) {\r\n\r\n\tconst samples = [];\r\n\r\n\tfor ( let i = 0; i < numSamples; i ++ ) {\r\n\r\n\t\tconst angle = 2 * Math.PI * numRings * i / numSamples;\r\n\t\tconst radius = Math.pow( i / ( numSamples - 1 ), radiusExponent );\r\n\t\tsamples.push( new Vector3( Math.cos( angle ), Math.sin( angle ), radius ) );\r\n\r\n\t}\r\n\r\n\treturn samples;\r\n\r\n}\r\n\r\nexport const denoise = ( node, depthNode, normalNode, noiseNode, camera ) => nodeObject( new DenoiseNode( nodeObject( node ).toTexture(), nodeObject( depthNode ), nodeObject( normalNode ), nodeObject( noiseNode ), camera ) );\r\n\r\naddNodeElement( 'denoise', denoise );\r\n\r\nexport default DenoiseNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { addNodeElement, tslFn, nodeObject, float, vec2, vec4, int, If } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { abs, max, min, mix, pow } from '../math/MathNode.js';\r\nimport { sub } from '../math/OperatorNode.js';\r\nimport { loop, Break } from '../utils/LoopNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nclass FXAANode extends TempNode {\r\n\r\n\tconstructor( textureNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t\tthis._invSize = uniform( new Vector2() );\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tconst map = this.textureNode.value;\r\n\r\n\t\tthis._invSize.value.set( 1 / map.image.width, 1 / map.image.height );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst textureNode = this.textureNode.bias( - 100 );\r\n\t\tconst uvNode = textureNode.uvNode || uv();\r\n\r\n\t\t// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\r\n\r\n\t\t//----------------------------------------------------------------------------------\r\n\t\t// File:        es3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\r\n\t\t// SDK Version: v3.00\r\n\t\t// Email:       gameworks@nvidia.com\r\n\t\t// Site:        http://developer.nvidia.com/\r\n\t\t//\r\n\t\t// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\r\n\t\t//\r\n\t\t// Redistribution and use in source and binary forms, with or without\r\n\t\t// modification, are permitted provided that the following conditions\r\n\t\t// are met:\r\n\t\t//  * Redistributions of source code must retain the above copyright\r\n\t\t//    notice, this list of conditions and the following disclaimer.\r\n\t\t//  * Redistributions in binary form must reproduce the above copyright\r\n\t\t//    notice, this list of conditions and the following disclaimer in the\r\n\t\t//    documentation and/or other materials provided with the distribution.\r\n\t\t//  * Neither the name of NVIDIA CORPORATION nor the names of its\r\n\t\t//    contributors may be used to endorse or promote products derived\r\n\t\t//    from this software without specific prior written permission.\r\n\t\t//\r\n\t\t// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY\r\n\t\t// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t\t// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n\t\t// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\r\n\t\t// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n\t\t// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n\t\t// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n\t\t// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\r\n\t\t// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n\t\t// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n\t\t// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\t\t//\r\n\t\t//----------------------------------------------------------------------------------\r\n\r\n\t\tconst FxaaTexTop = ( p ) => textureNode.uv( p );\r\n\t\tconst FxaaTexOff = ( p, o, r ) => textureNode.uv( p.add( o.mul( r ) ) );\r\n\r\n\t\tconst NUM_SAMPLES = int( 5 );\r\n\r\n\t\tconst contrast = tslFn( ( [ a_immutable, b_immutable ] ) => {\r\n\r\n\t\t\t// assumes colors have premultipliedAlpha, so that the calculated color contrast is scaled by alpha\r\n\r\n\t\t\tconst b = vec4( b_immutable ).toVar();\r\n\t\t\tconst a = vec4( a_immutable ).toVar();\r\n\t\t\tconst diff = vec4( abs( a.sub( b ) ) ).toVar();\r\n\r\n\t\t\treturn max( max( max( diff.r, diff.g ), diff.b ), diff.a );\r\n\r\n\t\t} );\r\n\r\n\t\t// FXAA3 QUALITY - PC\r\n\r\n\t\tconst FxaaPixelShader = tslFn( ( [ uv, fxaaQualityRcpFrame, fxaaQualityEdgeThreshold, fxaaQualityinvEdgeThreshold ] ) => {\r\n\r\n\t\t\tconst rgbaM = FxaaTexTop( uv ).toVar();\r\n\t\t\tconst rgbaS = FxaaTexOff( uv, vec2( 0.0, - 1.0 ), fxaaQualityRcpFrame.xy ).toVar();\r\n\t\t\tconst rgbaE = FxaaTexOff( uv, vec2( 1.0, 0.0 ), fxaaQualityRcpFrame.xy ).toVar();\r\n\t\t\tconst rgbaN = FxaaTexOff( uv, vec2( 0.0, 1.0 ), fxaaQualityRcpFrame.xy ).toVar();\r\n\t\t\tconst rgbaW = FxaaTexOff( uv, vec2( - 1.0, 0.0 ), fxaaQualityRcpFrame.xy ).toVar();\r\n\t\t\t// . S .\r\n\t\t\t// W M E\r\n\t\t\t// . N .\r\n\r\n\t\t\tconst contrastN = contrast( rgbaM, rgbaN ).toVar();\r\n\t\t\tconst contrastS = contrast( rgbaM, rgbaS ).toVar();\r\n\t\t\tconst contrastE = contrast( rgbaM, rgbaE ).toVar();\r\n\t\t\tconst contrastW = contrast( rgbaM, rgbaW ).toVar();\r\n\r\n\t\t\tconst maxValue = max( contrastN, max( contrastS, max( contrastE, contrastW ) ) ).toVar();\r\n\r\n\t\t\t// . 0 .\r\n\t\t\t// 0 0 0\r\n\t\t\t// . 0 .\r\n\r\n\t\t\tIf( maxValue.lessThan( fxaaQualityEdgeThreshold ), () => {\r\n\r\n\t\t\t\treturn rgbaM; // assuming define FXAA_DISCARD is always 0\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst relativeVContrast = sub( contrastN.add( contrastS ), ( contrastE.add( contrastW ) ) ).toVar();\r\n\t\t\trelativeVContrast.mulAssign( fxaaQualityinvEdgeThreshold );\r\n\r\n\t\t\t// 45 deg edge detection and corners of objects, aka V/H contrast is too similar\r\n\r\n\t\t\tIf( abs( relativeVContrast ).lessThan( 0.3 ), () => {\r\n\r\n\t\t\t\t// locate the edge\r\n\r\n\t\t\t\tconst x = contrastE.greaterThan( contrastW ).cond( 1, - 1 ).toVar();\r\n\t\t\t\tconst y = contrastS.greaterThan( contrastN ).cond( 1, - 1 ).toVar();\r\n\r\n\t\t\t\tconst dirToEdge = vec2( x, y ).toVar();\r\n\t\t\t\t// . 2 .      . 1 .\r\n\t\t\t\t// 1 0 2  ~=  0 0 1\r\n\t\t\t\t// . 1 .      . 0 .\r\n\r\n\t\t\t\t// tap 2 pixels and see which ones are \"outside\" the edge, to\r\n\t\t\t\t// determine if the edge is vertical or horizontal\r\n\r\n\t\t\t\tconst rgbaAlongH = FxaaTexOff( uv, vec2( dirToEdge.x, dirToEdge.y ), fxaaQualityRcpFrame.xy );\r\n\t\t\t\tconst matchAlongH = contrast( rgbaM, rgbaAlongH ).toVar();\r\n\t\t\t\t// . 1 .\r\n\t\t\t\t// 0 0 1\r\n\t\t\t\t// . 0 H\r\n\r\n\t\t\t\tconst rgbaAlongV = FxaaTexOff( uv, vec2( dirToEdge.x.negate(), dirToEdge.y.negate() ), fxaaQualityRcpFrame.xy );\r\n\t\t\t\tconst matchAlongV = contrast( rgbaM, rgbaAlongV ).toVar();\r\n\t\t\t\t// V 1 .\r\n\t\t\t\t// 0 0 1\r\n\t\t\t\t// . 0 .\r\n\r\n\t\t\t\trelativeVContrast.assign( matchAlongV.sub( matchAlongH ) );\r\n\t\t\t\trelativeVContrast.mulAssign( fxaaQualityinvEdgeThreshold );\r\n\r\n\t\t\t\tIf( abs( relativeVContrast ).lessThan( 0.3 ), () => { // 45 deg edge\r\n\r\n\t\t\t\t\t// 1 1 .\r\n\t\t\t\t\t// 0 0 1\r\n\t\t\t\t\t// . 0 1\r\n\r\n\t\t\t\t\t// do a simple blur\r\n\t\t\t\t\tconst sum = rgbaN.add( rgbaS ).add( rgbaE ).add( rgbaW );\r\n\t\t\t\t\treturn mix( rgbaM, sum.mul( 0.25 ), 0.4 );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst offNP = vec2().toVar();\r\n\r\n\t\t\tIf( relativeVContrast.lessThanEqual( 0 ), () => {\r\n\r\n\t\t\t\trgbaN.assign( rgbaW );\r\n\t\t\t\trgbaS.assign( rgbaE );\r\n\r\n\t\t\t\t// . 0 .      1\r\n\t\t\t\t// 1 0 1  ->  0\r\n\t\t\t\t// . 0 .      1\r\n\r\n\t\t\t\toffNP.x.assign( 0 );\r\n\t\t\t\toffNP.y.assign( fxaaQualityRcpFrame.y );\r\n\r\n\t\t\t } ).else( () => {\r\n\r\n\t\t\t\toffNP.x.assign( fxaaQualityRcpFrame.x );\r\n\t\t\t\toffNP.y.assign( 0 );\r\n\r\n\t\t\t } );\r\n\r\n\t\t\tconst mn = contrast( rgbaM, rgbaN ).toVar();\r\n\t\t\tconst ms = contrast( rgbaM, rgbaS ).toVar();\r\n\r\n\t\t\tIf( mn.lessThanEqual( ms ), () => {\r\n\r\n\t\t\t\trgbaN.assign( rgbaS );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst doneN = int( 0 ).toVar();\r\n\t\t\tconst doneP = int( 0 ).toVar();\r\n\r\n\t\t\tconst nDist = float( 0 ).toVar();\r\n\t\t\tconst pDist = float( 0 ).toVar();\r\n\r\n\t\t\tconst posN = vec2( uv ).toVar();\r\n\t\t\tconst posP = vec2( uv ).toVar();\r\n\r\n\t\t\tconst iterationsUsedN = int( 0 ).toVar();\r\n\t\t\tconst iterationsUsedP = int( 0 ).toVar();\r\n\r\n\t\t\tloop( NUM_SAMPLES, ( { i } ) => {\r\n\r\n\t\t\t\tconst increment = i.add( 1 ).toVar();\r\n\r\n\t\t\t\tIf( doneN.equal( 0 ), () => {\r\n\r\n\t\t\t\t\tnDist.addAssign( increment );\r\n\t\t\t\t\tposN.assign( uv.add( offNP.mul( nDist ) ) );\r\n\t\t\t\t\tconst rgbaEndN = FxaaTexTop( posN.xy );\r\n\r\n\t\t\t\t\tconst nm = contrast( rgbaEndN, rgbaM ).toVar();\r\n\t\t\t\t\tconst nn = contrast( rgbaEndN, rgbaN ).toVar();\r\n\r\n\t\t\t\t\tIf( nm.greaterThan( nn ), () => {\r\n\r\n\t\t\t\t\t\tdoneN.assign( 1 );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\titerationsUsedN.assign( i );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tIf( doneP.equal( 0 ), () => {\r\n\r\n\t\t\t\t\tpDist.addAssign( increment );\r\n\t\t\t\t\tposP.assign( uv.sub( offNP.mul( pDist ) ) );\r\n\t\t\t\t\tconst rgbaEndP = FxaaTexTop( posP.xy );\r\n\r\n\t\t\t\t\tconst pm = contrast( rgbaEndP, rgbaM ).toVar();\r\n\t\t\t\t\tconst pn = contrast( rgbaEndP, rgbaN ).toVar();\r\n\r\n\t\t\t\t\tIf( pm.greaterThan( pn ), () => {\r\n\r\n\t\t\t\t\t\tdoneP.assign( 1 );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\titerationsUsedP.assign( i );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tIf( doneN.equal( 1 ).or( doneP.equal( 1 ) ), () => {\r\n\r\n\t\t\t\t\tBreak();\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tIf( doneN.equal( 0 ).and( doneP.equal( 0 ) ), () => {\r\n\r\n\t\t\t\treturn rgbaM; // failed to find end of edge\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst distN = float( 1 ).toVar();\r\n\t\t\tconst distP = float( 1 ).toVar();\r\n\r\n\t\t\tIf( doneN.equal( 1 ), () => {\r\n\r\n\t\t\t\tdistN.assign( float( iterationsUsedN ).div( float( NUM_SAMPLES.sub( 1 ) ) ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tIf( doneP.equal( 1 ), () => {\r\n\r\n\t\t\t\tdistP.assign( float( iterationsUsedP ).div( float( NUM_SAMPLES.sub( 1 ) ) ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst dist = min( distN, distP );\r\n\r\n\t\t\t// hacky way of reduces blurriness of mostly diagonal edges\r\n\t\t\t// but reduces AA quality\r\n\t\t\tdist.assign( pow( dist, 0.5 ) );\r\n\t\t\tdist.assign( float( 1 ).sub( dist ) );\r\n\r\n\t\t\treturn mix( rgbaM, rgbaN, dist.mul( 0.5 ) );\r\n\r\n\t\t} ).setLayout( {\r\n\t\t\tname: 'FxaaPixelShader',\r\n\t\t\ttype: 'vec4',\r\n\t\t\tinputs: [\r\n\t\t\t\t{ name: 'uv', type: 'vec2' },\r\n\t\t\t\t{ name: 'fxaaQualityRcpFrame', type: 'vec2' },\r\n\t\t\t\t{ name: 'fxaaQualityEdgeThreshold', type: 'float' },\r\n\t\t\t\t{ name: 'fxaaQualityinvEdgeThreshold', type: 'float' },\r\n\t\t\t]\r\n\t\t} );\r\n\r\n\t\tconst fxaa = tslFn( () => {\r\n\r\n\t\t\tconst edgeDetectionQuality = float( 0.2 );\r\n\t\t\tconst invEdgeDetectionQuality = float( 1 ).div( edgeDetectionQuality );\r\n\r\n\t\t\treturn FxaaPixelShader( uvNode, this._invSize, edgeDetectionQuality, invEdgeDetectionQuality );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = fxaa();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const fxaa = ( node ) => nodeObject( new FXAANode( nodeObject( node ).toTexture() ) );\r\n\r\naddNodeElement( 'fxaa', fxaa );\r\n\r\nexport default FXAANode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeElement, tslFn, nodeObject, float, vec4, int } from '../shadernode/ShaderNode.js';\r\nimport { mix, smoothstep } from '../math/MathNode.js';\r\nimport { luminance } from './ColorAdjustmentNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { uniforms } from '../accessors/UniformsNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport { passTexture } from './PassNode.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport { HalfFloatType } from '../../constants.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { loop } from '../utils/LoopNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\r\n\r\nconst _clearColor = /*@__PURE__*/ new Color( 0, 0, 0 );\r\nconst _currentClearColor = /*@__PURE__*/ new Color();\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\nconst _BlurDirectionX = /*@__PURE__*/ new Vector2( 1.0, 0.0 );\r\nconst _BlurDirectionY = /*@__PURE__*/ new Vector2( 0.0, 1.0 );\r\n\r\nclass BloomNode extends TempNode {\r\n\r\n\tconstructor( inputNode, strength = 1, radius = 0, threshold = 0 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.inputNode = inputNode;\r\n\t\tthis.strength = uniform( strength );\r\n\t\tthis.radius = uniform( radius );\r\n\t\tthis.threshold = uniform( threshold );\r\n\r\n\t\tthis.smoothWidth = uniform( 0.01 );\r\n\r\n\t\t//\r\n\r\n\t\tthis._renderTargetsHorizontal = [];\r\n\t\tthis._renderTargetsVertical = [];\r\n\t\tthis._nMips = 5;\r\n\r\n\t\t// render targets\r\n\r\n\t\tthis._renderTargetBright = new RenderTarget( 1, 1, { type: HalfFloatType } );\r\n\t\tthis._renderTargetBright.texture.name = 'UnrealBloomPass.bright';\r\n\t\tthis._renderTargetBright.texture.generateMipmaps = false;\r\n\r\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\r\n\r\n\t\t\tconst renderTargetHorizontal = new RenderTarget( 1, 1, { type: HalfFloatType } );\r\n\r\n\t\t\trenderTargetHorizontal.texture.name = 'UnrealBloomPass.h' + i;\r\n\t\t\trenderTargetHorizontal.texture.generateMipmaps = false;\r\n\r\n\t\t\tthis._renderTargetsHorizontal.push( renderTargetHorizontal );\r\n\r\n\t\t\tconst renderTargetVertical = new RenderTarget( 1, 1, { type: HalfFloatType } );\r\n\r\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\r\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\r\n\r\n\t\t\tthis._renderTargetsVertical.push( renderTargetVertical );\r\n\r\n\t\t}\r\n\r\n\t\t// materials\r\n\r\n\t\tthis._compositeMaterial = null;\r\n\t\tthis._highPassFilterMaterial = null;\r\n\t\tthis._separableBlurMaterials = [];\r\n\r\n\t\t// pass and texture nodes\r\n\r\n\t\tthis._textureNodeBright = texture( this._renderTargetBright.texture );\r\n\t\tthis._textureNodeBlur0 = texture( this._renderTargetsVertical[ 0 ].texture );\r\n\t\tthis._textureNodeBlur1 = texture( this._renderTargetsVertical[ 1 ].texture );\r\n\t\tthis._textureNodeBlur2 = texture( this._renderTargetsVertical[ 2 ].texture );\r\n\t\tthis._textureNodeBlur3 = texture( this._renderTargetsVertical[ 3 ].texture );\r\n\t\tthis._textureNodeBlur4 = texture( this._renderTargetsVertical[ 4 ].texture );\r\n\r\n\t\tthis._textureOutput = passTexture( this, this._renderTargetsHorizontal[ 0 ].texture );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\tgetTextureNode() {\r\n\r\n\t\treturn this._textureOutput;\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tlet resx = Math.round( width / 2 );\r\n\t\tlet resy = Math.round( height / 2 );\r\n\r\n\t\tthis._renderTargetBright.setSize( resx, resy );\r\n\r\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\r\n\r\n\t\t\tthis._renderTargetsHorizontal[ i ].setSize( resx, resy );\r\n\t\t\tthis._renderTargetsVertical[ i ].setSize( resx, resy );\r\n\r\n\t\t\tthis._separableBlurMaterials[ i ].invSize.value.set( 1 / resx, 1 / resy );\r\n\r\n\t\t\tresx = Math.round( resx / 2 );\r\n\t\t\tresy = Math.round( resy / 2 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\r\n\t\tconst size = renderer.getDrawingBufferSize( _size );\r\n\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\t\trenderer.getClearColor( _currentClearColor );\r\n\t\tconst currentClearAlpha = renderer.getClearAlpha();\r\n\r\n\t\tthis.setSize( size.width, size.height );\r\n\r\n\t\trenderer.setMRT( null );\r\n\t\trenderer.setClearColor( _clearColor, 0 );\r\n\r\n\t\t// 1. Extract Bright Areas\r\n\r\n\t\trenderer.setRenderTarget( this._renderTargetBright );\r\n\t\t_quadMesh.material = this._highPassFilterMaterial;\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\t// 2. Blur All the mips progressively\r\n\r\n\t\tlet inputRenderTarget = this._renderTargetBright;\r\n\r\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\r\n\r\n\t\t\t_quadMesh.material = this._separableBlurMaterials[ i ];\r\n\r\n\t\t\tthis._separableBlurMaterials[ i ].colorTexture.value = inputRenderTarget.texture;\r\n\t\t\tthis._separableBlurMaterials[ i ].direction.value = _BlurDirectionX;\r\n\t\t\trenderer.setRenderTarget( this._renderTargetsHorizontal[ i ] );\r\n\t\t\trenderer.clear();\r\n\t\t\t_quadMesh.render( renderer );\r\n\r\n\t\t\tthis._separableBlurMaterials[ i ].colorTexture.value = this._renderTargetsHorizontal[ i ].texture;\r\n\t\t\tthis._separableBlurMaterials[ i ].direction.value = _BlurDirectionY;\r\n\t\t\trenderer.setRenderTarget( this._renderTargetsVertical[ i ] );\r\n\t\t\trenderer.clear();\r\n\t\t\t_quadMesh.render( renderer );\r\n\r\n\t\t\tinputRenderTarget = this._renderTargetsVertical[ i ];\r\n\r\n\t\t}\r\n\r\n\t\t// 3. Composite All the mips\r\n\r\n\t\trenderer.setRenderTarget( this._renderTargetsHorizontal[ 0 ] );\r\n\t\trenderer.clear();\r\n\t\t_quadMesh.material = this._compositeMaterial;\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\t// restore\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\t\trenderer.setClearColor( _currentClearColor, currentClearAlpha );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// luminosity high pass material\r\n\r\n\t\tconst luminosityHighPass = tslFn( () => {\r\n\r\n\t\t\tconst texel = this.inputNode;\r\n\t\t\tconst v = luminance( texel.rgb );\r\n\r\n\t\t\tconst alpha = smoothstep( this.threshold, this.threshold.add( this.smoothWidth ), v );\r\n\r\n\t\t\treturn mix( vec4( 0 ), texel, alpha );\r\n\r\n\t\t} );\r\n\r\n\t\tthis._highPassFilterMaterial = this._highPassFilterMaterial || builder.createNodeMaterial();\r\n\t\tthis._highPassFilterMaterial.fragmentNode = luminosityHighPass().context( builder.getSharedContext() );\r\n\t\tthis._highPassFilterMaterial.needsUpdate = true;\r\n\r\n\t\t// gaussian blur materials\r\n\r\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\r\n\r\n\t\tfor ( let i = 0; i < this._nMips; i ++ ) {\r\n\r\n\t\t\tthis._separableBlurMaterials.push( this._getSeperableBlurMaterial( builder, kernelSizeArray[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\t// composite material\r\n\r\n\t\tconst bloomFactors = uniforms( [ 1.0, 0.8, 0.6, 0.4, 0.2 ] );\r\n\t\tconst bloomTintColors = uniforms( [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ] );\r\n\r\n\t\tconst lerpBloomFactor = tslFn( ( [ factor, radius ] ) => {\r\n\r\n\t\t\tconst mirrorFactor = float( 1.2 ).sub( factor );\r\n\t\t\treturn mix( factor, mirrorFactor, radius );\r\n\r\n\t\t} ).setLayout( {\r\n\t\t\tname: 'lerpBloomFactor',\r\n\t\t\ttype: 'float',\r\n\t\t\tinputs: [\r\n\t\t\t\t{ name: 'factor', type: 'float' },\r\n\t\t\t\t{ name: 'radius', type: 'float' },\r\n\t\t\t]\r\n\t\t} );\r\n\r\n\r\n\t\tconst compositePass = tslFn( () => {\r\n\r\n\t\t\tconst color0 = lerpBloomFactor( bloomFactors.element( 0 ), this.radius ).mul( vec4( bloomTintColors.element( 0 ), 1.0 ) ).mul( this._textureNodeBlur0 );\r\n\t\t\tconst color1 = lerpBloomFactor( bloomFactors.element( 1 ), this.radius ).mul( vec4( bloomTintColors.element( 1 ), 1.0 ) ).mul( this._textureNodeBlur1 );\r\n\t\t\tconst color2 = lerpBloomFactor( bloomFactors.element( 2 ), this.radius ).mul( vec4( bloomTintColors.element( 2 ), 1.0 ) ).mul( this._textureNodeBlur2 );\r\n\t\t\tconst color3 = lerpBloomFactor( bloomFactors.element( 3 ), this.radius ).mul( vec4( bloomTintColors.element( 3 ), 1.0 ) ).mul( this._textureNodeBlur3 );\r\n\t\t\tconst color4 = lerpBloomFactor( bloomFactors.element( 4 ), this.radius ).mul( vec4( bloomTintColors.element( 4 ), 1.0 ) ).mul( this._textureNodeBlur4 );\r\n\r\n\t\t\tconst sum = color0.add( color1 ).add( color2 ).add( color3 ).add( color4 );\r\n\r\n\t\t\treturn sum.mul( this.strength );\r\n\r\n\t\t} );\r\n\r\n\t\tthis._compositeMaterial = this._compositeMaterial || builder.createNodeMaterial();\r\n\t\tthis._compositeMaterial.fragmentNode = compositePass().context( builder.getSharedContext() );\r\n\t\tthis._compositeMaterial.needsUpdate = true;\r\n\r\n\t\t//\r\n\r\n\t\treturn this._textureOutput;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tfor ( let i = 0; i < this._renderTargetsHorizontal.length; i ++ ) {\r\n\r\n\t\t\tthis._renderTargetsHorizontal[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < this._renderTargetsVertical.length; i ++ ) {\r\n\r\n\t\t\tthis._renderTargetsVertical[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis._renderTargetBright.dispose();\r\n\r\n\t}\r\n\r\n\t_getSeperableBlurMaterial( builder, kernelRadius ) {\r\n\r\n\t\tconst coefficients = [];\r\n\r\n\t\tfor ( let i = 0; i < kernelRadius; i ++ ) {\r\n\r\n\t\t\tcoefficients.push( 0.39894 * Math.exp( - 0.5 * i * i / ( kernelRadius * kernelRadius ) ) / kernelRadius );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst colorTexture = texture();\r\n\t\tconst gaussianCoefficients = uniforms( coefficients );\r\n\t\tconst invSize = uniform( new Vector2() );\r\n\t\tconst direction = uniform( new Vector2( 0.5, 0.5 ) );\r\n\r\n\t\tconst uvNode = uv();\r\n\t\tconst sampleTexel = ( uv ) => colorTexture.uv( uv );\r\n\r\n\t\tconst seperableBlurPass = tslFn( () => {\r\n\r\n\t\t\tconst weightSum = gaussianCoefficients.element( 0 ).toVar();\r\n\t\t\tconst diffuseSum = sampleTexel( uvNode ).rgb.mul( weightSum ).toVar();\r\n\r\n\t\t\tloop( { start: int( 1 ), end: int( kernelRadius ), type: 'int', condition: '<' }, ( { i } ) => {\r\n\r\n\t\t\t\tconst x = float( i );\r\n\t\t\t\tconst w = gaussianCoefficients.element( i );\r\n\t\t\t\tconst uvOffset = direction.mul( invSize ).mul( x );\r\n\t\t\t\tconst sample1 = sampleTexel( uvNode.add( uvOffset ) ).rgb;\r\n\t\t\t\tconst sample2 = sampleTexel( uvNode.sub( uvOffset ) ).rgb;\r\n\t\t\t\tdiffuseSum.addAssign( add( sample1, sample2 ).mul( w ) );\r\n\t\t\t\tweightSum.addAssign( float( 2.0 ).mul( w ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn vec4( diffuseSum.div( weightSum ), 1.0 );\r\n\r\n\t\t} );\r\n\r\n\t\tconst seperableBlurMaterial = builder.createNodeMaterial();\r\n\t\tseperableBlurMaterial.fragmentNode = seperableBlurPass().context( builder.getSharedContext() );\r\n\t\tseperableBlurMaterial.needsUpdate = true;\r\n\r\n\t\t// uniforms\r\n\t\tseperableBlurMaterial.colorTexture = colorTexture;\r\n\t\tseperableBlurMaterial.direction = direction;\r\n\t\tseperableBlurMaterial.invSize = invSize;\r\n\r\n\t\treturn seperableBlurMaterial;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const bloom = ( node, strength, radius, threshold ) => nodeObject( new BloomNode( nodeObject( node ), strength, radius, threshold ) );\r\n\r\naddNodeElement( 'bloom', bloom );\r\n\r\nexport default BloomNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { addNodeElement, tslFn, nodeObject, float, int, vec4, If } from '../shadernode/ShaderNode.js';\r\nimport { clamp, mix } from '../math/MathNode.js';\r\nimport { sub } from '../math/OperatorNode.js';\r\n\r\nclass TransitionNode extends TempNode {\r\n\r\n\tconstructor( textureNodeA, textureNodeB, mixTextureNode, mixRatioNode, thresholdNode, useTextureNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t// Input textures\r\n\r\n\t\tthis.textureNodeA = textureNodeA;\r\n\t\tthis.textureNodeB = textureNodeB;\r\n\t\tthis.mixTextureNode = mixTextureNode;\r\n\r\n\t\t// Uniforms\r\n\r\n\t\tthis.mixRatioNode = mixRatioNode;\r\n\t\tthis.thresholdNode = thresholdNode;\r\n\t\tthis.useTextureNode = useTextureNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { textureNodeA, textureNodeB, mixTextureNode, mixRatioNode, thresholdNode, useTextureNode } = this;\r\n\r\n\t\tconst sampleTexture = ( textureNode ) => {\r\n\r\n\t\t\tconst uvNodeTexture = textureNode.uvNode || uv();\r\n\t\t\treturn textureNode.uv( uvNodeTexture );\r\n\r\n\t\t};\r\n\r\n\t\tconst transition = tslFn( () => {\r\n\r\n\t\t\tconst texelOne = sampleTexture( textureNodeA );\r\n\t\t\tconst texelTwo = sampleTexture( textureNodeB );\r\n\r\n\t\t\tconst color = vec4().toVar();\r\n\r\n\t\t\tIf( useTextureNode.equal( int( 1 ) ), () => {\r\n\r\n\t\t\t\tconst transitionTexel = sampleTexture( mixTextureNode );\r\n\t\t\t\tconst r = mixRatioNode.mul( thresholdNode.mul( 2.0 ).add( 1.0 ) ).sub( thresholdNode );\r\n\t\t\t\tconst mixf = clamp( sub( transitionTexel.r, r ).mul( float( 1.0 ).div( thresholdNode ) ), 0.0, 1.0 );\r\n\r\n\t\t\t\tcolor.assign( mix( texelOne, texelTwo, mixf ) );\r\n\r\n\t\t\t} ).else( () => {\r\n\r\n\t\t\t\tcolor.assign( mix( texelTwo, texelOne, mixRatioNode ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn color;\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = transition();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const transition = ( nodeA, nodeB, mixTexture, mixRatio = 0.0, threshold = 0.1, useTexture = 0 ) => nodeObject( new TransitionNode( nodeObject( nodeA ).toTexture(), nodeObject( nodeB ).toTexture(), nodeObject( mixTexture ).toTexture(), nodeObject( mixRatio ), nodeObject( threshold ), nodeObject( useTexture ) ) );\r\n\r\naddNodeElement( 'transition', transition );\r\n\r\nexport default TransitionNode;\r\n\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nimport { SRGBColorSpace, NoToneMapping } from '../../constants.js';\r\n\r\nclass RenderOutputNode extends TempNode {\r\n\r\n\tconstructor( colorNode, toneMapping, outputColorSpace ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\tthis.colorNode = colorNode;\r\n\t\tthis.toneMapping = toneMapping;\r\n\t\tthis.outputColorSpace = outputColorSpace;\r\n\r\n\t\tthis.isRenderOutput = true;\r\n\r\n\t}\r\n\r\n\tsetup( { context } ) {\r\n\r\n\t\tlet outputNode = this.colorNode || context.color;\r\n\r\n\t\t// tone mapping\r\n\r\n\t\tconst toneMapping = this.toneMapping !== null ? this.toneMapping : context.toneMapping;\r\n\t\tconst outputColorSpace = this.outputColorSpace !== null ? this.outputColorSpace : context.outputColorSpace;\r\n\r\n\t\tif ( toneMapping !== NoToneMapping ) {\r\n\r\n\t\t\toutputNode = outputNode.toneMapping( toneMapping );\r\n\r\n\t\t}\r\n\r\n\t\t// output color space\r\n\r\n\t\tif ( outputColorSpace === SRGBColorSpace ) {\r\n\r\n\t\t\toutputNode = outputNode.linearToColorSpace( outputColorSpace );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RenderOutputNode;\r\n\r\nexport const renderOutput = ( color, toneMapping = null, outputColorSpace = null ) => nodeObject( new RenderOutputNode( nodeObject( color ), toneMapping, outputColorSpace ) );\r\n\r\naddNodeElement( 'renderOutput', renderOutput );\r\n\r\naddNodeClass( 'RenderOutputNode', RenderOutputNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { addNodeElement, tslFn, nodeObject, vec2, vec3, float, If } from '../shadernode/ShaderNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { dot, clamp, smoothstep, sign, step, floor } from '../math/MathNode.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { output, property } from '../core/PropertyNode.js';\r\nimport PassNode from './PassNode.js';\r\nimport { mrt } from '../core/MRTNode.js';\r\nimport { normalView } from '../accessors/NormalNode.js';\r\nimport { NearestFilter } from '../../constants.js';\r\n\r\nclass PixelationNode extends TempNode {\r\n\r\n\tconstructor( textureNode, depthNode, normalNode, pixelSize, normalEdgeStrength, depthEdgeStrength ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t// Input textures\r\n\r\n\t\tthis.textureNode = textureNode;\r\n\t\tthis.depthNode = depthNode;\r\n\t\tthis.normalNode = normalNode;\r\n\r\n\t\t// Input uniforms\r\n\r\n\t\tthis.pixelSize = pixelSize;\r\n\t\tthis.normalEdgeStrength = normalEdgeStrength;\r\n\t\tthis.depthEdgeStrength = depthEdgeStrength;\r\n\r\n\t\t// Private uniforms\r\n\r\n\t\tthis._resolution = uniform( new Vector4() );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tconst map = this.textureNode.value;\r\n\r\n\t\tconst width = map.image.width;\r\n\t\tconst height = map.image.height;\r\n\r\n\t\tthis._resolution.value.set( width, height, 1 / width, 1 / height );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { textureNode, depthNode, normalNode } = this;\r\n\r\n\t\tconst uvNodeTexture = textureNode.uvNode || uv();\r\n\t\tconst uvNodeDepth = depthNode.uvNode || uv();\r\n\t\tconst uvNodeNormal = normalNode.uvNode || uv();\r\n\r\n\t\tconst sampleTexture = () => textureNode.uv( uvNodeTexture );\r\n\r\n\t\tconst sampleDepth = ( x, y ) => depthNode.uv( uvNodeDepth.add( vec2( x, y ).mul( this._resolution.zw ) ) ).r;\r\n\r\n\t\tconst sampleNormal = ( x, y ) => normalNode.uv( uvNodeNormal.add( vec2( x, y ).mul( this._resolution.zw ) ) ).rgb.normalize();\r\n\r\n\t\tconst depthEdgeIndicator = ( depth ) => {\r\n\r\n\t\t\tconst diff = property( 'float', 'diff' );\r\n\t\t\tdiff.addAssign( clamp( sampleDepth( 1, 0 ).sub( depth ) ) );\r\n\t\t\tdiff.addAssign( clamp( sampleDepth( - 1, 0 ).sub( depth ) ) );\r\n\t\t\tdiff.addAssign( clamp( sampleDepth( 0, 1 ).sub( depth ) ) );\r\n\t\t\tdiff.addAssign( clamp( sampleDepth( 0, - 1 ).sub( depth ) ) );\r\n\r\n\t\t\treturn floor( smoothstep( 0.01, 0.02, diff ).mul( 2 ) ).div( 2 );\r\n\r\n\t\t};\r\n\r\n\t\tconst neighborNormalEdgeIndicator = ( x, y, depth, normal ) => {\r\n\r\n\t\t\tconst depthDiff = sampleDepth( x, y ).sub( depth );\r\n\t\t\tconst neighborNormal = sampleNormal( x, y );\r\n\r\n\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\r\n\r\n\t\t\tconst normalEdgeBias = vec3( 1, 1, 1 ); // This should probably be a parameter.\r\n\t\t\tconst normalDiff = dot( normal.sub( neighborNormal ), normalEdgeBias );\r\n\t\t\tconst normalIndicator = clamp( smoothstep( - 0.01, 0.01, normalDiff ), 0.0, 1.0 );\r\n\r\n\t\t\t// Only the shallower pixel should detect the normal edge.\r\n\r\n\t\t\tconst depthIndicator = clamp( sign( depthDiff.mul( .25 ).add( .0025 ) ), 0.0, 1.0 );\r\n\r\n\t\t\treturn float( 1.0 ).sub( dot( normal, neighborNormal ) ).mul( depthIndicator ).mul( normalIndicator );\r\n\r\n\t\t};\r\n\r\n\t\tconst normalEdgeIndicator = ( depth, normal ) => {\r\n\r\n\t\t\tconst indicator = property( 'float', 'indicator' );\r\n\r\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( 0, - 1, depth, normal ) );\r\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( 0, 1, depth, normal ) );\r\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( - 1, 0, depth, normal ) );\r\n\t\t\tindicator.addAssign( neighborNormalEdgeIndicator( 1, 0, depth, normal ) );\r\n\r\n\t\t\treturn step( 0.1, indicator );\r\n\r\n\t\t};\r\n\r\n\t\tconst pixelation = tslFn( () => {\r\n\r\n\t\t\tconst texel = sampleTexture();\r\n\r\n\t\t\tconst depth = property( 'float', 'depth' );\r\n\t\t\tconst normal = property( 'vec3', 'normal' );\r\n\r\n\t\t\tIf( this.depthEdgeStrength.greaterThan( 0.0 ).or( this.normalEdgeStrength.greaterThan( 0.0 ) ), () => {\r\n\r\n\t\t\t\tdepth.assign( sampleDepth( 0, 0 ) );\r\n\t\t\t\tnormal.assign( sampleNormal( 0, 0 ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst dei = property( 'float', 'dei' );\r\n\r\n\t\t\tIf( this.depthEdgeStrength.greaterThan( 0.0 ), () => {\r\n\r\n\t\t\t\tdei.assign( depthEdgeIndicator( depth ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst nei = property( 'float', 'nei' );\r\n\r\n\t\t\tIf( this.normalEdgeStrength.greaterThan( 0.0 ), () => {\r\n\r\n\t\t\t\tnei.assign( normalEdgeIndicator( depth, normal ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst strength = dei.greaterThan( 0 ).cond( float( 1.0 ).sub( dei.mul( this.depthEdgeStrength ) ), nei.mul( this.normalEdgeStrength ).add( 1 ) );\r\n\r\n\t\t\treturn texel.mul( strength );\r\n\r\n\t\t} );\r\n\r\n\t\tconst outputNode = pixelation();\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst pixelation = ( node, depthNode, normalNode, pixelSize = 6, normalEdgeStrength = 0.3, depthEdgeStrength = 0.4 ) => nodeObject( new PixelationNode( nodeObject( node ).toTexture(), nodeObject( depthNode ).toTexture(), nodeObject( normalNode ).toTexture(), nodeObject( pixelSize ), nodeObject( normalEdgeStrength ), nodeObject( depthEdgeStrength ) ) );\r\n\r\naddNodeElement( 'pixelation', pixelation );\r\n\r\nclass PixelationPassNode extends PassNode {\r\n\r\n\tconstructor( scene, camera, pixelSize = 6, normalEdgeStrength = 0.3, depthEdgeStrength = 0.4 ) {\r\n\r\n\t\tsuper( 'color', scene, camera, { minFilter: NearestFilter, magFilter: NearestFilter } );\r\n\r\n\t\tthis.pixelSize = pixelSize;\r\n\t\tthis.normalEdgeStrength = normalEdgeStrength;\r\n\t\tthis.depthEdgeStrength = depthEdgeStrength;\r\n\r\n\t\tthis.isPixelationPassNode = true;\r\n\r\n\t\tthis._mrt = mrt( {\r\n\t\t\toutput: output,\r\n\t\t\tnormal: normalView\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tconst pixelSize = this.pixelSize.value ? this.pixelSize.value : this.pixelSize;\r\n\r\n\t\tconst adjustedWidth = Math.floor( width / pixelSize );\r\n\t\tconst adjustedHeight = Math.floor( height / pixelSize );\r\n\r\n\t\tsuper.setSize( adjustedWidth, adjustedHeight );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst color = super.getTextureNode( 'output' );\r\n\t\tconst depth = super.getTextureNode( 'depth' );\r\n\t\tconst normal = super.getTextureNode( 'normal' );\r\n\r\n\t\treturn pixelation( color, depth, normal, this.pixelSize, this.normalEdgeStrength, this.depthEdgeStrength );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const pixelationPass = ( scene, camera, pixelSize, normalEdgeStrength, depthEdgeStrength ) => nodeObject( new PixelationPassNode( scene, camera, pixelSize, normalEdgeStrength, depthEdgeStrength ) );\r\n\r\nexport default PixelationPassNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeArray, nodeObject, nodeObjects } from '../shadernode/ShaderNode.js';\r\n\r\nclass FunctionCallNode extends TempNode {\r\n\r\n\tconstructor( functionNode = null, parameters = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.functionNode = functionNode;\r\n\t\tthis.parameters = parameters;\r\n\r\n\t}\r\n\r\n\tsetParameters( parameters ) {\r\n\r\n\t\tthis.parameters = parameters;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetParameters() {\r\n\r\n\t\treturn this.parameters;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.functionNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst params = [];\r\n\r\n\t\tconst functionNode = this.functionNode;\r\n\r\n\t\tconst inputs = functionNode.getInputs( builder );\r\n\t\tconst parameters = this.parameters;\r\n\r\n\t\tif ( Array.isArray( parameters ) ) {\r\n\r\n\t\t\tfor ( let i = 0; i < parameters.length; i ++ ) {\r\n\r\n\t\t\t\tconst inputNode = inputs[ i ];\r\n\t\t\t\tconst node = parameters[ i ];\r\n\r\n\t\t\t\tparams.push( node.build( builder, inputNode.type ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( const inputNode of inputs ) {\r\n\r\n\t\t\t\tconst node = parameters[ inputNode.name ];\r\n\r\n\t\t\t\tif ( node !== undefined ) {\r\n\r\n\t\t\t\t\tparams.push( node.build( builder, inputNode.type ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( `FunctionCallNode: Input '${inputNode.name}' not found in FunctionNode.` );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst functionName = functionNode.build( builder, 'property' );\r\n\r\n\t\treturn `${functionName}( ${params.join( ', ' )} )`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FunctionCallNode;\r\n\r\nexport const call = ( func, ...params ) => {\r\n\r\n\tparams = params.length > 1 || ( params[ 0 ] && params[ 0 ].isNode === true ) ? nodeArray( params ) : nodeObjects( params[ 0 ] );\r\n\r\n\treturn nodeObject( new FunctionCallNode( nodeObject( func ), params ) );\r\n\r\n};\r\n\r\naddNodeElement( 'call', call );\r\n\r\naddNodeClass( 'FunctionCallNode', FunctionCallNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { arrayBufferToBase64, base64ToArrayBuffer } from '../core/NodeUtils.js';\r\nimport { addNodeElement, nodeProxy, float } from '../shadernode/ShaderNode.js';\r\n\r\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\r\n\r\nclass ScriptableValueNode extends Node {\r\n\r\n\tconstructor( value = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis._value = value;\r\n\t\tthis._cache = null;\r\n\r\n\t\tthis.inputType = null;\r\n\t\tthis.outpuType = null;\r\n\r\n\t\tthis.events = new EventDispatcher();\r\n\r\n\t\tthis.isScriptableValueNode = true;\r\n\r\n\t}\r\n\r\n\tget isScriptableOutputNode() {\r\n\r\n\t\treturn this.outputType !== null;\r\n\r\n\t}\r\n\r\n\tset value( val ) {\r\n\r\n\t\tif ( this._value === val ) return;\r\n\r\n\t\tif ( this._cache && this.inputType === 'URL' && this.value.value instanceof ArrayBuffer ) {\r\n\r\n\t\t\tURL.revokeObjectURL( this._cache );\r\n\r\n\t\t\tthis._cache = null;\r\n\r\n\t\t}\r\n\r\n\t\tthis._value = val;\r\n\r\n\t\tthis.events.dispatchEvent( { type: 'change' } );\r\n\r\n\t\tthis.refresh();\r\n\r\n\t}\r\n\r\n\tget value() {\r\n\r\n\t\treturn this._value;\r\n\r\n\t}\r\n\r\n\trefresh() {\r\n\r\n\t\tthis.events.dispatchEvent( { type: 'refresh' } );\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\tconst value = this.value;\r\n\r\n\t\tif ( value && this._cache === null && this.inputType === 'URL' && value.value instanceof ArrayBuffer ) {\r\n\r\n\t\t\tthis._cache = URL.createObjectURL( new Blob( [ value.value ] ) );\r\n\r\n\t\t} else if ( value && value.value !== null && value.value !== undefined && (\r\n\t\t\t( ( this.inputType === 'URL' || this.inputType === 'String' ) && typeof value.value === 'string' ) ||\r\n\t\t\t( this.inputType === 'Number' && typeof value.value === 'number' ) ||\r\n\t\t\t( this.inputType === 'Vector2' && value.value.isVector2 ) ||\r\n\t\t\t( this.inputType === 'Vector3' && value.value.isVector3 ) ||\r\n\t\t\t( this.inputType === 'Vector4' && value.value.isVector4 ) ||\r\n\t\t\t( this.inputType === 'Color' && value.value.isColor ) ||\r\n\t\t\t( this.inputType === 'Matrix3' && value.value.isMatrix3 ) ||\r\n\t\t\t( this.inputType === 'Matrix4' && value.value.isMatrix4 )\r\n\t\t) ) {\r\n\r\n\t\t\treturn value.value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this._cache || value;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.value && this.value.isNode ? this.value.getNodeType( builder ) : 'float';\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.value && this.value.isNode ? this.value : float();\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tif ( this.value !== null ) {\r\n\r\n\t\t\tif ( this.inputType === 'ArrayBuffer' ) {\r\n\r\n\t\t\t\tdata.value = arrayBufferToBase64( this.value );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata.value = this.value ? this.value.toJSON( data.meta ).uuid : null;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.value = null;\r\n\r\n\t\t}\r\n\r\n\t\tdata.inputType = this.inputType;\r\n\t\tdata.outputType = this.outputType;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tlet value = null;\r\n\r\n\t\tif ( data.value !== null ) {\r\n\r\n\t\t\tif ( data.inputType === 'ArrayBuffer' ) {\r\n\r\n\t\t\t\tvalue = base64ToArrayBuffer( data.value );\r\n\r\n\t\t\t} else if ( data.inputType === 'Texture' ) {\r\n\r\n\t\t\t\tvalue = data.meta.textures[ data.value ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvalue = data.meta.nodes[ data.value ] || null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.value = value;\r\n\r\n\t\tthis.inputType = data.inputType;\r\n\t\tthis.outputType = data.outputType;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ScriptableValueNode;\r\n\r\nexport const scriptableValue = nodeProxy( ScriptableValueNode );\r\n\r\naddNodeElement( 'scriptableValue', scriptableValue );\r\n\r\naddNodeClass( 'ScriptableValueNode', ScriptableValueNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { scriptableValue } from './ScriptableValueNode.js';\r\nimport { addNodeElement, nodeProxy, float } from '../shadernode/ShaderNode.js';\r\n\r\nclass Resources extends Map {\r\n\r\n\tget( key, callback = null, ...params ) {\r\n\r\n\t\tif ( this.has( key ) ) return super.get( key );\r\n\r\n\t\tif ( callback !== null ) {\r\n\r\n\t\t\tconst value = callback( ...params );\r\n\t\t\tthis.set( key, value );\r\n\t\t\treturn value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Parameters {\r\n\r\n\tconstructor( scriptableNode ) {\r\n\r\n\t\tthis.scriptableNode = scriptableNode;\r\n\r\n\t}\r\n\r\n\tget parameters() {\r\n\r\n\t\treturn this.scriptableNode.parameters;\r\n\r\n\t}\r\n\r\n\tget layout() {\r\n\r\n\t\treturn this.scriptableNode.getLayout();\r\n\r\n\t}\r\n\r\n\tgetInputLayout( id ) {\r\n\r\n\t\treturn this.scriptableNode.getInputLayout( id );\r\n\r\n\t}\r\n\r\n\tget( name ) {\r\n\r\n\t\tconst param = this.parameters[ name ];\r\n\t\tconst value = param ? param.getValue() : null;\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const global = new Resources();\r\n\r\nclass ScriptableNode extends Node {\r\n\r\n\tconstructor( codeNode = null, parameters = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.codeNode = codeNode;\r\n\t\tthis.parameters = parameters;\r\n\r\n\t\tthis._local = new Resources();\r\n\t\tthis._output = scriptableValue();\r\n\t\tthis._outputs = {};\r\n\t\tthis._source = this.source;\r\n\t\tthis._method = null;\r\n\t\tthis._object = null;\r\n\t\tthis._value = null;\r\n\t\tthis._needsOutputUpdate = true;\r\n\r\n\t\tthis.onRefresh = this.onRefresh.bind( this );\r\n\r\n\t\tthis.isScriptableNode = true;\r\n\r\n\t}\r\n\r\n\tget source() {\r\n\r\n\t\treturn this.codeNode ? this.codeNode.code : '';\r\n\r\n\t}\r\n\r\n\tsetLocal( name, value ) {\r\n\r\n\t\treturn this._local.set( name, value );\r\n\r\n\t}\r\n\r\n\tgetLocal( name ) {\r\n\r\n\t\treturn this._local.get( name );\r\n\r\n\t}\r\n\r\n\tonRefresh() {\r\n\r\n\t\tthis._refresh();\r\n\r\n\t}\r\n\r\n\tgetInputLayout( id ) {\r\n\r\n\t\tfor ( const element of this.getLayout() ) {\r\n\r\n\t\t\tif ( element.inputType && ( element.id === id || element.name === id ) ) {\r\n\r\n\t\t\t\treturn element;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetOutputLayout( id ) {\r\n\r\n\t\tfor ( const element of this.getLayout() ) {\r\n\r\n\t\t\tif ( element.outputType && ( element.id === id || element.name === id ) ) {\r\n\r\n\t\t\t\treturn element;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetOutput( name, value ) {\r\n\r\n\t\tconst outputs = this._outputs;\r\n\r\n\t\tif ( outputs[ name ] === undefined ) {\r\n\r\n\t\t\toutputs[ name ] = scriptableValue( value );\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutputs[ name ].value = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetOutput( name ) {\r\n\r\n\t\treturn this._outputs[ name ];\r\n\r\n\t}\r\n\r\n\tgetParameter( name ) {\r\n\r\n\t\treturn this.parameters[ name ];\r\n\r\n\t}\r\n\r\n\tsetParameter( name, value ) {\r\n\r\n\t\tconst parameters = this.parameters;\r\n\r\n\t\tif ( value && value.isScriptableNode ) {\r\n\r\n\t\t\tthis.deleteParameter( name );\r\n\r\n\t\t\tparameters[ name ] = value;\r\n\t\t\tparameters[ name ].getDefaultOutput().events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t} else if ( value && value.isScriptableValueNode ) {\r\n\r\n\t\t\tthis.deleteParameter( name );\r\n\r\n\t\t\tparameters[ name ] = value;\r\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t} else if ( parameters[ name ] === undefined ) {\r\n\r\n\t\t\tparameters[ name ] = scriptableValue( value );\r\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tparameters[ name ].value = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetValue() {\r\n\r\n\t\treturn this.getDefaultOutput().getValue();\r\n\r\n\t}\r\n\r\n\tdeleteParameter( name ) {\r\n\r\n\t\tlet valueNode = this.parameters[ name ];\r\n\r\n\t\tif ( valueNode ) {\r\n\r\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\r\n\r\n\t\t\tvalueNode.events.removeEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclearParameters() {\r\n\r\n\t\tfor ( const name of Object.keys( this.parameters ) ) {\r\n\r\n\t\t\tthis.deleteParameter( name );\r\n\r\n\t\t}\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcall( name, ...params ) {\r\n\r\n\t\tconst object = this.getObject();\r\n\t\tconst method = object[ name ];\r\n\r\n\t\tif ( typeof method === 'function' ) {\r\n\r\n\t\t\treturn method( ...params );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tasync callAsync( name, ...params ) {\r\n\r\n\t\tconst object = this.getObject();\r\n\t\tconst method = object[ name ];\r\n\r\n\t\tif ( typeof method === 'function' ) {\r\n\r\n\t\t\treturn method.constructor.name === 'AsyncFunction' ? await method( ...params ) : method( ...params );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.getDefaultOutputNode().getNodeType( builder );\r\n\r\n\t}\r\n\r\n\trefresh( output = null ) {\r\n\r\n\t\tif ( output !== null ) {\r\n\r\n\t\t\tthis.getOutput( output ).refresh();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._refresh();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetObject() {\r\n\r\n\t\tif ( this.needsUpdate ) this.dispose();\r\n\t\tif ( this._object !== null ) return this._object;\r\n\r\n\t\t//\r\n\r\n\t\tconst refresh = () => this.refresh();\r\n\t\tconst setOutput = ( id, value ) => this.setOutput( id, value );\r\n\r\n\t\tconst parameters = new Parameters( this );\r\n\r\n\t\tconst THREE = global.get( 'THREE' );\r\n\t\tconst TSL = global.get( 'TSL' );\r\n\r\n\t\tconst method = this.getMethod( this.codeNode );\r\n\t\tconst params = [ parameters, this._local, global, refresh, setOutput, THREE, TSL ];\r\n\r\n\t\tthis._object = method( ...params );\r\n\r\n\t\tconst layout = this._object.layout;\r\n\r\n\t\tif ( layout ) {\r\n\r\n\t\t\tif ( layout.cache === false ) {\r\n\r\n\t\t\t\tthis._local.clear();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// default output\r\n\t\t\tthis._output.outputType = layout.outputType || null;\r\n\r\n\t\t\tif ( Array.isArray( layout.elements ) ) {\r\n\r\n\t\t\t\tfor ( const element of layout.elements ) {\r\n\r\n\t\t\t\t\tconst id = element.id || element.name;\r\n\r\n\t\t\t\t\tif ( element.inputType ) {\r\n\r\n\t\t\t\t\t\tif ( this.getParameter( id ) === undefined ) this.setParameter( id, null );\r\n\r\n\t\t\t\t\t\tthis.getParameter( id ).inputType = element.inputType;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( element.outputType ) {\r\n\r\n\t\t\t\t\t\tif ( this.getOutput( id ) === undefined ) this.setOutput( id, null );\r\n\r\n\t\t\t\t\t\tthis.getOutput( id ).outputType = element.outputType;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this._object;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tfor ( const name in this.parameters ) {\r\n\r\n\t\t\tlet valueNode = this.parameters[ name ];\r\n\r\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\r\n\r\n\t\t\tvalueNode.events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetLayout() {\r\n\r\n\t\treturn this.getObject().layout;\r\n\r\n\t}\r\n\r\n\tgetDefaultOutputNode() {\r\n\r\n\t\tconst output = this.getDefaultOutput().value;\r\n\r\n\t\tif ( output && output.isNode ) {\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t}\r\n\r\n\t\treturn float();\r\n\r\n\t}\r\n\r\n\tgetDefaultOutput()\t{\r\n\r\n\t\treturn this._exec()._output;\r\n\r\n\t}\r\n\r\n\tgetMethod() {\r\n\r\n\t\tif ( this.needsUpdate ) this.dispose();\r\n\t\tif ( this._method !== null ) return this._method;\r\n\r\n\t\t//\r\n\r\n\t\tconst parametersProps = [ 'parameters', 'local', 'global', 'refresh', 'setOutput', 'THREE', 'TSL' ];\r\n\t\tconst interfaceProps = [ 'layout', 'init', 'main', 'dispose' ];\r\n\r\n\t\tconst properties = interfaceProps.join( ', ' );\r\n\t\tconst declarations = 'var ' + properties + '; var output = {};\\n';\r\n\t\tconst returns = '\\nreturn { ...output, ' + properties + ' };';\r\n\r\n\t\tconst code = declarations + this.codeNode.code + returns;\r\n\r\n\t\t//\r\n\r\n\t\tthis._method = new Function( ...parametersProps, code );\r\n\r\n\t\treturn this._method;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tif ( this._method === null ) return;\r\n\r\n\t\tif ( this._object && typeof this._object.dispose === 'function' ) {\r\n\r\n\t\t\tthis._object.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis._method = null;\r\n\t\tthis._object = null;\r\n\t\tthis._source = null;\r\n\t\tthis._value = null;\r\n\t\tthis._needsOutputUpdate = true;\r\n\t\tthis._output.value = null;\r\n\t\tthis._outputs = {};\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.getDefaultOutputNode();\r\n\r\n\t}\r\n\r\n\tgetCacheKey( force ) {\r\n\r\n\t\tconst cacheKey = [ this.source, this.getDefaultOutputNode().getCacheKey( force ) ];\r\n\r\n\t\tfor ( const param in this.parameters ) {\r\n\r\n\t\t\tcacheKey.push( this.parameters[ param ].getCacheKey( force ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn cacheKey.join( ',' );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.dispose();\r\n\r\n\t}\r\n\r\n\tget needsUpdate() {\r\n\r\n\t\treturn this.source !== this._source;\r\n\r\n\t}\r\n\r\n\t_exec()\t{\r\n\r\n\t\tif ( this.codeNode === null ) return this;\r\n\r\n\t\tif ( this._needsOutputUpdate === true ) {\r\n\r\n\t\t\tthis._value = this.call( 'main' );\r\n\r\n\t\t\tthis._needsOutputUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tthis._output.value = this._value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_refresh() {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t\tthis._exec();\r\n\r\n\t\tthis._output.refresh();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ScriptableNode;\r\n\r\nexport const scriptable = nodeProxy( ScriptableNode );\r\n\r\naddNodeElement( 'scriptable', scriptable );\r\n\r\naddNodeClass( 'ScriptableNode', ScriptableNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { positionView } from '../accessors/PositionNode.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass FogNode extends Node {\r\n\r\n\tconstructor( colorNode, factorNode ) {\r\n\r\n\t\tsuper( 'float' );\r\n\r\n\t\tthis.isFogNode = true;\r\n\r\n\t\tthis.colorNode = colorNode;\r\n\t\tthis.factorNode = factorNode;\r\n\r\n\t}\r\n\r\n\tgetViewZNode( builder ) {\r\n\r\n\t\tlet viewZ;\r\n\r\n\t\tconst getViewZ = builder.context.getViewZ;\r\n\r\n\t\tif ( getViewZ !== undefined ) {\r\n\r\n\t\t\tviewZ = getViewZ( this );\r\n\r\n\t\t}\r\n\r\n\t\treturn ( viewZ || positionView.z ).negate();\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.factorNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FogNode;\r\n\r\nexport const fog = nodeProxy( FogNode );\r\n\r\naddNodeElement( 'fog', fog );\r\n\r\naddNodeClass( 'FogNode', FogNode );\r\n", "import FogNode from './FogNode.js';\r\nimport { smoothstep } from '../math/MathNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass FogRangeNode extends FogNode {\r\n\r\n\tconstructor( colorNode, nearNode, farNode ) {\r\n\r\n\t\tsuper( colorNode );\r\n\r\n\t\tthis.isFogRangeNode = true;\r\n\r\n\t\tthis.nearNode = nearNode;\r\n\t\tthis.farNode = farNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst viewZ = this.getViewZNode( builder );\r\n\r\n\t\treturn smoothstep( this.nearNode, this.farNode, viewZ );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FogRangeNode;\r\n\r\nexport const rangeFog = nodeProxy( FogRangeNode );\r\n\r\naddNodeElement( 'rangeFog', rangeFog );\r\n\r\naddNodeClass( 'FogRangeNode', FogRangeNode );\r\n", "import FogNode from './FogNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nclass FogExp2Node extends FogNode {\r\n\r\n\tconstructor( colorNode, densityNode ) {\r\n\r\n\t\tsuper( colorNode );\r\n\r\n\t\tthis.isFogExp2Node = true;\r\n\r\n\t\tthis.densityNode = densityNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst viewZ = this.getViewZNode( builder );\r\n\t\tconst density = this.densityNode;\r\n\r\n\t\treturn density.mul( density, viewZ, viewZ ).negate().exp().oneMinus();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FogExp2Node;\r\n\r\nexport const densityFog = nodeProxy( FogExp2Node );\r\n\r\naddNodeElement( 'densityFog', densityFog );\r\n\r\naddNodeClass( 'FogExp2Node', FogExp2Node );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { getValueType } from '../core/NodeUtils.js';\r\nimport { buffer } from '../accessors/BufferNode.js';\r\nimport { instancedBufferAttribute } from '../accessors/BufferAttributeNode.js';\r\nimport { instanceIndex } from '../core/IndexNode.js';\r\nimport { nodeProxy, float } from '../shadernode/ShaderNode.js';\r\n\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { MathUtils } from '../../math/MathUtils.js';\r\nimport { InstancedBufferAttribute } from '../../core/InstancedBufferAttribute.js';\r\n\r\nlet min = null;\r\nlet max = null;\r\n\r\nclass RangeNode extends Node {\r\n\r\n\tconstructor( minNode = float(), maxNode = float() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.minNode = minNode;\r\n\t\tthis.maxNode = maxNode;\r\n\r\n\t}\r\n\r\n\tgetVectorLength( builder ) {\r\n\r\n\t\tconst minLength = builder.getTypeLength( getValueType( this.minNode.value ) );\r\n\t\tconst maxLength = builder.getTypeLength( getValueType( this.maxNode.value ) );\r\n\r\n\t\treturn minLength > maxLength ? minLength : maxLength;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn builder.object.count > 1 ? builder.getTypeFromLength( this.getVectorLength( builder ) ) : 'float';\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst object = builder.object;\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( object.count > 1 ) {\r\n\r\n\t\t\tconst minValue = this.minNode.value;\r\n\t\t\tconst maxValue = this.maxNode.value;\r\n\r\n\t\t\tconst minLength = builder.getTypeLength( getValueType( minValue ) );\r\n\t\t\tconst maxLength = builder.getTypeLength( getValueType( maxValue ) );\r\n\r\n\t\t\tmin = min || new Vector4();\r\n\t\t\tmax = max || new Vector4();\r\n\r\n\t\t\tmin.setScalar( 0 );\r\n\t\t\tmax.setScalar( 0 );\r\n\r\n\t\t\tif ( minLength === 1 ) min.setScalar( minValue );\r\n\t\t\telse if ( minValue.isColor ) min.set( minValue.r, minValue.g, minValue.b );\r\n\t\t\telse min.set( minValue.x, minValue.y, minValue.z || 0, minValue.w || 0 );\r\n\r\n\t\t\tif ( maxLength === 1 ) max.setScalar( maxValue );\r\n\t\t\telse if ( maxValue.isColor ) max.set( maxValue.r, maxValue.g, maxValue.b );\r\n\t\t\telse max.set( maxValue.x, maxValue.y, maxValue.z || 0, maxValue.w || 0 );\r\n\r\n\t\t\tconst stride = 4;\r\n\r\n\t\t\tconst length = stride * object.count;\r\n\t\t\tconst array = new Float32Array( length );\r\n\r\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i % stride;\r\n\r\n\t\t\t\tconst minElementValue = min.getComponent( index );\r\n\t\t\t\tconst maxElementValue = max.getComponent( index );\r\n\r\n\t\t\t\tarray[ i ] = MathUtils.lerp( minElementValue, maxElementValue, Math.random() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\t\tif ( object.count <= 4096 ) {\r\n\r\n\t\t\t\toutput = buffer( array, 'vec4', object.count ).element( instanceIndex ).convert( nodeType );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// TODO: Improve anonymous buffer attribute creation removing this part\r\n\t\t\t\tconst bufferAttribute = new InstancedBufferAttribute( array, 4 );\r\n\t\t\t\tbuilder.geometry.setAttribute( '__range' + this.id, bufferAttribute );\r\n\r\n\t\t\t\toutput = instancedBufferAttribute( bufferAttribute ).convert( nodeType );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutput = float( 0 );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RangeNode;\r\n\r\nexport const range = nodeProxy( RangeNode );\r\n\r\naddNodeClass( 'RangeNode', RangeNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { addNodeElement, nodeObject } from '../shadernode/ShaderNode.js';\r\n\r\nclass ComputeNode extends Node {\r\n\r\n\tconstructor( computeNode, count, workgroupSize = [ 64 ] ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\tthis.isComputeNode = true;\r\n\r\n\t\tthis.computeNode = computeNode;\r\n\r\n\t\tthis.count = count;\r\n\t\tthis.workgroupSize = workgroupSize;\r\n\t\tthis.dispatchCount = 0;\r\n\r\n\t\tthis.version = 1;\r\n\t\tthis.updateBeforeType = NodeUpdateType.OBJECT;\r\n\r\n\t\tthis.updateDispatchCount();\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\tupdateDispatchCount() {\r\n\r\n\t\tconst { count, workgroupSize } = this;\r\n\r\n\t\tlet size = workgroupSize[ 0 ];\r\n\r\n\t\tfor ( let i = 1; i < workgroupSize.length; i ++ )\r\n\t\t\tsize *= workgroupSize[ i ];\r\n\r\n\t\tthis.dispatchCount = Math.ceil( count / size );\r\n\r\n\t}\r\n\r\n\tonInit() { }\r\n\r\n\tupdateBefore( { renderer } ) {\r\n\r\n\t\trenderer.compute( this );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { shaderStage } = builder;\r\n\r\n\t\tif ( shaderStage === 'compute' ) {\r\n\r\n\t\t\tconst snippet = this.computeNode.build( builder, 'void' );\r\n\r\n\t\t\tif ( snippet !== '' ) {\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( snippet );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ComputeNode;\r\n\r\nexport const compute = ( node, count, workgroupSize ) => nodeObject( new ComputeNode( nodeObject( node ), count, workgroupSize ) );\r\n\r\naddNodeElement( 'compute', compute );\r\n\r\naddNodeClass( 'ComputeNode', ComputeNode );\r\n", "import Node, { addNodeClass } from '../core/Node.js';\r\nimport { nodeProxy } from '../shadernode/ShaderNode.js';\r\nimport { objectPosition } from '../accessors/Object3DNode.js';\r\nimport { cameraViewMatrix } from '../accessors/CameraNode.js';\r\n\r\nclass LightNode extends Node {\r\n\r\n\tconstructor( scope = LightNode.TARGET_DIRECTION, light = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\t\tthis.light = light;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { scope, light } = this;\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( scope === LightNode.TARGET_DIRECTION ) {\r\n\r\n\t\t\toutput = cameraViewMatrix.transformDirection( objectPosition( light ).sub( objectPosition( light.target ) ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.scope = this.scope;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.scope = data.scope;\r\n\r\n\t}\r\n\r\n}\r\n\r\nLightNode.TARGET_DIRECTION = 'targetDirection';\r\n\r\nexport default LightNode;\r\n\r\nexport const lightTargetDirection = nodeProxy( LightNode, LightNode.TARGET_DIRECTION );\r\n\r\naddNodeClass( 'LightNode', LightNode );\r\n", "import { tslFn } from '../shadernode/ShaderNode.js';\r\n\r\nexport const getDistanceAttenuation = tslFn( ( inputs ) => {\r\n\r\n\tconst { lightDistance, cutoffDistance, decayExponent } = inputs;\r\n\r\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\r\n\t// page 32, equation 26: E[window1]\r\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\tconst distanceFalloff = lightDistance.pow( decayExponent ).max( 0.01 ).reciprocal();\r\n\r\n\treturn cutoffDistance.greaterThan( 0 ).cond(\r\n\t\tdistanceFalloff.mul( lightDistance.div( cutoffDistance ).pow4().oneMinus().clamp().pow2() ),\r\n\t\tdistanceFalloff\r\n\t);\r\n\r\n} ); // validated\r\n", "import { Object3D } from '../core/Object3D.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass Light extends Object3D {\r\n\r\n\tconstructor( color, intensity = 1 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLight = true;\r\n\r\n\t\tthis.type = 'Light';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.intensity = intensity;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\t// Empty here in base class; some subclasses override.\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.intensity = source.intensity;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.color = this.color.getHex();\r\n\t\tdata.object.intensity = this.intensity;\r\n\r\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\r\n\r\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\r\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\r\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\r\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\r\n\r\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\r\n\t\tif ( this.target !== undefined ) data.object.target = this.target.uuid;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Light };\r\n", "import { WebGLCoordinateSystem, WebGPUCoordinateSystem } from '../constants.js';\r\nimport { Vector3 } from './Vector3.js';\r\nimport { Sphere } from './Sphere.js';\r\nimport { Plane } from './Plane.js';\r\n\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nclass Frustum {\r\n\r\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\r\n\r\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\r\n\r\n\t}\r\n\r\n\tset( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tplanes[ 0 ].copy( p0 );\r\n\t\tplanes[ 1 ].copy( p1 );\r\n\t\tplanes[ 2 ].copy( p2 );\r\n\t\tplanes[ 3 ].copy( p3 );\r\n\t\tplanes[ 4 ].copy( p4 );\r\n\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( frustum ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\t\tconst me = m.elements;\r\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\r\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\tplanes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tintersectsObject( object ) {\r\n\r\n\t\tif ( object.boundingSphere !== undefined ) {\r\n\r\n\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\r\n\r\n\t\t\t_sphere.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.intersectsSphere( _sphere );\r\n\r\n\t}\r\n\r\n\tintersectsSprite( sprite ) {\r\n\r\n\t\t_sphere.center.set( 0, 0, 0 );\r\n\t\t_sphere.radius = 0.7071067811865476;\r\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\treturn this.intersectsSphere( _sphere );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\t\tconst center = sphere.center;\r\n\t\tconst negRadius = - sphere.radius;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst plane = planes[ i ];\r\n\r\n\t\t\t// corner at max distance\r\n\r\n\t\t\t_vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t_vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t_vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\tif ( plane.distanceToPoint( _vector ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\tconst planes = this.planes;\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Frustum };\r\n", "import { Matrix4 } from '../math/Matrix4.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\nimport { Frustum } from '../math/Frustum.js';\r\n\r\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\r\nconst _lookTarget = /*@__PURE__*/ new Vector3();\r\n\r\nclass LightShadow {\r\n\r\n\tconstructor( camera ) {\r\n\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.intensity = 1;\r\n\r\n\t\tthis.bias = 0;\r\n\t\tthis.normalBias = 0;\r\n\t\tthis.radius = 1;\r\n\t\tthis.blurSamples = 8;\r\n\r\n\t\tthis.mapSize = new Vector2( 512, 512 );\r\n\r\n\t\tthis.map = null;\r\n\t\tthis.mapPass = null;\r\n\t\tthis.matrix = new Matrix4();\r\n\r\n\t\tthis.autoUpdate = true;\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tthis._frustum = new Frustum();\r\n\t\tthis._frameExtents = new Vector2( 1, 1 );\r\n\r\n\t\tthis._viewportCount = 1;\r\n\r\n\t\tthis._viewports = [\r\n\r\n\t\t\tnew Vector4( 0, 0, 1, 1 )\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tgetViewportCount() {\r\n\r\n\t\treturn this._viewportCount;\r\n\r\n\t}\r\n\r\n\tgetFrustum() {\r\n\r\n\t\treturn this._frustum;\r\n\r\n\t}\r\n\r\n\tupdateMatrices( light ) {\r\n\r\n\t\tconst shadowCamera = this.camera;\r\n\t\tconst shadowMatrix = this.matrix;\r\n\r\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\tshadowCamera.position.copy( _lightPositionWorld );\r\n\r\n\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\tshadowCamera.lookAt( _lookTarget );\r\n\t\tshadowCamera.updateMatrixWorld();\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\r\n\r\n\t\tshadowMatrix.set(\r\n\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t);\r\n\r\n\t\tshadowMatrix.multiply( _projScreenMatrix );\r\n\r\n\t}\r\n\r\n\tgetViewport( viewportIndex ) {\r\n\r\n\t\treturn this._viewports[ viewportIndex ];\r\n\r\n\t}\r\n\r\n\tgetFrameExtents() {\r\n\r\n\t\treturn this._frameExtents;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tif ( this.map ) {\r\n\r\n\t\t\tthis.map.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.mapPass ) {\r\n\r\n\t\t\tthis.mapPass.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.camera = source.camera.clone();\r\n\r\n\t\tthis.intensity = source.intensity;\r\n\r\n\t\tthis.bias = source.bias;\r\n\t\tthis.radius = source.radius;\r\n\r\n\t\tthis.mapSize.copy( source.mapSize );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst object = {};\r\n\r\n\t\tif ( this.intensity !== 1 ) object.intensity = this.intensity;\r\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\r\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\r\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\r\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\r\n\r\n\t\tobject.camera = this.camera.toJSON( false ).object;\r\n\t\tdelete object.camera.matrix;\r\n\r\n\t\treturn object;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LightShadow };\r\n", "import { LightShadow } from './LightShadow.js';\r\nimport { PerspectiveCamera } from '../cameras/PerspectiveCamera.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\n\r\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\r\nconst _lookTarget = /*@__PURE__*/ new Vector3();\r\n\r\nclass PointLightShadow extends LightShadow {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\r\n\r\n\t\tthis.isPointLightShadow = true;\r\n\r\n\t\tthis._frameExtents = new Vector2( 4, 2 );\r\n\r\n\t\tthis._viewportCount = 6;\r\n\r\n\t\tthis._viewports = [\r\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t// following orientation:\r\n\t\t\t//\r\n\t\t\t//  xzXZ\r\n\t\t\t//   y Y\r\n\t\t\t//\r\n\t\t\t// X - Positive x direction\r\n\t\t\t// x - Negative x direction\r\n\t\t\t// Y - Positive y direction\r\n\t\t\t// y - Negative y direction\r\n\t\t\t// Z - Positive z direction\r\n\t\t\t// z - Negative z direction\r\n\r\n\t\t\t// positive X\r\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\r\n\t\t\t// negative X\r\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\r\n\t\t\t// positive Z\r\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\r\n\t\t\t// negative Z\r\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\r\n\t\t\t// positive Y\r\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\r\n\t\t\t// negative Y\r\n\t\t\tnew Vector4( 1, 0, 1, 1 )\r\n\t\t];\r\n\r\n\t\tthis._cubeDirections = [\r\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\r\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\r\n\t\t];\r\n\r\n\t\tthis._cubeUps = [\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tupdateMatrices( light, viewportIndex = 0 ) {\r\n\r\n\t\tconst camera = this.camera;\r\n\t\tconst shadowMatrix = this.matrix;\r\n\r\n\t\tconst far = light.distance || camera.far;\r\n\r\n\t\tif ( far !== camera.far ) {\r\n\r\n\t\t\tcamera.far = far;\r\n\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t}\r\n\r\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\tcamera.position.copy( _lightPositionWorld );\r\n\r\n\t\t_lookTarget.copy( camera.position );\r\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\r\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\r\n\t\tcamera.lookAt( _lookTarget );\r\n\t\tcamera.updateMatrixWorld();\r\n\r\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PointLightShadow };\r\n", "import { Light } from './Light.js';\r\nimport { PointLightShadow } from './PointLightShadow.js';\r\n\r\nclass PointLight extends Light {\r\n\r\n\tconstructor( color, intensity, distance = 0, decay = 2 ) {\r\n\r\n\t\tsuper( color, intensity );\r\n\r\n\t\tthis.isPointLight = true;\r\n\r\n\t\tthis.type = 'PointLight';\r\n\r\n\t\tthis.distance = distance;\r\n\t\tthis.decay = decay;\r\n\r\n\t\tthis.shadow = new PointLightShadow();\r\n\r\n\t}\r\n\r\n\tget power() {\r\n\r\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\r\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\r\n\t\treturn this.intensity * 4 * Math.PI;\r\n\r\n\t}\r\n\r\n\tset power( power ) {\r\n\r\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\r\n\t\tthis.intensity = power / ( 4 * Math.PI );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.shadow.dispose();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.decay = source.decay;\r\n\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PointLight };\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { addLightNode } from './LightsNode.js';\r\nimport { getDistanceAttenuation } from './LightUtils.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { objectViewPosition } from '../accessors/Object3DNode.js';\r\nimport { positionView } from '../accessors/PositionNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nimport { PointLight } from '../../lights/PointLight.js';\r\n\r\nclass PointLightNode extends AnalyticLightNode {\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t\tthis.cutoffDistanceNode = uniform( 0 );\r\n\t\tthis.decayExponentNode = uniform( 0 );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t\tthis.cutoffDistanceNode.value = light.distance;\r\n\t\tthis.decayExponentNode.value = light.decay;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;\r\n\r\n\t\tconst lightingModel = builder.context.lightingModel;\r\n\r\n\t\tconst lVector = objectViewPosition( light ).sub( positionView ); // @TODO: Add it into LightNode\r\n\r\n\t\tconst lightDirection = lVector.normalize();\r\n\t\tconst lightDistance = lVector.length();\r\n\r\n\t\tconst lightAttenuation = getDistanceAttenuation( {\r\n\t\t\tlightDistance,\r\n\t\t\tcutoffDistance: cutoffDistanceNode,\r\n\t\t\tdecayExponent: decayExponentNode\r\n\t\t} );\r\n\r\n\t\tconst lightColor = colorNode.mul( lightAttenuation );\r\n\r\n\t\tconst reflectedLight = builder.context.reflectedLight;\r\n\r\n\t\tlightingModel.direct( {\r\n\t\t\tlightDirection,\r\n\t\t\tlightColor,\r\n\t\t\treflectedLight\r\n\t\t}, builder.stack, builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PointLightNode;\r\n\r\naddNodeClass( 'PointLightNode', PointLightNode );\r\n\r\naddLightNode( PointLight, PointLightNode );\r\n", "import { LightShadow } from './LightShadow.js';\r\nimport { OrthographicCamera } from '../cameras/OrthographicCamera.js';\r\n\r\nclass DirectionalLightShadow extends LightShadow {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\r\n\r\n\t\tthis.isDirectionalLightShadow = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DirectionalLightShadow };\r\n", "import { Light } from './Light.js';\r\nimport { DirectionalLightShadow } from './DirectionalLightShadow.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\nclass DirectionalLight extends Light {\r\n\r\n\tconstructor( color, intensity ) {\r\n\r\n\t\tsuper( color, intensity );\r\n\r\n\t\tthis.isDirectionalLight = true;\r\n\r\n\t\tthis.type = 'DirectionalLight';\r\n\r\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tthis.shadow = new DirectionalLightShadow();\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.shadow.dispose();\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.target = source.target.clone();\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DirectionalLight };\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { lightTargetDirection } from './LightNode.js';\r\nimport { addLightNode } from './LightsNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nimport { DirectionalLight } from '../../lights/DirectionalLight.js';\r\n\r\nclass DirectionalLightNode extends AnalyticLightNode {\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst lightingModel = builder.context.lightingModel;\r\n\r\n\t\tconst lightColor = this.colorNode;\r\n\t\tconst lightDirection = lightTargetDirection( this.light );\r\n\t\tconst reflectedLight = builder.context.reflectedLight;\r\n\r\n\t\tlightingModel.direct( {\r\n\t\t\tlightDirection,\r\n\t\t\tlightColor,\r\n\t\t\treflectedLight\r\n\t\t}, builder.stack, builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default DirectionalLightNode;\r\n\r\naddNodeClass( 'DirectionalLightNode', DirectionalLightNode );\r\n\r\naddLightNode( DirectionalLight, DirectionalLightNode );\r\n", "import { Light } from './Light.js';\r\n\r\nclass RectAreaLight extends Light {\r\n\r\n\tconstructor( color, intensity, width = 10, height = 10 ) {\r\n\r\n\t\tsuper( color, intensity );\r\n\r\n\t\tthis.isRectAreaLight = true;\r\n\r\n\t\tthis.type = 'RectAreaLight';\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t}\r\n\r\n\tget power() {\r\n\r\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\r\n\t\treturn this.intensity * this.width * this.height * Math.PI;\r\n\r\n\t}\r\n\r\n\tset power( power ) {\r\n\r\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\r\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.width = source.width;\r\n\t\tthis.height = source.height;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.width = this.width;\r\n\t\tdata.object.height = this.height;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RectAreaLight };\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { addLightNode } from './LightsNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { objectViewPosition } from '../accessors/Object3DNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nimport { RectAreaLight } from '../../lights/RectAreaLight.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\n\r\nconst _matrix41 = /*@__PURE__*/ new Matrix4();\r\nconst _matrix42 = /*@__PURE__*/ new Matrix4();\r\n\r\nlet ltcLib = null;\r\n\r\nclass RectAreaLightNode extends AnalyticLightNode {\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t\tthis.halfHeight = uniform( new Vector3() );\r\n\t\tthis.halfWidth = uniform( new Vector3() );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tconst viewMatrix = frame.camera.matrixWorldInverse;\r\n\r\n\t\t_matrix42.identity();\r\n\t\t_matrix41.copy( light.matrixWorld );\r\n\t\t_matrix41.premultiply( viewMatrix );\r\n\t\t_matrix42.extractRotation( _matrix41 );\r\n\r\n\t\tthis.halfWidth.value.set( light.width * 0.5, 0.0, 0.0 );\r\n\t\tthis.halfHeight.value.set( 0.0, light.height * 0.5, 0.0 );\r\n\r\n\t\tthis.halfWidth.value.applyMatrix4( _matrix42 );\r\n\t\tthis.halfHeight.value.applyMatrix4( _matrix42 );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tlet ltc_1, ltc_2;\r\n\r\n\t\tif ( builder.isAvailable( 'float32Filterable' ) ) {\r\n\r\n\t\t\tltc_1 = texture( ltcLib.LTC_FLOAT_1 );\r\n\t\t\tltc_2 = texture( ltcLib.LTC_FLOAT_2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tltc_1 = texture( ltcLib.LTC_HALF_1 );\r\n\t\t\tltc_2 = texture( ltcLib.LTC_HALF_2 );\r\n\r\n\t\t}\r\n\r\n\t\tconst { colorNode, light } = this;\r\n\t\tconst lightingModel = builder.context.lightingModel;\r\n\r\n\t\tconst lightPosition = objectViewPosition( light );\r\n\t\tconst reflectedLight = builder.context.reflectedLight;\r\n\r\n\t\tlightingModel.directRectArea( {\r\n\t\t\tlightColor: colorNode,\r\n\t\t\tlightPosition,\r\n\t\t\thalfWidth: this.halfWidth,\r\n\t\t\thalfHeight: this.halfHeight,\r\n\t\t\treflectedLight,\r\n\t\t\tltc_1,\r\n\t\t\tltc_2\r\n\t\t}, builder.stack, builder );\r\n\r\n\t}\r\n\r\n\tstatic setLTC( ltc ) {\r\n\r\n\t\tltcLib = ltc;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RectAreaLightNode;\r\n\r\naddNodeClass( 'RectAreaLightNode', RectAreaLightNode );\r\n\r\naddLightNode( RectAreaLight, RectAreaLightNode );\r\n", "import { LightShadow } from './LightShadow.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { PerspectiveCamera } from '../cameras/PerspectiveCamera.js';\r\n\r\nclass SpotLightShadow extends LightShadow {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\r\n\r\n\t\tthis.isSpotLightShadow = true;\r\n\r\n\t\tthis.focus = 1;\r\n\r\n\t}\r\n\r\n\tupdateMatrices( light ) {\r\n\r\n\t\tconst camera = this.camera;\r\n\r\n\t\tconst fov = MathUtils.RAD2DEG * 2 * light.angle * this.focus;\r\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\r\n\t\tconst far = light.distance || camera.far;\r\n\r\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\r\n\r\n\t\t\tcamera.fov = fov;\r\n\t\t\tcamera.aspect = aspect;\r\n\t\t\tcamera.far = far;\r\n\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t}\r\n\r\n\t\tsuper.updateMatrices( light );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.focus = source.focus;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SpotLightShadow };\r\n", "import { Light } from './Light.js';\r\nimport { SpotLightShadow } from './SpotLightShadow.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\nclass SpotLight extends Light {\r\n\r\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2 ) {\r\n\r\n\t\tsuper( color, intensity );\r\n\r\n\t\tthis.isSpotLight = true;\r\n\r\n\t\tthis.type = 'SpotLight';\r\n\r\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tthis.distance = distance;\r\n\t\tthis.angle = angle;\r\n\t\tthis.penumbra = penumbra;\r\n\t\tthis.decay = decay;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.shadow = new SpotLightShadow();\r\n\r\n\t}\r\n\r\n\tget power() {\r\n\r\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\r\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\r\n\t\treturn this.intensity * Math.PI;\r\n\r\n\t}\r\n\r\n\tset power( power ) {\r\n\r\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\r\n\t\tthis.intensity = power / Math.PI;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.shadow.dispose();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.angle = source.angle;\r\n\t\tthis.penumbra = source.penumbra;\r\n\t\tthis.decay = source.decay;\r\n\r\n\t\tthis.target = source.target.clone();\r\n\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SpotLight };\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { lightTargetDirection } from './LightNode.js';\r\nimport { addLightNode } from './LightsNode.js';\r\nimport { getDistanceAttenuation } from './LightUtils.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { smoothstep } from '../math/MathNode.js';\r\nimport { objectViewPosition } from '../accessors/Object3DNode.js';\r\nimport { positionView } from '../accessors/PositionNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nimport { SpotLight } from '../../lights/SpotLight.js';\r\n\r\nclass SpotLightNode extends AnalyticLightNode {\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t\tthis.coneCosNode = uniform( 0 );\r\n\t\tthis.penumbraCosNode = uniform( 0 );\r\n\r\n\t\tthis.cutoffDistanceNode = uniform( 0 );\r\n\t\tthis.decayExponentNode = uniform( 0 );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tthis.coneCosNode.value = Math.cos( light.angle );\r\n\t\tthis.penumbraCosNode.value = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\r\n\t\tthis.cutoffDistanceNode.value = light.distance;\r\n\t\tthis.decayExponentNode.value = light.decay;\r\n\r\n\t}\r\n\r\n\tgetSpotAttenuation( angleCosine ) {\r\n\r\n\t\tconst { coneCosNode, penumbraCosNode } = this;\r\n\r\n\t\treturn smoothstep( coneCosNode, penumbraCosNode, angleCosine );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst lightingModel = builder.context.lightingModel;\r\n\r\n\t\tconst { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;\r\n\r\n\t\tconst lVector = objectViewPosition( light ).sub( positionView ); // @TODO: Add it into LightNode\r\n\r\n\t\tconst lightDirection = lVector.normalize();\r\n\t\tconst angleCos = lightDirection.dot( lightTargetDirection( light ) );\r\n\t\tconst spotAttenuation = this.getSpotAttenuation( angleCos );\r\n\r\n\t\tconst lightDistance = lVector.length();\r\n\r\n\t\tconst lightAttenuation = getDistanceAttenuation( {\r\n\t\t\tlightDistance,\r\n\t\t\tcutoffDistance: cutoffDistanceNode,\r\n\t\t\tdecayExponent: decayExponentNode\r\n\t\t} );\r\n\r\n\t\tconst lightColor = colorNode.mul( spotAttenuation ).mul( lightAttenuation );\r\n\r\n\t\tconst reflectedLight = builder.context.reflectedLight;\r\n\r\n\t\tlightingModel.direct( {\r\n\t\t\tlightDirection,\r\n\t\t\tlightColor,\r\n\t\t\treflectedLight\r\n\t\t}, builder.stack, builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SpotLightNode;\r\n\r\naddNodeClass( 'SpotLightNode', SpotLightNode );\r\n\r\naddLightNode( SpotLight, SpotLightNode );\r\n", "import { SpotLight } from '../SpotLight.js';\r\n\r\nclass IESSpotLight extends SpotLight {\r\n\r\n\tconstructor( color, intensity, distance, angle, penumbra, decay ) {\r\n\r\n\t\tsuper( color, intensity, distance, angle, penumbra, decay );\r\n\r\n\t\tthis.iesMap = null;\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.iesMap = source.iesMap;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default IESSpotLight;\r\n", "import SpotLightNode from './SpotLightNode.js';\r\nimport { addLightNode } from './LightsNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { vec2 } from '../shadernode/ShaderNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nimport IESSpotLight from '../../lights/webgpu/IESSpotLight.js';\r\n\r\nclass IESSpotLightNode extends SpotLightNode {\r\n\r\n\tgetSpotAttenuation( angleCosine ) {\r\n\r\n\t\tconst iesMap = this.light.iesMap;\r\n\r\n\t\tlet spotAttenuation = null;\r\n\r\n\t\tif ( iesMap && iesMap.isTexture === true ) {\r\n\r\n\t\t\tconst angle = angleCosine.acos().mul( 1.0 / Math.PI );\r\n\r\n\t\t\tspotAttenuation = texture( iesMap, vec2( angle, 0 ), 0 ).r;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tspotAttenuation = super.getSpotAttenuation( angleCosine );\r\n\r\n\t\t}\r\n\r\n\t\treturn spotAttenuation;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default IESSpotLightNode;\r\n\r\naddNodeClass( 'IESSpotLightNode', IESSpotLightNode );\r\n\r\naddLightNode( IESSpotLight, IESSpotLightNode );\r\n", "import { Light } from './Light.js';\r\n\r\nclass AmbientLight extends Light {\r\n\r\n\tconstructor( color, intensity ) {\r\n\r\n\t\tsuper( color, intensity );\r\n\r\n\t\tthis.isAmbientLight = true;\r\n\r\n\t\tthis.type = 'AmbientLight';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { AmbientLight };\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { addLightNode } from './LightsNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nimport { AmbientLight } from '../../lights/AmbientLight.js';\r\n\r\nclass AmbientLightNode extends AnalyticLightNode {\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t}\r\n\r\n\tsetup( { context } ) {\r\n\r\n\t\tcontext.irradiance.addAssign( this.colorNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AmbientLightNode;\r\n\r\naddNodeClass( 'AmbientLightNode', AmbientLightNode );\r\n\r\naddLightNode( AmbientLight, AmbientLightNode );\r\n", "import { Light } from './Light.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\nclass HemisphereLight extends Light {\r\n\r\n\tconstructor( skyColor, groundColor, intensity ) {\r\n\r\n\t\tsuper( skyColor, intensity );\r\n\r\n\t\tthis.isHemisphereLight = true;\r\n\r\n\t\tthis.type = 'HemisphereLight';\r\n\r\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.groundColor = new Color( groundColor );\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.groundColor.copy( source.groundColor );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { HemisphereLight };\r\n", "import AnalyticLightNode from './AnalyticLightNode.js';\r\nimport { addLightNode } from './LightsNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { normalView } from '../accessors/NormalNode.js';\r\nimport { objectPosition } from '../accessors/Object3DNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nimport { Color } from '../../math/Color.js';\r\nimport { HemisphereLight } from '../../lights/HemisphereLight.js';\r\n\r\nclass HemisphereLightNode extends AnalyticLightNode {\r\n\r\n\tconstructor( light = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t\tthis.lightPositionNode = objectPosition( light );\r\n\t\tthis.lightDirectionNode = this.lightPositionNode.normalize();\r\n\r\n\t\tthis.groundColorNode = uniform( new Color() );\r\n\r\n\t}\r\n\r\n\tupdate( frame ) {\r\n\r\n\t\tconst { light } = this;\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t\tthis.lightPositionNode.object3d = light;\r\n\r\n\t\tthis.groundColorNode.value.copy( light.groundColor ).multiplyScalar( light.intensity );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { colorNode, groundColorNode, lightDirectionNode } = this;\r\n\r\n\t\tconst dotNL = normalView.dot( lightDirectionNode );\r\n\t\tconst hemiDiffuseWeight = dotNL.mul( 0.5 ).add( 0.5 );\r\n\r\n\t\tconst irradiance = mix( groundColorNode, colorNode, hemiDiffuseWeight );\r\n\r\n\t\tbuilder.context.irradiance.addAssign( irradiance );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default HemisphereLightNode;\r\n\r\naddNodeClass( 'HemisphereLightNode', HemisphereLightNode );\r\n\r\naddLightNode( HemisphereLight, HemisphereLightNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { textureCubeUV } from './PMREMUtils.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nimport { WebGLCoordinateSystem } from '../../constants.js';\r\n\r\nlet _generator = null;\r\n\r\nconst _cache = new WeakMap();\r\n\r\nfunction _generateCubeUVSize( imageHeight ) {\r\n\r\n\tconst maxMip = Math.log2( imageHeight ) - 2;\r\n\r\n\tconst texelHeight = 1.0 / imageHeight;\r\n\r\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\r\n\r\n\treturn { texelWidth, texelHeight, maxMip };\r\n\r\n}\r\n\r\nfunction _getPMREMFromTexture( texture ) {\r\n\r\n\tlet cacheTexture = _cache.get( texture );\r\n\r\n\tconst pmremVersion = cacheTexture !== undefined ? cacheTexture.pmremVersion : - 1;\r\n\r\n\tif ( pmremVersion !== texture.pmremVersion ) {\r\n\r\n\t\tif ( texture.isCubeTexture ) {\r\n\r\n\t\t\tif ( texture.source.data.some( ( texture ) => texture === undefined ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'PMREMNode: Undefined texture in CubeTexture. Use onLoad callback or async loader' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcacheTexture = _generator.fromCubemap( texture, cacheTexture );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( texture.image === undefined ) {\r\n\r\n\t\t\t\tthrow new Error( 'PMREMNode: Undefined image in Texture. Use onLoad callback or async loader' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcacheTexture = _generator.fromEquirectangular( texture, cacheTexture );\r\n\r\n\t\t}\r\n\r\n\t\tcacheTexture.pmremVersion = texture.pmremVersion;\r\n\r\n\t\t_cache.set( texture, cacheTexture );\r\n\r\n\t}\r\n\r\n\treturn cacheTexture.texture;\r\n\r\n}\r\n\r\nclass PMREMNode extends TempNode {\r\n\r\n\tconstructor( value, uvNode = null, levelNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\tthis._value = value;\r\n\t\tthis._pmrem = null;\r\n\r\n\t\tthis.uvNode = uvNode;\r\n\t\tthis.levelNode = levelNode;\r\n\r\n\t\tthis._generator = null;\r\n\t\tthis._texture = texture( null );\r\n\t\tthis._width = uniform( 0 );\r\n\t\tthis._height = uniform( 0 );\r\n\t\tthis._maxMip = uniform( 0 );\r\n\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tset value( value ) {\r\n\r\n\t\tthis._value = value;\r\n\t\tthis._pmrem = null;\r\n\r\n\t}\r\n\r\n\tget value() {\r\n\r\n\t\treturn this._value;\r\n\r\n\t}\r\n\r\n\tupdateFromTexture( texture ) {\r\n\r\n\t\tconst cubeUVSize = _generateCubeUVSize( texture.image.height );\r\n\r\n\t\tthis._texture.value = texture;\r\n\t\tthis._width.value = cubeUVSize.texelWidth;\r\n\t\tthis._height.value = cubeUVSize.texelHeight;\r\n\t\tthis._maxMip.value = cubeUVSize.maxMip;\r\n\r\n\t}\r\n\r\n\tupdateBefore() {\r\n\r\n\t\tlet pmrem = this._pmrem;\r\n\r\n\t\tconst pmremVersion = pmrem ? pmrem.pmremVersion : - 1;\r\n\t\tconst texture = this._value;\r\n\r\n\t\tif ( pmremVersion !== texture.pmremVersion ) {\r\n\r\n\t\t\tif ( texture.isPMREMTexture === true ) {\r\n\r\n\t\t\t\tpmrem = texture;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tpmrem = _getPMREMFromTexture( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._pmrem = pmrem;\r\n\r\n\t\t\tthis.updateFromTexture( pmrem );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( _generator === null ) {\r\n\r\n\t\t\t_generator = builder.createPMREMGenerator();\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.updateBefore( builder );\r\n\r\n\t\t//\r\n\r\n\t\tlet uvNode = this.uvNode;\r\n\r\n\t\tif ( uvNode === null && builder.context.getUV ) {\r\n\r\n\t\t\tuvNode = builder.context.getUV( this );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( builder.renderer.coordinateSystem === WebGLCoordinateSystem && texture.isPMREMTexture !== true && texture.isRenderTargetTexture === true ) {\r\n\r\n\t\t\tuvNode = vec3( uvNode.x.negate(), uvNode.yz );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tlet levelNode = this.levelNode;\r\n\r\n\t\tif ( levelNode === null && builder.context.getTextureLevel ) {\r\n\r\n\t\t\tlevelNode = builder.context.getTextureLevel( this );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\treturn textureCubeUV( this._texture, uvNode, levelNode, this._width, this._height, this._maxMip );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport const pmremTexture = nodeProxy( PMREMNode );\r\n\r\naddNodeClass( 'PMREMNode', PMREMNode );\r\n\r\nexport default PMREMNode;\r\n", "import LightingNode from './LightingNode.js';\r\nimport { cache } from '../core/CacheNode.js';\r\nimport { context } from '../core/ContextNode.js';\r\nimport { roughness, clearcoatRoughness } from '../core/PropertyNode.js';\r\nimport { cameraViewMatrix } from '../accessors/CameraNode.js';\r\nimport { transformedClearcoatNormalView, transformedNormalView, transformedNormalWorld } from '../accessors/NormalNode.js';\r\nimport { positionViewDirection } from '../accessors/PositionNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { float } from '../shadernode/ShaderNode.js';\r\nimport { reference } from '../accessors/ReferenceNode.js';\r\nimport { transformedBentNormalView } from '../accessors/AccessorsUtils.js';\r\nimport { pmremTexture } from '../pmrem/PMREMNode.js';\r\n\r\nconst _envNodeCache = new WeakMap();\r\n\r\nclass EnvironmentNode extends LightingNode {\r\n\r\n\tconstructor( envNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.envNode = envNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tlet envNode = this.envNode;\r\n\r\n\t\tif ( envNode.isTextureNode ) {\r\n\r\n\t\t\tlet cacheEnvNode = _envNodeCache.get( envNode.value );\r\n\r\n\t\t\tif ( cacheEnvNode === undefined ) {\r\n\r\n\t\t\t\tcacheEnvNode = pmremTexture( envNode.value );\r\n\r\n\t\t\t\t_envNodeCache.set( envNode.value, cacheEnvNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tenvNode\t= cacheEnvNode;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst { material } = builder;\r\n\r\n\t\tconst envMap = material.envMap;\r\n\t\tconst intensity = envMap ? reference( 'envMapIntensity', 'float', builder.material ) : reference( 'environmentIntensity', 'float', builder.scene ); // @TODO: Add materialEnvIntensity in MaterialNode\r\n\r\n\t\tconst useAnisotropy = material.useAnisotropy === true || material.anisotropy > 0;\r\n\t\tconst radianceNormalView = useAnisotropy ? transformedBentNormalView : transformedNormalView;\r\n\r\n\t\tconst radiance = context( envNode, createRadianceContext( roughness, radianceNormalView ) ).mul( intensity );\r\n\t\tconst irradiance = context( envNode, createIrradianceContext( transformedNormalWorld ) ).mul( Math.PI ).mul( intensity );\r\n\r\n\t\tconst isolateRadiance = cache( radiance );\r\n\t\tconst isolateIrradiance = cache( irradiance );\r\n\r\n\t\t//\r\n\r\n\t\tbuilder.context.radiance.addAssign( isolateRadiance );\r\n\r\n\t\tbuilder.context.iblIrradiance.addAssign( isolateIrradiance );\r\n\r\n\t\t//\r\n\r\n\t\tconst clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;\r\n\r\n\t\tif ( clearcoatRadiance ) {\r\n\r\n\t\t\tconst clearcoatRadianceContext = context( envNode, createRadianceContext( clearcoatRoughness, transformedClearcoatNormalView ) ).mul( intensity );\r\n\t\t\tconst isolateClearcoatRadiance = cache( clearcoatRadianceContext );\r\n\r\n\t\t\tclearcoatRadiance.addAssign( isolateClearcoatRadiance );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst createRadianceContext = ( roughnessNode, normalViewNode ) => {\r\n\r\n\tlet reflectVec = null;\r\n\r\n\treturn {\r\n\t\tgetUV: () => {\r\n\r\n\t\t\tif ( reflectVec === null ) {\r\n\r\n\t\t\t\treflectVec = positionViewDirection.negate().reflect( normalViewNode );\r\n\r\n\t\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\r\n\t\t\t\treflectVec = roughnessNode.mul( roughnessNode ).mix( reflectVec, normalViewNode ).normalize();\r\n\r\n\t\t\t\treflectVec = reflectVec.transformDirection( cameraViewMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn reflectVec;\r\n\r\n\t\t},\r\n\t\tgetTextureLevel: () => {\r\n\r\n\t\t\treturn roughnessNode;\r\n\r\n\t\t}\r\n\t};\r\n\r\n};\r\n\r\nconst createIrradianceContext = ( normalWorldNode ) => {\r\n\r\n\treturn {\r\n\t\tgetUV: () => {\r\n\r\n\t\t\treturn normalWorldNode;\r\n\r\n\t\t},\r\n\t\tgetTextureLevel: () => {\r\n\r\n\t\t\treturn float( 1.0 );\r\n\r\n\t\t}\r\n\t};\r\n\r\n};\r\n\r\nexport default EnvironmentNode;\r\n\r\naddNodeClass( 'EnvironmentNode', EnvironmentNode );\r\n", "import LightingNode from './LightingNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\n\r\nclass BasicEnvironmentNode extends LightingNode {\r\n\r\n\tconstructor( envNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.envNode = envNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// environment property is used in the finish() method of BasicLightingModel\r\n\r\n\t\tbuilder.context.environment = this.envNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BasicEnvironmentNode;\r\n\r\naddNodeClass( 'BasicEnvironmentNode', BasicEnvironmentNode );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { addNodeElement, tslFn, nodeProxy } from '../shadernode/ShaderNode.js';\r\n\r\nconst checkerShaderNode = tslFn( ( inputs ) => {\r\n\r\n\tconst uv = inputs.uv.mul( 2.0 );\r\n\r\n\tconst cx = uv.x.floor();\r\n\tconst cy = uv.y.floor();\r\n\tconst result = cx.add( cy ).mod( 2.0 );\r\n\r\n\treturn result.sign();\r\n\r\n} );\r\n\r\nclass CheckerNode extends TempNode {\r\n\r\n\tconstructor( uvNode = uv() ) {\r\n\r\n\t\tsuper( 'float' );\r\n\r\n\t\tthis.uvNode = uvNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn checkerShaderNode( { uv: this.uvNode } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CheckerNode;\r\n\r\nexport const checker = nodeProxy( CheckerNode );\r\n\r\naddNodeElement( 'checker', checker );\r\n\r\naddNodeClass( 'CheckerNode', CheckerNode );\r\n", "class LoadingManager {\r\n\r\n\tconstructor( onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tlet isLoading = false;\r\n\t\tlet itemsLoaded = 0;\r\n\t\tlet itemsTotal = 0;\r\n\t\tlet urlModifier = undefined;\r\n\t\tconst handlers = [];\r\n\r\n\t\t// Refer to #5689 for the reason why we don't set .onStart\r\n\t\t// in the constructor\r\n\r\n\t\tthis.onStart = undefined;\r\n\t\tthis.onLoad = onLoad;\r\n\t\tthis.onProgress = onProgress;\r\n\t\tthis.onError = onError;\r\n\r\n\t\tthis.itemStart = function ( url ) {\r\n\r\n\t\t\titemsTotal ++;\r\n\r\n\t\t\tif ( isLoading === false ) {\r\n\r\n\t\t\t\tif ( scope.onStart !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tisLoading = true;\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemEnd = function ( url ) {\r\n\r\n\t\t\titemsLoaded ++;\r\n\r\n\t\t\tif ( scope.onProgress !== undefined ) {\r\n\r\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( itemsLoaded === itemsTotal ) {\r\n\r\n\t\t\t\tisLoading = false;\r\n\r\n\t\t\t\tif ( scope.onLoad !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onLoad();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemError = function ( url ) {\r\n\r\n\t\t\tif ( scope.onError !== undefined ) {\r\n\r\n\t\t\t\tscope.onError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.resolveURL = function ( url ) {\r\n\r\n\t\t\tif ( urlModifier ) {\r\n\r\n\t\t\t\treturn urlModifier( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn url;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setURLModifier = function ( transform ) {\r\n\r\n\t\t\turlModifier = transform;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.addHandler = function ( regex, loader ) {\r\n\r\n\t\t\thandlers.push( regex, loader );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.removeHandler = function ( regex ) {\r\n\r\n\t\t\tconst index = handlers.indexOf( regex );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\thandlers.splice( index, 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getHandler = function ( file ) {\r\n\r\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\tconst regex = handlers[ i ];\r\n\t\t\t\tconst loader = handlers[ i + 1 ];\r\n\r\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\r\n\r\n\t\t\t\tif ( regex.test( file ) ) {\r\n\r\n\t\t\t\t\treturn loader;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();\r\n\r\nexport { DefaultLoadingManager, LoadingManager };\r\n", "import { DefaultLoadingManager } from './LoadingManager.js';\r\n\r\nclass Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t\tthis.crossOrigin = 'anonymous';\r\n\t\tthis.withCredentials = false;\r\n\t\tthis.path = '';\r\n\t\tthis.resourcePath = '';\r\n\t\tthis.requestHeader = {};\r\n\r\n\t}\r\n\r\n\tload( /* url, onLoad, onProgress, onError */ ) {}\r\n\r\n\tloadAsync( url, onProgress ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\treturn new Promise( function ( resolve, reject ) {\r\n\r\n\t\t\tscope.load( url, resolve, onProgress, reject );\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tparse( /* data */ ) {}\r\n\r\n\tsetCrossOrigin( crossOrigin ) {\r\n\r\n\t\tthis.crossOrigin = crossOrigin;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetWithCredentials( value ) {\r\n\r\n\t\tthis.withCredentials = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetPath( path ) {\r\n\r\n\t\tthis.path = path;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetResourcePath( resourcePath ) {\r\n\r\n\t\tthis.resourcePath = resourcePath;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetRequestHeader( requestHeader ) {\r\n\r\n\t\tthis.requestHeader = requestHeader;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nLoader.DEFAULT_MATERIAL_NAME = '__DEFAULT';\r\n\r\nexport { Loader };\r\n", "const Cache = {\r\n\r\n\tenabled: false,\r\n\r\n\tfiles: {},\r\n\r\n\tadd: function ( key, file ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n\t\tthis.files[ key ] = file;\r\n\r\n\t},\r\n\r\n\tget: function ( key ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n\t\treturn this.files[ key ];\r\n\r\n\t},\r\n\r\n\tremove: function ( key ) {\r\n\r\n\t\tdelete this.files[ key ];\r\n\r\n\t},\r\n\r\n\tclear: function () {\r\n\r\n\t\tthis.files = {};\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\nexport { Cache };\r\n", "import { Cache } from './Cache.js';\r\nimport { Loader } from './Loader.js';\r\n\r\nconst loading = {};\r\n\r\nclass HttpError extends Error {\r\n\r\n\tconstructor( message, response ) {\r\n\r\n\t\tsuper( message );\r\n\t\tthis.response = response;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass FileLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( url === undefined ) url = '';\r\n\r\n\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\tconst cached = Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tthis.manager.itemStart( url );\r\n\r\n\t\t\tsetTimeout( () => {\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( cached );\r\n\r\n\t\t\t\tthis.manager.itemEnd( url );\r\n\r\n\t\t\t}, 0 );\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\t// Check if request is duplicate\r\n\r\n\t\tif ( loading[ url ] !== undefined ) {\r\n\r\n\t\t\tloading[ url ].push( {\r\n\r\n\t\t\t\tonLoad: onLoad,\r\n\t\t\t\tonProgress: onProgress,\r\n\t\t\t\tonError: onError\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// Initialise array for duplicate requests\r\n\t\tloading[ url ] = [];\r\n\r\n\t\tloading[ url ].push( {\r\n\t\t\tonLoad: onLoad,\r\n\t\t\tonProgress: onProgress,\r\n\t\t\tonError: onError,\r\n\t\t} );\r\n\r\n\t\t// create request\r\n\t\tconst req = new Request( url, {\r\n\t\t\theaders: new Headers( this.requestHeader ),\r\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\r\n\t\t\t// An abort controller could be added within a future PR\r\n\t\t} );\r\n\r\n\t\t// record states ( avoid data race )\r\n\t\tconst mimeType = this.mimeType;\r\n\t\tconst responseType = this.responseType;\r\n\r\n\t\t// start the fetch\r\n\t\tfetch( req )\r\n\t\t\t.then( response => {\r\n\r\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\r\n\r\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\r\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\r\n\r\n\t\t\t\t\tif ( response.status === 0 ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Workaround: Checking if response.body === undefined for Alipay browser #23548\r\n\r\n\t\t\t\t\tif ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {\r\n\r\n\t\t\t\t\t\treturn response;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst callbacks = loading[ url ];\r\n\t\t\t\t\tconst reader = response.body.getReader();\r\n\r\n\t\t\t\t\t// Nginx needs X-File-Size check\r\n\t\t\t\t\t// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\r\n\t\t\t\t\tconst contentLength = response.headers.get( 'X-File-Size' ) || response.headers.get( 'Content-Length' );\r\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\r\n\t\t\t\t\tconst lengthComputable = total !== 0;\r\n\t\t\t\t\tlet loaded = 0;\r\n\r\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\r\n\t\t\t\t\tconst stream = new ReadableStream( {\r\n\t\t\t\t\t\tstart( controller ) {\r\n\r\n\t\t\t\t\t\t\treadData();\r\n\r\n\t\t\t\t\t\t\tfunction readData() {\r\n\r\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( done ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\r\n\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\r\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\r\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\r\n\t\t\t\t\t\t\t\t\t\treadData();\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}, ( e ) => {\r\n\r\n\t\t\t\t\t\t\t\t\tcontroller.error( e );\r\n\r\n\t\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\treturn new Response( stream );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new HttpError( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} )\r\n\t\t\t.then( response => {\r\n\r\n\t\t\t\tswitch ( responseType ) {\r\n\r\n\t\t\t\t\tcase 'arraybuffer':\r\n\r\n\t\t\t\t\t\treturn response.arrayBuffer();\r\n\r\n\t\t\t\t\tcase 'blob':\r\n\r\n\t\t\t\t\t\treturn response.blob();\r\n\r\n\t\t\t\t\tcase 'document':\r\n\r\n\t\t\t\t\t\treturn response.text()\r\n\t\t\t\t\t\t\t.then( text => {\r\n\r\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\r\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, mimeType );\r\n\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tcase 'json':\r\n\r\n\t\t\t\t\t\treturn response.json();\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tif ( mimeType === undefined ) {\r\n\r\n\t\t\t\t\t\t\treturn response.text();\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// sniff encoding\r\n\t\t\t\t\t\t\tconst re = /charset=\"?([^;\"\\s]*)\"?/i;\r\n\t\t\t\t\t\t\tconst exec = re.exec( mimeType );\r\n\t\t\t\t\t\t\tconst label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;\r\n\t\t\t\t\t\t\tconst decoder = new TextDecoder( label );\r\n\t\t\t\t\t\t\treturn response.arrayBuffer().then( ab => decoder.decode( ab ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} )\r\n\t\t\t.then( data => {\r\n\r\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\r\n\t\t\t\t// error response bodies as proper responses to requests.\r\n\t\t\t\tCache.add( url, data );\r\n\r\n\t\t\t\tconst callbacks = loading[ url ];\r\n\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst callback = callbacks[ i ];\r\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} )\r\n\t\t\t.catch( err => {\r\n\r\n\t\t\t\t// Abort errors and other errors are handled the same\r\n\r\n\t\t\t\tconst callbacks = loading[ url ];\r\n\r\n\t\t\t\tif ( callbacks === undefined ) {\r\n\r\n\t\t\t\t\t// When onLoad was called and url was deleted in `loading`\r\n\t\t\t\t\tthis.manager.itemError( url );\r\n\t\t\t\t\tthrow err;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst callback = callbacks[ i ];\r\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.manager.itemError( url );\r\n\r\n\t\t\t} )\r\n\t\t\t.finally( () => {\r\n\r\n\t\t\t\tthis.manager.itemEnd( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\tthis.manager.itemStart( url );\r\n\r\n\t}\r\n\r\n\tsetResponseType( value ) {\r\n\r\n\t\tthis.responseType = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetMimeType( value ) {\r\n\r\n\t\tthis.mimeType = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { FileLoader };\r\n", "import { Material } from './Material.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass PointsMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isPointsMaterial = true;\r\n\r\n\t\tthis.type = 'PointsMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.size = 1;\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.size = source.size;\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PointsMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { property } from '../core/PropertyNode.js';\r\nimport { attribute } from '../core/AttributeNode.js';\r\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\r\nimport { materialColor, materialPointWidth } from '../accessors/MaterialNode.js'; // or should this be a property, instead?\r\nimport { modelViewMatrix } from '../accessors/ModelNode.js';\r\nimport { positionGeometry } from '../accessors/PositionNode.js';\r\nimport { smoothstep } from '../math/MathNode.js';\r\nimport { tslFn, vec2, vec4 } from '../shadernode/ShaderNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { viewport } from '../display/ViewportNode.js';\r\n\r\nimport { PointsMaterial } from '../../materials/PointsMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new PointsMaterial();\r\n\r\nclass InstancedPointsNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( params = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.normals = false;\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.useAlphaToCoverage = true;\r\n\r\n\t\tthis.useColor = params.vertexColors;\r\n\r\n\t\tthis.pointWidth = 1;\r\n\r\n\t\tthis.pointColorNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setupShaders();\r\n\r\n\t\tthis.setValues( params );\r\n\r\n\t}\r\n\r\n\tsetupShaders() {\r\n\r\n\t\tconst useAlphaToCoverage = this.alphaToCoverage;\r\n\t\tconst useColor = this.useColor;\r\n\r\n\t\tthis.vertexNode = tslFn( () => {\r\n\r\n\t\t\t//vUv = uv;\r\n\t\t\tvarying( vec2(), 'vUv' ).assign( uv() ); // @TODO: Analyze other way to do this\r\n\r\n\t\t\tconst instancePosition = attribute( 'instancePosition' );\r\n\r\n\t\t\t// camera space\r\n\t\t\tconst mvPos = property( 'vec4', 'mvPos' );\r\n\t\t\tmvPos.assign( modelViewMatrix.mul( vec4( instancePosition, 1.0 ) ) );\r\n\r\n\t\t\tconst aspect = viewport.z.div( viewport.w );\r\n\r\n\t\t\t// clip space\r\n\t\t\tconst clipPos = cameraProjectionMatrix.mul( mvPos );\r\n\r\n\t\t\t// offset in ndc space\r\n\t\t\tconst offset = property( 'vec2', 'offset' );\r\n\t\t\toffset.assign( positionGeometry.xy );\r\n\t\t\toffset.assign( offset.mul( materialPointWidth ) );\r\n\t\t\toffset.assign( offset.div( viewport.z ) );\r\n\t\t\toffset.y.assign( offset.y.mul( aspect ) );\r\n\r\n\t\t\t// back to clip space\r\n\t\t\toffset.assign( offset.mul( clipPos.w ) );\r\n\r\n\t\t\t//clipPos.xy += offset;\r\n\t\t\tclipPos.assign( clipPos.add( vec4( offset, 0, 0 ) ) );\r\n\r\n\t\t\treturn clipPos;\r\n\r\n\t\t\t//vec4 mvPosition = mvPos; // this was used for somethihng...\r\n\r\n\t\t} )();\r\n\r\n\t\tthis.fragmentNode = tslFn( () => {\r\n\r\n\t\t\tconst vUv = varying( vec2(), 'vUv' );\r\n\r\n\t\t\t// force assignment into correct place in flow\r\n\t\t\tconst alpha = property( 'float', 'alpha' );\r\n\t\t\talpha.assign( 1 );\r\n\r\n\t\t\tconst a = vUv.x;\r\n\t\t\tconst b = vUv.y;\r\n\r\n\t\t\tconst len2 = a.mul( a ).add( b.mul( b ) );\r\n\r\n\t\t\tif ( useAlphaToCoverage ) {\r\n\r\n\t\t\t\t// force assignment out of following 'if' statement - to avoid uniform control flow errors\r\n\t\t\t\tconst dlen = property( 'float', 'dlen' );\r\n\t\t\t\tdlen.assign( len2.fwidth() );\r\n\r\n\t\t\t\talpha.assign( smoothstep( dlen.oneMinus(), dlen.add( 1 ), len2 ).oneMinus() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlen2.greaterThan( 1.0 ).discard();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet pointColorNode;\r\n\r\n\t\t\tif ( this.pointColorNode ) {\r\n\r\n\t\t\t\tpointColorNode = this.pointColorNode;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( useColor ) {\r\n\r\n\t\t\t\t\tconst instanceColor = attribute( 'instanceColor' );\r\n\r\n\t\t\t\t\tpointColorNode = instanceColor.mul( materialColor );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tpointColorNode = materialColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn vec4( pointColorNode, alpha );\r\n\r\n\t\t} )();\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tget alphaToCoverage() {\r\n\r\n\t\treturn this.useAlphaToCoverage;\r\n\r\n\t}\r\n\r\n\tset alphaToCoverage( value ) {\r\n\r\n\t\tif ( this.useAlphaToCoverage !== value ) {\r\n\r\n\t\t\tthis.useAlphaToCoverage = value;\r\n\t\t\tthis.setupShaders();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default InstancedPointsNodeMaterial;\r\n\r\naddNodeMaterial( 'InstancedPointsNodeMaterial', InstancedPointsNodeMaterial );\r\n", "import { Material } from './Material.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass LineBasicMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLineBasicMaterial = true;\r\n\r\n\t\tthis.type = 'LineBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.linewidth = 1;\r\n\t\tthis.linecap = 'round';\r\n\t\tthis.linejoin = 'round';\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.linewidth = source.linewidth;\r\n\t\tthis.linecap = source.linecap;\r\n\t\tthis.linejoin = source.linejoin;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LineBasicMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\n\r\nimport { LineBasicMaterial } from '../../materials/LineBasicMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new LineBasicMaterial();\r\n\r\nclass LineBasicNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLineBasicNodeMaterial = true;\r\n\r\n\t\tthis.lights = false;\r\n\t\tthis.normals = false;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LineBasicNodeMaterial;\r\n\r\naddNodeMaterial( 'LineBasicNodeMaterial', LineBasicNodeMaterial );\r\n", "import { LineBasicMaterial } from './LineBasicMaterial.js';\r\n\r\nclass LineDashedMaterial extends LineBasicMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLineDashedMaterial = true;\r\n\r\n\t\tthis.type = 'LineDashedMaterial';\r\n\r\n\t\tthis.scale = 1;\r\n\t\tthis.dashSize = 3;\r\n\t\tthis.gapSize = 1;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.scale = source.scale;\r\n\t\tthis.dashSize = source.dashSize;\r\n\t\tthis.gapSize = source.gapSize;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LineDashedMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { attribute } from '../core/AttributeNode.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { materialLineDashSize, materialLineGapSize, materialLineScale } from '../accessors/MaterialNode.js';\r\nimport { dashSize, gapSize } from '../core/PropertyNode.js';\r\nimport { float } from '../shadernode/ShaderNode.js';\r\n\r\nimport { LineDashedMaterial } from '../../materials/LineDashedMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new LineDashedMaterial();\r\n\r\nclass LineDashedNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLineDashedNodeMaterial = true;\r\n\r\n\t\tthis.lights = false;\r\n\t\tthis.normals = false;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.offsetNode = null;\r\n\t\tthis.dashScaleNode = null;\r\n\t\tthis.dashSizeNode = null;\r\n\t\tthis.gapSizeNode = null;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupVariants() {\r\n\r\n\t\tconst offsetNode = this.offsetNode;\r\n\t\tconst dashScaleNode = this.dashScaleNode ? float( this.dashScaleNode ) : materialLineScale;\r\n\t\tconst dashSizeNode = this.dashSizeNode ? float( this.dashSizeNode ) : materialLineDashSize;\r\n\t\tconst gapSizeNode = this.dashSizeNode ? float( this.dashGapNode ) : materialLineGapSize;\r\n\r\n\t\tdashSize.assign( dashSizeNode );\r\n\t\tgapSize.assign( gapSizeNode );\r\n\r\n\t\tconst vLineDistance = varying( attribute( 'lineDistance' ).mul( dashScaleNode ) );\r\n\t\tconst vLineDistanceOffset = offsetNode ? vLineDistance.add( offsetNode ) : vLineDistance;\r\n\r\n\t\tvLineDistanceOffset.mod( dashSize.add( gapSize ) ).greaterThan( dashSize ).discard();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LineDashedNodeMaterial;\r\n\r\naddNodeMaterial( 'LineDashedNodeMaterial', LineDashedNodeMaterial );\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { temp } from '../core/VarNode.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { property, varyingProperty } from '../core/PropertyNode.js';\r\nimport { attribute } from '../core/AttributeNode.js';\r\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\r\nimport { materialColor, materialLineScale, materialLineDashSize, materialLineGapSize, materialLineDashOffset, materialLineWidth } from '../accessors/MaterialNode.js';\r\nimport { modelViewMatrix } from '../accessors/ModelNode.js';\r\nimport { positionGeometry } from '../accessors/PositionNode.js';\r\nimport { mix, smoothstep } from '../math/MathNode.js';\r\nimport { tslFn, float, vec2, vec3, vec4, If } from '../shadernode/ShaderNode.js';\r\nimport { uv } from '../accessors/UVNode.js';\r\nimport { viewport } from '../display/ViewportNode.js';\r\nimport { dashSize, gapSize } from '../core/PropertyNode.js';\r\n\r\nimport { LineDashedMaterial } from '../../materials/LineDashedMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new LineDashedMaterial();\r\n\r\nclass Line2NodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( params = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.normals = false;\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.useAlphaToCoverage = true;\r\n\t\tthis.useColor = params.vertexColors;\r\n\t\tthis.useDash = params.dashed;\r\n\t\tthis.useWorldUnits = false;\r\n\r\n\t\tthis.dashOffset = 0;\r\n\t\tthis.lineWidth = 1;\r\n\r\n\t\tthis.lineColorNode = null;\r\n\r\n\t\tthis.offsetNode = null;\r\n\t\tthis.dashScaleNode = null;\r\n\t\tthis.dashSizeNode = null;\r\n\t\tthis.gapSizeNode = null;\r\n\r\n\t\tthis.setValues( params );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.setupShaders();\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t}\r\n\r\n\tsetupShaders() {\r\n\r\n\t\tconst useAlphaToCoverage = this.alphaToCoverage;\r\n\t\tconst useColor = this.useColor;\r\n\t\tconst useDash = this.dashed;\r\n\t\tconst useWorldUnits = this.worldUnits;\r\n\r\n\t\tconst trimSegment = tslFn( ( { start, end } ) => {\r\n\r\n\t\t\tconst a = cameraProjectionMatrix.element( 2 ).element( 2 ); // 3nd entry in 3th column\r\n\t\t\tconst b = cameraProjectionMatrix.element( 3 ).element( 2 ); // 3nd entry in 4th column\r\n\t\t\tconst nearEstimate = b.mul( - 0.5 ).div( a );\r\n\r\n\t\t\tconst alpha = nearEstimate.sub( start.z ).div( end.z.sub( start.z ) );\r\n\r\n\t\t\treturn vec4( mix( start.xyz, end.xyz, alpha ), end.w );\r\n\r\n\t\t} );\r\n\r\n\t\tthis.vertexNode = tslFn( () => {\r\n\r\n\t\t\tvaryingProperty( 'vec2', 'vUv' ).assign( uv() );\r\n\r\n\t\t\tconst instanceStart = attribute( 'instanceStart' );\r\n\t\t\tconst instanceEnd = attribute( 'instanceEnd' );\r\n\r\n\t\t\t// camera space\r\n\r\n\t\t\tconst start = property( 'vec4', 'start' );\r\n\t\t\tconst end = property( 'vec4', 'end' );\r\n\r\n\t\t\tstart.assign( modelViewMatrix.mul( vec4( instanceStart, 1.0 ) ) ); // force assignment into correct place in flow\r\n\t\t\tend.assign( modelViewMatrix.mul( vec4( instanceEnd, 1.0 ) ) );\r\n\r\n\t\t\tif ( useWorldUnits ) {\r\n\r\n\t\t\t\tvaryingProperty( 'vec3', 'worldStart' ).assign( start.xyz );\r\n\t\t\t\tvaryingProperty( 'vec3', 'worldEnd' ).assign( end.xyz );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst aspect = viewport.z.div( viewport.w );\r\n\r\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\r\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\r\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\r\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\r\n\r\n\t\t\tconst perspective = cameraProjectionMatrix.element( 2 ).element( 3 ).equal( - 1.0 ); // 4th entry in the 3rd column\r\n\r\n\t\t\tIf( perspective, () => {\r\n\r\n\t\t\t\tIf( start.z.lessThan( 0.0 ).and( end.z.greaterThan( 0.0 ) ), () => {\r\n\r\n\t\t\t\t\tend.assign( trimSegment( { start: start, end: end } ) );\r\n\r\n\t\t\t\t} ).elseif( end.z.lessThan( 0.0 ).and( start.z.greaterThanEqual( 0.0 ) ), () => {\r\n\r\n\t\t\t\t\tstart.assign( trimSegment( { start: end, end: start } ) );\r\n\r\n\t\t\t \t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t// clip space\r\n\t\t\tconst clipStart = cameraProjectionMatrix.mul( start );\r\n\t\t\tconst clipEnd = cameraProjectionMatrix.mul( end );\r\n\r\n\t\t\t// ndc space\r\n\t\t\tconst ndcStart = clipStart.xyz.div( clipStart.w );\r\n\t\t\tconst ndcEnd = clipEnd.xyz.div( clipEnd.w );\r\n\r\n\t\t\t// direction\r\n\t\t\tconst dir = ndcEnd.xy.sub( ndcStart.xy ).temp();\r\n\r\n\t\t\t// account for clip-space aspect ratio\r\n\t\t\tdir.x.assign( dir.x.mul( aspect ) );\r\n\t\t\tdir.assign( dir.normalize() );\r\n\r\n\t\t\tconst clip = temp( vec4() );\r\n\r\n\t\t\tif ( useWorldUnits ) {\r\n\r\n\t\t\t\t// get the offset direction as perpendicular to the view vector\r\n\r\n\t\t\t\tconst worldDir = end.xyz.sub( start.xyz ).normalize();\r\n\t\t\t\tconst tmpFwd = mix( start.xyz, end.xyz, 0.5 ).normalize();\r\n\t\t\t\tconst worldUp = worldDir.cross( tmpFwd ).normalize();\r\n\t\t\t\tconst worldFwd = worldDir.cross( worldUp );\r\n\r\n\t\t\t\tconst worldPos = varyingProperty( 'vec4', 'worldPos' );\r\n\r\n\t\t\t\tworldPos.assign( positionGeometry.y.lessThan( 0.5 ).cond( start, end ) );\r\n\r\n\t\t\t\t// height offset\r\n\t\t\t\tconst hw = materialLineWidth.mul( 0.5 );\r\n\t\t\t\tworldPos.addAssign( vec4( positionGeometry.x.lessThan( 0.0 ).cond( worldUp.mul( hw ), worldUp.mul( hw ).negate() ), 0 ) );\r\n\r\n\t\t\t\t// don't extend the line if we're rendering dashes because we\r\n\t\t\t\t// won't be rendering the endcaps\r\n\t\t\t\tif ( ! useDash ) {\r\n\r\n\t\t\t\t\t// cap extension\r\n\t\t\t\t\tworldPos.addAssign( vec4( positionGeometry.y.lessThan( 0.5 ).cond( worldDir.mul( hw ).negate(), worldDir.mul( hw ) ), 0 ) );\r\n\r\n\t\t\t\t\t// add width to the box\r\n\t\t\t\t\tworldPos.addAssign( vec4( worldFwd.mul( hw ), 0 ) );\r\n\r\n\t\t\t\t\t// endcaps\r\n\t\t\t\t\tIf( positionGeometry.y.greaterThan( 1.0 ).or( positionGeometry.y.lessThan( 0.0 ) ), () => {\r\n\r\n\t\t\t\t\t\tworldPos.subAssign( vec4( worldFwd.mul( 2.0 ).mul( hw ), 0 ) );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// project the worldpos\r\n\t\t\t\tclip.assign( cameraProjectionMatrix.mul( worldPos ) );\r\n\r\n\t\t\t\t// shift the depth of the projected points so the line\r\n\t\t\t\t// segments overlap neatly\r\n\t\t\t\tconst clipPose = temp( vec3() );\r\n\r\n\t\t\t\tclipPose.assign( positionGeometry.y.lessThan( 0.5 ).cond( ndcStart, ndcEnd ) );\r\n\t\t\t\tclip.z.assign( clipPose.z.mul( clip.w ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst offset = property( 'vec2', 'offset' );\r\n\r\n\t\t\t\toffset.assign( vec2( dir.y, dir.x.negate() ) );\r\n\r\n\t\t\t\t// undo aspect ratio adjustment\r\n\t\t\t\tdir.x.assign( dir.x.div( aspect ) );\r\n\t\t\t\toffset.x.assign( offset.x.div( aspect ) );\r\n\r\n\t\t\t\t// sign flip\r\n\t\t\t\toffset.assign( positionGeometry.x.lessThan( 0.0 ).cond( offset.negate(), offset ) );\r\n\r\n\t\t\t\t// endcaps\r\n\t\t\t\tIf( positionGeometry.y.lessThan( 0.0 ), () => {\r\n\r\n\t\t\t\t\toffset.assign( offset.sub( dir ) );\r\n\r\n\t\t\t\t} ).elseif( positionGeometry.y.greaterThan( 1.0 ), () => {\r\n\r\n\t\t\t\t\toffset.assign( offset.add( dir ) );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t// adjust for linewidth\r\n\t\t\t\toffset.assign( offset.mul( materialLineWidth ) );\r\n\r\n\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\r\n\t\t\t\toffset.assign( offset.div( viewport.w ) );\r\n\r\n\t\t\t\t// select end\r\n\t\t\t\tclip.assign( positionGeometry.y.lessThan( 0.5 ).cond( clipStart, clipEnd ) );\r\n\r\n\t\t\t\t// back to clip space\r\n\t\t\t\toffset.assign( offset.mul( clip.w ) );\r\n\r\n\t\t\t\tclip.assign( clip.add( vec4( offset, 0, 0 ) ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn clip;\r\n\r\n\t\t} )();\r\n\r\n\t\tconst closestLineToLine = tslFn( ( { p1, p2, p3, p4 } ) => {\r\n\r\n\t\t\tconst p13 = p1.sub( p3 );\r\n\t\t\tconst p43 = p4.sub( p3 );\r\n\r\n\t\t\tconst p21 = p2.sub( p1 );\r\n\r\n\t\t\tconst d1343 = p13.dot( p43 );\r\n\t\t\tconst d4321 = p43.dot( p21 );\r\n\t\t\tconst d1321 = p13.dot( p21 );\r\n\t\t\tconst d4343 = p43.dot( p43 );\r\n\t\t\tconst d2121 = p21.dot( p21 );\r\n\r\n\t\t\tconst denom = d2121.mul( d4343 ).sub( d4321.mul( d4321 ) );\r\n\t\t\tconst numer = d1343.mul( d4321 ).sub( d1321.mul( d4343 ) );\r\n\r\n\t\t\tconst mua = numer.div( denom ).clamp();\r\n\t\t\tconst mub = d1343.add( d4321.mul( mua ) ).div( d4343 ).clamp();\r\n\r\n\t\t\treturn vec2( mua, mub );\r\n\r\n\t\t} );\r\n\r\n\t\tthis.fragmentNode = tslFn( () => {\r\n\r\n\t\t\tconst vUv = varyingProperty( 'vec2', 'vUv' );\r\n\r\n\t\t\tif ( useDash ) {\r\n\r\n\t\t\t\tconst offsetNode = this.offsetNode ? float( this.offsetNodeNode ) : materialLineDashOffset;\r\n\t\t\t\tconst dashScaleNode = this.dashScaleNode ? float( this.dashScaleNode ) : materialLineScale;\r\n\t\t\t\tconst dashSizeNode = this.dashSizeNode ? float( this.dashSizeNode ) : materialLineDashSize;\r\n\t\t\t\tconst gapSizeNode = this.dashSizeNode ? float( this.dashGapNode ) : materialLineGapSize;\r\n\r\n\t\t\t\tdashSize.assign( dashSizeNode );\r\n\t\t\t\tgapSize.assign( gapSizeNode );\r\n\r\n\t\t\t\tconst instanceDistanceStart = attribute( 'instanceDistanceStart' );\r\n\t\t\t\tconst instanceDistanceEnd = attribute( 'instanceDistanceEnd' );\r\n\r\n\t\t\t\tconst lineDistance = positionGeometry.y.lessThan( 0.5 ).cond( dashScaleNode.mul( instanceDistanceStart ), materialLineScale.mul( instanceDistanceEnd ) );\r\n\r\n\t\t\t\tconst vLineDistance = varying( lineDistance.add( materialLineDashOffset ) );\r\n\t\t\t\tconst vLineDistanceOffset = offsetNode ? vLineDistance.add( offsetNode ) : vLineDistance;\r\n\r\n\t\t\t\tvUv.y.lessThan( - 1.0 ).or( vUv.y.greaterThan( 1.0 ) ).discard(); // discard endcaps\r\n\t\t\t\tvLineDistanceOffset.mod( dashSize.add( gapSize ) ).greaterThan( dashSize ).discard(); // todo - FIX\r\n\r\n\t\t\t}\r\n\r\n\t\t\t // force assignment into correct place in flow\r\n\t\t\tconst alpha = property( 'float', 'alpha' );\r\n\t\t\talpha.assign( 1 );\r\n\r\n\t\t\tif ( useWorldUnits ) {\r\n\r\n\t\t\t\tconst worldStart = varyingProperty( 'vec3', 'worldStart' );\r\n\t\t\t\tconst worldEnd = varyingProperty( 'vec3', 'worldEnd' );\r\n\r\n\t\t\t\t// Find the closest points on the view ray and the line segment\r\n\t\t\t\tconst rayEnd = varyingProperty( 'vec4', 'worldPos' ).xyz.normalize().mul( 1e5 );\r\n\t\t\t\tconst lineDir = worldEnd.sub( worldStart );\r\n\t\t\t\tconst params = closestLineToLine( { p1: worldStart, p2: worldEnd, p3: vec3( 0.0, 0.0, 0.0 ), p4: rayEnd } );\r\n\r\n\t\t\t\tconst p1 = worldStart.add( lineDir.mul( params.x ) );\r\n\t\t\t\tconst p2 = rayEnd.mul( params.y );\r\n\t\t\t\tconst delta = p1.sub( p2 );\r\n\t\t\t\tconst len = delta.length();\r\n\t\t\t\tconst norm = len.div( materialLineWidth );\r\n\r\n\t\t\t\tif ( ! useDash ) {\r\n\r\n\t\t\t\t\tif ( useAlphaToCoverage ) {\r\n\r\n\t\t\t\t\t\tconst dnorm = norm.fwidth();\r\n\t\t\t\t\t\talpha.assign( smoothstep( dnorm.negate().add( 0.5 ), dnorm.add( 0.5 ), norm ).oneMinus() );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tnorm.greaterThan( 0.5 ).discard();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// round endcaps\r\n\r\n\t\t\t\tif ( useAlphaToCoverage ) {\r\n\r\n\t\t\t\t\tconst a = vUv.x;\r\n\t\t\t\t\tconst b = vUv.y.greaterThan( 0.0 ).cond( vUv.y.sub( 1.0 ), vUv.y.add( 1.0 ) );\r\n\r\n\t\t\t\t\tconst len2 = a.mul( a ).add( b.mul( b ) );\r\n\r\n\t\t\t\t\t// force assignment out of following 'if' statement - to avoid uniform control flow errors\r\n\t\t\t\t\tconst dlen = property( 'float', 'dlen' );\r\n\t\t\t\t\tdlen.assign( len2.fwidth() );\r\n\r\n\t\t\t\t\tIf( vUv.y.abs().greaterThan( 1.0 ), () => {\r\n\r\n\t\t\t\t\t\talpha.assign( smoothstep( dlen.oneMinus(), dlen.add( 1 ), len2 ).oneMinus() );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tIf( vUv.y.abs().greaterThan( 1.0 ), () => {\r\n\r\n\t\t\t\t\t\tconst a = vUv.x;\r\n\t\t\t\t\t\tconst b = vUv.y.greaterThan( 0.0 ).cond( vUv.y.sub( 1.0 ), vUv.y.add( 1.0 ) );\r\n\t\t\t\t\t\tconst len2 = a.mul( a ).add( b.mul( b ) );\r\n\r\n\t\t\t\t\t\tlen2.greaterThan( 1.0 ).discard();\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet lineColorNode;\r\n\r\n\t\t\tif ( this.lineColorNode ) {\r\n\r\n\t\t\t\tlineColorNode = this.lineColorNode;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( useColor ) {\r\n\r\n\t\t\t\t\tconst instanceColorStart = attribute( 'instanceColorStart' );\r\n\t\t\t\t\tconst instanceColorEnd = attribute( 'instanceColorEnd' );\r\n\r\n\t\t\t\t\tconst instanceColor = positionGeometry.y.lessThan( 0.5 ).cond( instanceColorStart, instanceColorEnd );\r\n\r\n\t\t\t\t\tlineColorNode = instanceColor.mul( materialColor );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlineColorNode = materialColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn vec4( lineColorNode, alpha );\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n\r\n\tget worldUnits() {\r\n\r\n\t\treturn this.useWorldUnits;\r\n\r\n\t}\r\n\r\n\tset worldUnits( value ) {\r\n\r\n\t\tif ( this.useWorldUnits !== value ) {\r\n\r\n\t\t\tthis.useWorldUnits = value;\r\n\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tget dashed() {\r\n\r\n\t\treturn this.useDash;\r\n\r\n\t}\r\n\r\n\tset dashed( value ) {\r\n\r\n\t\tif ( this.useDash !== value ) {\r\n\r\n\t\t\tthis.useDash = value;\r\n\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tget alphaToCoverage() {\r\n\r\n\t\treturn this.useAlphaToCoverage;\r\n\r\n\t}\r\n\r\n\tset alphaToCoverage( value ) {\r\n\r\n\t\tif ( this.useAlphaToCoverage !== value ) {\r\n\r\n\t\t\tthis.useAlphaToCoverage = value;\r\n\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Line2NodeMaterial;\r\n\r\naddNodeMaterial( 'Line2NodeMaterial', Line2NodeMaterial );\r\n", "import { TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\n\r\nclass MeshNormalMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshNormalMaterial = true;\r\n\r\n\t\tthis.type = 'MeshNormalMaterial';\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshNormalMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { directionToColor } from '../utils/PackingNode.js';\r\nimport { materialOpacity } from '../accessors/MaterialNode.js';\r\nimport { transformedNormalView } from '../accessors/NormalNode.js';\r\nimport { float, vec4 } from '../shadernode/ShaderNode.js';\r\n\r\nimport { MeshNormalMaterial } from '../../materials/MeshNormalMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshNormalMaterial();\r\n\r\nclass MeshNormalNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.isMeshNormalNodeMaterial = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupDiffuseColor() {\r\n\r\n\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\r\n\r\n\t\tdiffuseColor.assign( vec4( directionToColor( transformedNormalView ), opacityNode ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshNormalNodeMaterial;\r\n\r\naddNodeMaterial( 'MeshNormalNodeMaterial', MeshNormalNodeMaterial );\r\n", "import LightingNode from './LightingNode.js';\r\nimport { addNodeClass } from '../core/Node.js';\r\nimport { float } from '../shadernode/ShaderNode.js';\r\n\r\nclass BasicLightMapNode extends LightingNode {\r\n\r\n\tconstructor( lightMapNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.lightMapNode = lightMapNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// irradianceLightMap property is used in the indirectDiffuse() method of BasicLightingModel\r\n\r\n\t\tconst RECIPROCAL_PI = float( 1 / Math.PI );\r\n\r\n\t\tbuilder.context.irradianceLightMap = this.lightMapNode.mul( RECIPROCAL_PI );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BasicLightMapNode;\r\n\r\naddNodeClass( 'BasicLightMapNode', BasicLightMapNode );\r\n", "import LightingModel from '../core/LightingModel.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { MultiplyOperation, MixOperation, AddOperation } from '../../constants.js';\r\nimport { materialSpecularStrength, materialReflectivity } from '../accessors/MaterialNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { vec4 } from '../shadernode/ShaderNode.js';\r\n\r\nclass BasicLightingModel extends LightingModel {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t}\r\n\r\n\tindirect( context, stack, builder ) {\r\n\r\n\t\tconst ambientOcclusion = context.ambientOcclusion;\r\n\t\tconst reflectedLight = context.reflectedLight;\r\n\t\tconst irradianceLightMap = builder.context.irradianceLightMap;\r\n\r\n\t\treflectedLight.indirectDiffuse.assign( vec4( 0.0 ) );\r\n\r\n\t\t// accumulation (baked indirect lighting only)\r\n\r\n\t\tif ( irradianceLightMap ) {\r\n\r\n\t\t\treflectedLight.indirectDiffuse.addAssign( irradianceLightMap );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treflectedLight.indirectDiffuse.addAssign( vec4( 1.0, 1.0, 1.0, 0.0 ) );\r\n\r\n\t\t}\r\n\r\n\t\t// modulation\r\n\r\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\r\n\r\n\t\treflectedLight.indirectDiffuse.mulAssign( diffuseColor.rgb );\r\n\r\n\t}\r\n\r\n\tfinish( context, stack, builder ) {\r\n\r\n\t\tconst material = builder.material;\r\n\t\tconst outgoingLight = context.outgoingLight;\r\n\t\tconst envNode = builder.context.environment;\r\n\r\n\t\tif ( envNode ) {\r\n\r\n\t\t\tswitch ( material.combine ) {\r\n\r\n\t\t\t\tcase MultiplyOperation:\r\n\t\t\t\t\toutgoingLight.rgb.assign( mix( outgoingLight.rgb, outgoingLight.rgb.mul( envNode.rgb ), materialSpecularStrength.mul( materialReflectivity ) ) );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MixOperation:\r\n\t\t\t\t\toutgoingLight.rgb.assign( mix( outgoingLight.rgb, envNode.rgb, materialSpecularStrength.mul( materialReflectivity ) ) );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AddOperation:\r\n\t\t\t\t\toutgoingLight.rgb.addAssign( envNode.rgb.mul( materialSpecularStrength.mul( materialReflectivity ) ) );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.warn( 'THREE.BasicLightingModel: Unsupported .combine value:', material.combine );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BasicLightingModel;\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { materialLightMap } from '../accessors/MaterialNode.js';\r\nimport { MeshBasicMaterial } from '../../materials/MeshBasicMaterial.js';\r\nimport BasicEnvironmentNode from '../lighting/BasicEnvironmentNode.js';\r\nimport BasicLightMapNode from '../lighting/BasicLightMapNode.js';\r\nimport BasicLightingModel from '../functions/BasicLightingModel.js';\r\nimport { transformedNormalView, normalView } from '../accessors/NormalNode.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshBasicMaterial();\r\n\r\nclass MeshBasicNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshBasicNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\t\t//this.normals = false; @TODO: normals usage by context\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupNormal() {\r\n\r\n\t\ttransformedNormalView.assign( normalView ); // see #28839\r\n\r\n\t}\r\n\r\n\tsetupEnvironment( builder ) {\r\n\r\n\t\tconst envNode = super.setupEnvironment( builder );\r\n\r\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\r\n\r\n\t}\r\n\r\n\tsetupLightMap( builder ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( builder.material.lightMap ) {\r\n\r\n\t\t\tnode = new BasicLightMapNode( materialLightMap );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tsetupOutgoingLight() {\r\n\r\n\t\treturn diffuseColor.rgb;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel() {\r\n\r\n\t\treturn new BasicLightingModel();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshBasicNodeMaterial;\r\n\r\naddNodeMaterial( 'MeshBasicNodeMaterial', MeshBasicNodeMaterial );\r\n", "import { tslFn } from '../../shadernode/ShaderNode.js';\r\n\r\nconst F_Schlick = tslFn( ( { f0, f90, dotVH } ) => {\r\n\r\n\t// Original approximation by Christophe Schlick '94\r\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\r\n\r\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\r\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\r\n\tconst fresnel = dotVH.mul( - 5.55473 ).sub( 6.98316 ).mul( dotVH ).exp2();\r\n\r\n\treturn f0.mul( fresnel.oneMinus() ).add( f90.mul( fresnel ) );\r\n\r\n} ); // validated\r\n\r\nexport default F_Schlick;\r\n", "import { tslFn } from '../../shadernode/ShaderNode.js';\r\n\r\nconst BRDF_Lambert = tslFn( ( inputs ) => {\r\n\r\n\treturn inputs.diffuseColor.mul( 1 / Math.PI ); // punctual light\r\n\r\n} ); // validated\r\n\r\nexport default BRDF_Lambert;\r\n", "import BasicLightingModel from './BasicLightingModel.js';\r\nimport F_Schlick from './BSDF/F_Schlick.js';\r\nimport BRDF_Lambert from './BSDF/BRDF_Lambert.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { transformedNormalView } from '../accessors/NormalNode.js';\r\nimport { materialSpecularStrength } from '../accessors/MaterialNode.js';\r\nimport { shininess, specularColor } from '../core/PropertyNode.js';\r\nimport { positionViewDirection } from '../accessors/PositionNode.js';\r\nimport { tslFn, float } from '../shadernode/ShaderNode.js';\r\n\r\nconst G_BlinnPhong_Implicit = () => float( 0.25 );\r\n\r\nconst D_BlinnPhong = tslFn( ( { dotNH } ) => {\r\n\r\n\treturn shininess.mul( float( 0.5 ) ).add( 1.0 ).mul( float( 1 / Math.PI ) ).mul( dotNH.pow( shininess ) );\r\n\r\n} );\r\n\r\nconst BRDF_BlinnPhong = tslFn( ( { lightDirection } ) => {\r\n\r\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\r\n\r\n\tconst dotNH = transformedNormalView.dot( halfDir ).clamp();\r\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\r\n\r\n\tconst F = F_Schlick( { f0: specularColor, f90: 1.0, dotVH } );\r\n\tconst G = G_BlinnPhong_Implicit();\r\n\tconst D = D_BlinnPhong( { dotNH } );\r\n\r\n\treturn F.mul( G ).mul( D );\r\n\r\n} );\r\n\r\nclass PhongLightingModel extends BasicLightingModel {\r\n\r\n\tconstructor( specular = true ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.specular = specular;\r\n\r\n\t}\r\n\r\n\tdirect( { lightDirection, lightColor, reflectedLight } ) {\r\n\r\n\t\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\r\n\t\tconst irradiance = dotNL.mul( lightColor );\r\n\r\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\r\n\r\n\t\tif ( this.specular === true ) {\r\n\r\n\t\t\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_BlinnPhong( { lightDirection } ) ).mul( materialSpecularStrength ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tindirect( { ambientOcclusion, irradiance, reflectedLight } ) {\r\n\r\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\r\n\r\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PhongLightingModel;\r\n", "import { MultiplyOperation, TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nclass MeshLambertMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshLambertMaterial = true;\r\n\r\n\t\tthis.type = 'MeshLambertMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapRotation = new Euler();\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapRotation.copy( source.envMapRotation );\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshLambertMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport BasicEnvironmentNode from '../lighting/BasicEnvironmentNode.js';\r\nimport PhongLightingModel from '../functions/PhongLightingModel.js';\r\n\r\nimport { MeshLambertMaterial } from '../../materials/MeshLambertMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshLambertMaterial();\r\n\r\nclass MeshLambertNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshLambertNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupEnvironment( builder ) {\r\n\r\n\t\tconst envNode = super.setupEnvironment( builder );\r\n\r\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new PhongLightingModel( false ); // ( specular ) -> force lambert\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshLambertNodeMaterial;\r\n\r\naddNodeMaterial( 'MeshLambertNodeMaterial', MeshLambertNodeMaterial );\r\n", "import { MultiplyOperation, TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nclass MeshPhongMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshPhongMaterial = true;\r\n\r\n\t\tthis.type = 'MeshPhongMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.specular = new Color( 0x111111 );\r\n\t\tthis.shininess = 30;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapRotation = new Euler();\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.specular.copy( source.specular );\r\n\t\tthis.shininess = source.shininess;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapRotation.copy( source.envMapRotation );\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshPhongMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { shininess, specularColor } from '../core/PropertyNode.js';\r\nimport { materialShininess, materialSpecular } from '../accessors/MaterialNode.js';\r\nimport { float } from '../shadernode/ShaderNode.js';\r\nimport BasicEnvironmentNode from '../lighting/BasicEnvironmentNode.js';\r\nimport PhongLightingModel from '../functions/PhongLightingModel.js';\r\n\r\nimport { MeshPhongMaterial } from '../../materials/MeshPhongMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshPhongMaterial();\r\n\r\nclass MeshPhongNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshPhongNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.shininessNode = null;\r\n\t\tthis.specularNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupEnvironment( builder ) {\r\n\r\n\t\tconst envNode = super.setupEnvironment( builder );\r\n\r\n\t\treturn envNode ? new BasicEnvironmentNode( envNode ) : null;\r\n\r\n\t}\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new PhongLightingModel();\r\n\r\n\t}\r\n\r\n\tsetupVariants() {\r\n\r\n\t\t// SHININESS\r\n\r\n\t\tconst shininessNode = ( this.shininessNode ? float( this.shininessNode ) : materialShininess ).max( 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\tshininess.assign( shininessNode );\r\n\r\n\t\t// SPECULAR COLOR\r\n\r\n\t\tconst specularNode = this.specularNode || materialSpecular;\r\n\r\n\t\tspecularColor.assign( specularNode );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.shininessNode = source.shininessNode;\r\n\t\tthis.specularNode = source.specularNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshPhongNodeMaterial;\r\n\r\naddNodeMaterial( 'MeshPhongNodeMaterial', MeshPhongNodeMaterial );\r\n", "import { normalGeometry } from '../../accessors/NormalNode.js';\r\nimport { tslFn } from '../../shadernode/ShaderNode.js';\r\n\r\nconst getGeometryRoughness = tslFn( () => {\r\n\r\n\tconst dxy = normalGeometry.dFdx().abs().max( normalGeometry.dFdy().abs() );\r\n\tconst geometryRoughness = dxy.x.max( dxy.y ).max( dxy.z );\r\n\r\n\treturn geometryRoughness;\r\n\r\n} );\r\n\r\nexport default getGeometryRoughness;\r\n", "import getGeometryRoughness from './getGeometryRoughness.js';\r\nimport { tslFn } from '../../shadernode/ShaderNode.js';\r\n\r\nconst getRoughness = tslFn( ( inputs ) => {\r\n\r\n\tconst { roughness } = inputs;\r\n\r\n\tconst geometryRoughness = getGeometryRoughness();\r\n\r\n\tlet roughnessFactor = roughness.max( 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.\r\n\troughnessFactor = roughnessFactor.add( geometryRoughness );\r\n\troughnessFactor = roughnessFactor.min( 1.0 );\r\n\r\n\treturn roughnessFactor;\r\n\r\n} );\r\n\r\nexport default getRoughness;\r\n", "import { div } from '../../math/OperatorNode.js';\r\nimport { EPSILON } from '../../math/MathNode.js';\r\nimport { tslFn } from '../../shadernode/ShaderNode.js';\r\n\r\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\r\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\nconst V_GGX_SmithCorrelated = tslFn( ( { alpha, dotNL, dotNV } ) => {\r\n\r\n\tconst a2 = alpha.pow2();\r\n\r\n\tconst gv = dotNL.mul( a2.add( a2.oneMinus().mul( dotNV.pow2() ) ).sqrt() );\r\n\tconst gl = dotNV.mul( a2.add( a2.oneMinus().mul( dotNL.pow2() ) ).sqrt() );\r\n\r\n\treturn div( 0.5, gv.add( gl ).max( EPSILON ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'V_GGX_SmithCorrelated',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alpha', type: 'float' },\r\n\t\t{ name: 'dotNL', type: 'float' },\r\n\t\t{ name: 'dotNV', type: 'float' }\r\n\t]\r\n} ); // validated\r\n\r\nexport default V_GGX_SmithCorrelated;\r\n", "import { div } from '../../math/OperatorNode.js';\r\nimport { tslFn, vec3 } from '../../shadernode/ShaderNode.js';\r\n\r\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\r\n\r\nconst V_GGX_SmithCorrelated_Anisotropic = tslFn( ( { alphaT, alphaB, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } ) => {\r\n\r\n\tconst gv = dotNL.mul( vec3( alphaT.mul( dotTV ), alphaB.mul( dotBV ), dotNV ).length() );\r\n\tconst gl = dotNV.mul( vec3( alphaT.mul( dotTL ), alphaB.mul( dotBL ), dotNL ).length() );\r\n\tconst v = div( 0.5, gv.add( gl ) );\r\n\r\n\treturn v.saturate();\r\n\r\n} ).setLayout( {\r\n\tname: 'V_GGX_SmithCorrelated_Anisotropic',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alphaT', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'alphaB', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotTV', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotBV', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotTL', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotBL', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotNV', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotNL', type: 'float', qualifier: 'in' }\r\n\t]\r\n} );\r\n\r\nexport default V_GGX_SmithCorrelated_Anisotropic;\r\n", "import { tslFn } from '../../shadernode/ShaderNode.js';\r\n\r\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\r\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\r\n// alpha is \"roughness squared\" in Disney’s reparameterization\r\nconst D_GGX = tslFn( ( { alpha, dotNH } ) => {\r\n\r\n\tconst a2 = alpha.pow2();\r\n\r\n\tconst denom = dotNH.pow2().mul( a2.oneMinus() ).oneMinus(); // avoid alpha = 0 with dotNH = 1\r\n\r\n\treturn a2.div( denom.pow2() ).mul( 1 / Math.PI );\r\n\r\n} ).setLayout( {\r\n\tname: 'D_GGX',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alpha', type: 'float' },\r\n\t\t{ name: 'dotNH', type: 'float' }\r\n\t]\r\n} ); // validated\r\n\r\nexport default D_GGX;\r\n", "import { tslFn, float, vec3 } from '../../shadernode/ShaderNode.js';\r\n\r\nconst RECIPROCAL_PI = float( 1 / Math.PI );\r\n\r\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\r\n\r\nconst D_GGX_Anisotropic = tslFn( ( { alphaT, alphaB, dotNH, dotTH, dotBH } ) => {\r\n\r\n\tconst a2 = alphaT.mul( alphaB );\r\n\tconst v = vec3( alphaB.mul( dotTH ), alphaT.mul( dotBH ), a2.mul( dotNH ) );\r\n\tconst v2 = v.dot( v );\r\n\tconst w2 = a2.div( v2 );\r\n\r\n\treturn RECIPROCAL_PI.mul( a2.mul( w2.pow2() ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'D_GGX_Anisotropic',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alphaT', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'alphaB', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotNH', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotTH', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotBH', type: 'float', qualifier: 'in' }\r\n\t]\r\n} );\r\n\r\nexport default D_GGX_Anisotropic;\r\n", "import F_Schlick from './F_Schlick.js';\r\nimport V_GGX_SmithCorrelated from './V_GGX_SmithCorrelated.js';\r\nimport V_GGX_SmithCorrelated_Anisotropic from './V_GGX_SmithCorrelated_Anisotropic.js';\r\nimport D_GGX from './D_GGX.js';\r\nimport D_GGX_Anisotropic from './D_GGX_Anisotropic.js';\r\nimport { transformedNormalView } from '../../accessors/NormalNode.js';\r\nimport { positionViewDirection } from '../../accessors/PositionNode.js';\r\nimport { iridescence, alphaT, anisotropyT, anisotropyB } from '../../core/PropertyNode.js';\r\nimport { tslFn, defined } from '../../shadernode/ShaderNode.js';\r\n\r\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\r\nconst BRDF_GGX = tslFn( ( inputs ) => {\r\n\r\n\tconst { lightDirection, f0, f90, roughness, f, USE_IRIDESCENCE, USE_ANISOTROPY } = inputs;\r\n\r\n\tconst normalView = inputs.normalView || transformedNormalView;\r\n\r\n\tconst alpha = roughness.pow2(); // UE4's roughness\r\n\r\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\r\n\r\n\tconst dotNL = normalView.dot( lightDirection ).clamp();\r\n\tconst dotNV = normalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\r\n\tconst dotNH = normalView.dot( halfDir ).clamp();\r\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\r\n\r\n\tlet F = F_Schlick( { f0, f90, dotVH } );\r\n\tlet V, D;\r\n\r\n\tif ( defined( USE_IRIDESCENCE ) ) {\r\n\r\n\t\tF = iridescence.mix( F, f );\r\n\r\n\t}\r\n\r\n\tif ( defined( USE_ANISOTROPY ) ) {\r\n\r\n\t\tconst dotTL = anisotropyT.dot( lightDirection );\r\n\t\tconst dotTV = anisotropyT.dot( positionViewDirection );\r\n\t\tconst dotTH = anisotropyT.dot( halfDir );\r\n\t\tconst dotBL = anisotropyB.dot( lightDirection );\r\n\t\tconst dotBV = anisotropyB.dot( positionViewDirection );\r\n\t\tconst dotBH = anisotropyB.dot( halfDir );\r\n\r\n\t\tV = V_GGX_SmithCorrelated_Anisotropic( { alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } );\r\n\t\tD = D_GGX_Anisotropic( { alphaT, alphaB: alpha, dotNH, dotTH, dotBH } );\r\n\r\n\t} else {\r\n\r\n\t\tV = V_GGX_SmithCorrelated( { alpha, dotNL, dotNV } );\r\n\t\tD = D_GGX( { alpha, dotNH } );\r\n\r\n\t}\r\n\r\n\treturn F.mul( V ).mul( D );\r\n\r\n} ); // validated\r\n\r\nexport default BRDF_GGX;\r\n", "import { tslFn, vec2, vec4 } from '../../shadernode/ShaderNode.js';\r\n\r\n// Analytical approximation of the DFG LUT, one half of the\r\n// split-sum approximation used in indirect specular lighting.\r\n// via 'environmentBRDF' from \"Physically Based Shading on Mobile\"\r\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\r\nconst DFGApprox = tslFn( ( { roughness, dotNV } ) => {\r\n\r\n\tconst c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\r\n\r\n\tconst c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\r\n\r\n\tconst r = roughness.mul( c0 ).add( c1 );\r\n\r\n\tconst a004 = r.x.mul( r.x ).min( dotNV.mul( - 9.28 ).exp2() ).mul( r.x ).add( r.y );\r\n\r\n\tconst fab = vec2( - 1.04, 1.04 ).mul( a004 ).add( r.zw );\r\n\r\n\treturn fab;\r\n\r\n} ).setLayout( {\r\n\tname: 'DFGApprox',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'roughness', type: 'float' },\r\n\t\t{ name: 'dotNV', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport default DFGApprox;\r\n", "import DFGApprox from './DFGApprox.js';\r\nimport { tslFn } from '../../shadernode/ShaderNode.js';\r\n\r\nconst EnvironmentBRDF = tslFn( ( inputs ) => {\r\n\r\n\tconst { dotNV, specularColor, specularF90, roughness } = inputs;\r\n\r\n\tconst fab = DFGApprox( { dotNV, roughness } );\r\n\treturn specularColor.mul( fab.x ).add( specularF90.mul( fab.y ) );\r\n\r\n} );\r\n\r\nexport default EnvironmentBRDF;\r\n", "import { tslFn, vec3 } from '../../shadernode/ShaderNode.js';\r\n\r\nconst Schlick_to_F0 = tslFn( ( { f, f90, dotVH } ) => {\r\n\r\n\tconst x = dotVH.oneMinus().saturate();\r\n\tconst x2 = x.mul( x );\r\n\tconst x5 = x.mul( x2, x2 ).clamp( 0, .9999 );\r\n\r\n\treturn f.sub( vec3( f90 ).mul( x5 ) ).div( x5.oneMinus() );\r\n\r\n} ).setLayout( {\r\n\tname: 'Schlick_to_F0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'f', type: 'vec3' },\r\n\t\t{ name: 'f90', type: 'float' },\r\n\t\t{ name: 'dotVH', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport default Schlick_to_F0;\r\n", "import { transformedNormalView } from '../../accessors/NormalNode.js';\r\nimport { positionViewDirection } from '../../accessors/PositionNode.js';\r\nimport { sheen, sheenRoughness } from '../../core/PropertyNode.js';\r\nimport { tslFn, float } from '../../shadernode/ShaderNode.js';\r\n\r\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\r\nconst D_Charlie = tslFn( ( { roughness, dotNH } ) => {\r\n\r\n\tconst alpha = roughness.pow2();\r\n\r\n\t// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\"\r\n\tconst invAlpha = float( 1.0 ).div( alpha );\r\n\tconst cos2h = dotNH.pow2();\r\n\tconst sin2h = cos2h.oneMinus().max( 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16\r\n\r\n\treturn float( 2.0 ).add( invAlpha ).mul( sin2h.pow( invAlpha.mul( 0.5 ) ) ).div( 2.0 * Math.PI );\r\n\r\n} ).setLayout( {\r\n\tname: 'D_Charlie',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'roughness', type: 'float' },\r\n\t\t{ name: 'dotNH', type: 'float' }\r\n\t]\r\n} );\r\n\r\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\r\nconst V_Neubelt = tslFn( ( { dotNV, dotNL } ) => {\r\n\r\n\t// Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\r\n\treturn float( 1.0 ).div( float( 4.0 ).mul( dotNL.add( dotNV ).sub( dotNL.mul( dotNV ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'V_Neubelt',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'dotNV', type: 'float' },\r\n\t\t{ name: 'dotNL', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst BRDF_Sheen = tslFn( ( { lightDirection } ) => {\r\n\r\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\r\n\r\n\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\r\n\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp();\r\n\tconst dotNH = transformedNormalView.dot( halfDir ).clamp();\r\n\r\n\tconst D = D_Charlie( { roughness: sheenRoughness, dotNH } );\r\n\tconst V = V_Neubelt( { dotNV, dotNL } );\r\n\r\n\treturn sheen.mul( D ).mul( V );\r\n\r\n} );\r\n\r\nexport default BRDF_Sheen;\r\n", "import { tslFn, If, mat3, vec2, vec3 } from '../../shadernode/ShaderNode.js';\r\nimport { max } from '../../math/MathNode.js';\r\n\r\n// Rect Area Light\r\n\r\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\r\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\r\n// code: https://github.com/selfshadow/ltc_code/\r\n\r\nconst LTC_Uv = tslFn( ( { N, V, roughness } ) => {\r\n\r\n\tconst LUT_SIZE = 64.0;\r\n\tconst LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\r\n\tconst LUT_BIAS = 0.5 / LUT_SIZE;\r\n\r\n\tconst dotNV = N.dot( V ).saturate();\r\n\r\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\r\n\tconst uv = vec2( roughness, dotNV.oneMinus().sqrt() );\r\n\r\n\tuv.assign( uv.mul( LUT_SCALE ).add( LUT_BIAS ) );\r\n\r\n\treturn uv;\r\n\r\n} ).setLayout( {\r\n\tname: 'LTC_Uv',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'N', type: 'vec3' },\r\n\t\t{ name: 'V', type: 'vec3' },\r\n\t\t{ name: 'roughness', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst LTC_ClippedSphereFormFactor = tslFn( ( { f } ) => {\r\n\r\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\r\n\t// An approximation of the form factor of a horizon-clipped rectangle.\r\n\r\n\tconst l = f.length();\r\n\r\n\treturn max( l.mul( l ).add( f.z ).div( l.add( 1.0 ) ), 0 );\r\n\r\n} ).setLayout( {\r\n\tname: 'LTC_ClippedSphereFormFactor',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'f', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nconst LTC_EdgeVectorFormFactor = tslFn( ( { v1, v2 } ) => {\r\n\r\n\tconst x = v1.dot( v2 );\r\n\tconst y = x.abs().toVar();\r\n\r\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\r\n\tconst a = y.mul( 0.0145206 ).add( 0.4965155 ).mul( y ).add( 0.8543985 ).toVar();\r\n\tconst b = y.add( 4.1616724 ).mul( y ).add( 3.4175940 ).toVar();\r\n\tconst v = a.div( b );\r\n\r\n\tconst theta_sintheta = x.greaterThan( 0.0 ).cond( v, max( x.mul( x ).oneMinus(), 1e-7 ).inverseSqrt().mul( 0.5 ).sub( v ) );\r\n\r\n\treturn v1.cross( v2 ).mul( theta_sintheta );\r\n\r\n} ).setLayout( {\r\n\tname: 'LTC_EdgeVectorFormFactor',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v1', type: 'vec3' },\r\n\t\t{ name: 'v2', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nconst LTC_Evaluate = tslFn( ( { N, V, P, mInv, p0, p1, p2, p3 } ) => {\r\n\r\n\t// bail if point is on back side of plane of light\r\n\t// assumes ccw winding order of light vertices\r\n\tconst v1 = p1.sub( p0 ).toVar();\r\n\tconst v2 = p3.sub( p0 ).toVar();\r\n\r\n\tconst lightNormal = v1.cross( v2 );\r\n\tconst result = vec3().toVar();\r\n\r\n\tIf( lightNormal.dot( P.sub( p0 ) ).greaterThanEqual( 0.0 ), () => {\r\n\r\n\t\t// construct orthonormal basis around N\r\n\t\tconst T1 = V.sub( N.mul( V.dot( N ) ) ).normalize();\r\n\t\tconst T2 = N.cross( T1 ).negate(); // negated from paper; possibly due to a different handedness of world coordinate system\r\n\r\n\t\t// compute transform\r\n\t\tconst mat = mInv.mul( mat3( T1, T2, N ).transpose() ).toVar();\r\n\r\n\t\t// transform rect\r\n\t\t// & project rect onto sphere\r\n\t\tconst coords0 = mat.mul( p0.sub( P ) ).normalize().toVar();\r\n\t\tconst coords1 = mat.mul( p1.sub( P ) ).normalize().toVar();\r\n\t\tconst coords2 = mat.mul( p2.sub( P ) ).normalize().toVar();\r\n\t\tconst coords3 = mat.mul( p3.sub( P ) ).normalize().toVar();\r\n\r\n\t\t// calculate vector form factor\r\n\t\tconst vectorFormFactor = vec3( 0 ).toVar();\r\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords0, v2: coords1 } ) );\r\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords1, v2: coords2 } ) );\r\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords2, v2: coords3 } ) );\r\n\t\tvectorFormFactor.addAssign( LTC_EdgeVectorFormFactor( { v1: coords3, v2: coords0 } ) );\r\n\r\n\t\t// adjust for horizon clipping\r\n\t\tresult.assign( vec3( LTC_ClippedSphereFormFactor( { f: vectorFormFactor } ) ) );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'LTC_Evaluate',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'N', type: 'vec3' },\r\n\t\t{ name: 'V', type: 'vec3' },\r\n\t\t{ name: 'P', type: 'vec3' },\r\n\t\t{ name: 'mInv', type: 'mat3' },\r\n\t\t{ name: 'p0', type: 'vec3' },\r\n\t\t{ name: 'p1', type: 'vec3' },\r\n\t\t{ name: 'p2', type: 'vec3' },\r\n\t\t{ name: 'p3', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n\r\nexport { LTC_Evaluate, LTC_Uv };\r\n", "import BRDF_Lambert from './BSDF/BRDF_Lambert.js';\r\nimport BRDF_GGX from './BSDF/BRDF_GGX.js';\r\nimport DFGApprox from './BSDF/DFGApprox.js';\r\nimport EnvironmentBRDF from './BSDF/EnvironmentBRDF.js';\r\nimport F_Schlick from './BSDF/F_Schlick.js';\r\nimport Schlick_to_F0 from './BSDF/Schlick_to_F0.js';\r\nimport BRDF_Sheen from './BSDF/BRDF_Sheen.js';\r\nimport { LTC_Evaluate, LTC_Uv } from './BSDF/LTC.js';\r\nimport LightingModel from '../core/LightingModel.js';\r\nimport { diffuseColor, specularColor, specularF90, roughness, clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, ior, thickness, transmission, attenuationDistance, attenuationColor, dispersion } from '../core/PropertyNode.js';\r\nimport { transformedNormalView, transformedClearcoatNormalView, transformedNormalWorld } from '../accessors/NormalNode.js';\r\nimport { positionViewDirection, positionView, positionWorld } from '../accessors/PositionNode.js';\r\nimport { tslFn, float, vec2, vec3, vec4, mat3, If } from '../shadernode/ShaderNode.js';\r\nimport { cond } from '../math/CondNode.js';\r\nimport { mix, normalize, refract, length, clamp, log2, log, exp, smoothstep } from '../math/MathNode.js';\r\nimport { div } from '../math/OperatorNode.js';\r\nimport { cameraPosition, cameraProjectionMatrix, cameraViewMatrix } from '../accessors/CameraNode.js';\r\nimport { modelWorldMatrix } from '../accessors/ModelNode.js';\r\nimport { viewportResolution } from '../display/ViewportNode.js';\r\nimport { viewportMipTexture } from '../display/ViewportTextureNode.js';\r\nimport { loop } from '../utils/LoopNode.js';\r\n\r\n//\r\n// Transmission\r\n//\r\n\r\nconst getVolumeTransmissionRay = tslFn( ( [ n, v, thickness, ior, modelMatrix ] ) => {\r\n\r\n\t// Direction of refracted light.\r\n\tconst refractionVector = vec3( refract( v.negate(), normalize( n ), div( 1.0, ior ) ) );\r\n\r\n\t// Compute rotation-independant scaling of the model matrix.\r\n\tconst modelScale = vec3(\r\n\t\tlength( modelMatrix[ 0 ].xyz ),\r\n\t\tlength( modelMatrix[ 1 ].xyz ),\r\n\t\tlength( modelMatrix[ 2 ].xyz )\r\n\t);\r\n\r\n\t// The thickness is specified in local space.\r\n\treturn normalize( refractionVector ).mul( thickness.mul( modelScale ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'getVolumeTransmissionRay',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'n', type: 'vec3' },\r\n\t\t{ name: 'v', type: 'vec3' },\r\n\t\t{ name: 'thickness', type: 'float' },\r\n\t\t{ name: 'ior', type: 'float' },\r\n\t\t{ name: 'modelMatrix', type: 'mat4' }\r\n\t]\r\n} );\r\n\r\nconst applyIorToRoughness = tslFn( ( [ roughness, ior ] ) => {\r\n\r\n\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\r\n\t// an IOR of 1.5 results in the default amount of microfacet refraction.\r\n\treturn roughness.mul( clamp( ior.mul( 2.0 ).sub( 2.0 ), 0.0, 1.0 ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'applyIorToRoughness',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'roughness', type: 'float' },\r\n\t\t{ name: 'ior', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst singleViewportMipTexture = viewportMipTexture();\r\n\r\nconst getTransmissionSample = tslFn( ( [ fragCoord, roughness, ior ] ) => {\r\n\r\n\tconst transmissionSample = singleViewportMipTexture.uv( fragCoord );\r\n\t//const transmissionSample = viewportMipTexture( fragCoord );\r\n\r\n\tconst lod = log2( float( viewportResolution.x ) ).mul( applyIorToRoughness( roughness, ior ) );\r\n\r\n\treturn transmissionSample.bicubic( lod );\r\n\r\n} );\r\n\r\nconst volumeAttenuation = tslFn( ( [ transmissionDistance, attenuationColor, attenuationDistance ] ) => {\r\n\r\n\tIf( attenuationDistance.notEqual( 0 ), () => {\r\n\r\n\t\t// Compute light attenuation using Beer's law.\r\n\t\tconst attenuationCoefficient = log( attenuationColor ).negate().div( attenuationDistance );\r\n\t\tconst transmittance = exp( attenuationCoefficient.negate().mul( transmissionDistance ) );\r\n\r\n\t\treturn transmittance;\r\n\r\n\t} );\r\n\r\n\t// Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.\r\n\treturn vec3( 1.0 );\r\n\r\n} ).setLayout( {\r\n\tname: 'volumeAttenuation',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'transmissionDistance', type: 'float' },\r\n\t\t{ name: 'attenuationColor', type: 'vec3' },\r\n\t\t{ name: 'attenuationDistance', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst getIBLVolumeRefraction = tslFn( ( [ n, v, roughness, diffuseColor, specularColor, specularF90, position, modelMatrix, viewMatrix, projMatrix, ior, thickness, attenuationColor, attenuationDistance, dispersion ] ) => {\r\n\r\n\tlet transmittedLight, transmittance;\r\n\r\n\tif ( dispersion ) {\r\n\r\n\t\ttransmittedLight = vec4().toVar();\r\n\t\ttransmittance = vec3().toVar();\r\n\r\n\t\tconst halfSpread = ior.sub( 1.0 ).mul( dispersion.mul( 0.025 ) );\r\n\t\tconst iors = vec3( ior.sub( halfSpread ), ior, ior.add( halfSpread ) );\r\n\r\n\t\tloop( { start: 0, end: 3 }, ( { i } ) => {\r\n\r\n\t\t\tconst ior = iors.element( i );\r\n\r\n\t\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\r\n\t\t\tconst refractedRayExit = position.add( transmissionRay );\r\n\r\n\t\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\r\n\t\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\r\n\t\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\r\n\t\t\trefractionCoords.addAssign( 1.0 );\r\n\t\t\trefractionCoords.divAssign( 2.0 );\r\n\t\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\r\n\r\n\t\t\t// Sample framebuffer to get pixel the refracted ray hits.\r\n\t\t\tconst transmissionSample = getTransmissionSample( refractionCoords, roughness, ior );\r\n\r\n\t\t\ttransmittedLight.element( i ).assign( transmissionSample.element( i ) );\r\n\t\t\ttransmittedLight.a.addAssign( transmissionSample.a );\r\n\r\n\t\t\ttransmittance.element( i ).assign( diffuseColor.element( i ).mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ).element( i ) ) );\r\n\r\n\t\t} );\r\n\r\n\t\ttransmittedLight.a.divAssign( 3.0 );\r\n\r\n\t} else {\r\n\r\n\t\tconst transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\r\n\t\tconst refractedRayExit = position.add( transmissionRay );\r\n\r\n\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\r\n\t\tconst ndcPos = projMatrix.mul( viewMatrix.mul( vec4( refractedRayExit, 1.0 ) ) );\r\n\t\tconst refractionCoords = vec2( ndcPos.xy.div( ndcPos.w ) ).toVar();\r\n\t\trefractionCoords.addAssign( 1.0 );\r\n\t\trefractionCoords.divAssign( 2.0 );\r\n\t\trefractionCoords.assign( vec2( refractionCoords.x, refractionCoords.y.oneMinus() ) ); // webgpu\r\n\r\n\t\t// Sample framebuffer to get pixel the refracted ray hits.\r\n\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\r\n\t\ttransmittance = diffuseColor.mul( volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance ) );\r\n\r\n\t}\r\n\r\n\tconst attenuatedColor = transmittance.rgb.mul( transmittedLight.rgb );\r\n\tconst dotNV = n.dot( v ).clamp();\r\n\r\n\t// Get the specular component.\r\n\tconst F = vec3( EnvironmentBRDF( { // n, v, specularColor, specularF90, roughness\r\n\t\tdotNV,\r\n\t\tspecularColor,\r\n\t\tspecularF90,\r\n\t\troughness\r\n\t} ) );\r\n\r\n\t// As less light is transmitted, the opacity should be increased. This simple approximation does a decent job\r\n\t// of modulating a CSS background, and has no effect when the buffer is opaque, due to a solid object or clear color.\r\n\tconst transmittanceFactor = transmittance.r.add( transmittance.g, transmittance.b ).div( 3.0 );\r\n\r\n\treturn vec4( F.oneMinus().mul( attenuatedColor ), transmittedLight.a.oneMinus().mul( transmittanceFactor ).oneMinus() );\r\n\r\n} );\r\n\r\n//\r\n// Iridescence\r\n//\r\n\r\n// XYZ to linear-sRGB color space\r\nconst XYZ_TO_REC709 = mat3(\r\n\t3.2404542, - 0.9692660, 0.0556434,\r\n\t- 1.5371385, 1.8760108, - 0.2040259,\r\n\t- 0.4985314, 0.0415560, 1.0572252\r\n);\r\n\r\n// Assume air interface for top\r\n// Note: We don't handle the case fresnel0 == 1\r\nconst Fresnel0ToIor = ( fresnel0 ) => {\r\n\r\n\tconst sqrtF0 = fresnel0.sqrt();\r\n\treturn vec3( 1.0 ).add( sqrtF0 ).div( vec3( 1.0 ).sub( sqrtF0 ) );\r\n\r\n};\r\n\r\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\r\nconst IorToFresnel0 = ( transmittedIor, incidentIor ) => {\r\n\r\n\treturn transmittedIor.sub( incidentIor ).div( transmittedIor.add( incidentIor ) ).pow2();\r\n\r\n};\r\n\r\n// Fresnel equations for dielectric/dielectric interfaces.\r\n// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\r\n// Evaluation XYZ sensitivity curves in Fourier space\r\nconst evalSensitivity = ( OPD, shift ) => {\r\n\r\n\tconst phase = OPD.mul( 2.0 * Math.PI * 1.0e-9 );\r\n\tconst val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\r\n\tconst pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\r\n\tconst VAR = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\r\n\r\n\tconst x = float( 9.7470e-14 * Math.sqrt( 2.0 * Math.PI * 4.5282e+09 ) ).mul( phase.mul( 2.2399e+06 ).add( shift.x ).cos() ).mul( phase.pow2().mul( - 4.5282e+09 ).exp() );\r\n\r\n\tlet xyz = val.mul( VAR.mul( 2.0 * Math.PI ).sqrt() ).mul( pos.mul( phase ).add( shift ).cos() ).mul( phase.pow2().negate().mul( VAR ).exp() );\r\n\txyz = vec3( xyz.x.add( x ), xyz.y, xyz.z ).div( 1.0685e-7 );\r\n\r\n\tconst rgb = XYZ_TO_REC709.mul( xyz );\r\n\r\n\treturn rgb;\r\n\r\n};\r\n\r\nconst evalIridescence = tslFn( ( { outsideIOR, eta2, cosTheta1, thinFilmThickness, baseF0 } ) => {\r\n\r\n\t// Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\r\n\tconst iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\r\n\t// Evaluate the cosTheta on the base layer (Snell law)\r\n\tconst sinTheta2Sq = outsideIOR.div( iridescenceIOR ).pow2().mul( float( 1 ).sub( cosTheta1.pow2() ) );\r\n\r\n\t// Handle TIR:\r\n\tconst cosTheta2Sq = float( 1 ).sub( sinTheta2Sq );\r\n\t/*if ( cosTheta2Sq < 0.0 ) {\r\n\r\n\t\t\treturn vec3( 1.0 );\r\n\r\n\t}*/\r\n\r\n\tconst cosTheta2 = cosTheta2Sq.sqrt();\r\n\r\n\t// First interface\r\n\tconst R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\r\n\tconst R12 = F_Schlick( { f0: R0, f90: 1.0, dotVH: cosTheta1 } );\r\n\t//const R21 = R12;\r\n\tconst T121 = R12.oneMinus();\r\n\tconst phi12 = iridescenceIOR.lessThan( outsideIOR ).cond( Math.PI, 0.0 );\r\n\tconst phi21 = float( Math.PI ).sub( phi12 );\r\n\r\n\t// Second interface\r\n\tconst baseIOR = Fresnel0ToIor( baseF0.clamp( 0.0, 0.9999 ) ); // guard against 1.0\r\n\tconst R1 = IorToFresnel0( baseIOR, iridescenceIOR.toVec3() );\r\n\tconst R23 = F_Schlick( { f0: R1, f90: 1.0, dotVH: cosTheta2 } );\r\n\tconst phi23 = vec3(\r\n\t\tbaseIOR.x.lessThan( iridescenceIOR ).cond( Math.PI, 0.0 ),\r\n\t\tbaseIOR.y.lessThan( iridescenceIOR ).cond( Math.PI, 0.0 ),\r\n\t\tbaseIOR.z.lessThan( iridescenceIOR ).cond( Math.PI, 0.0 )\r\n\t);\r\n\r\n\t// Phase shift\r\n\tconst OPD = iridescenceIOR.mul( thinFilmThickness, cosTheta2, 2.0 );\r\n\tconst phi = vec3( phi21 ).add( phi23 );\r\n\r\n\t// Compound terms\r\n\tconst R123 = R12.mul( R23 ).clamp( 1e-5, 0.9999 );\r\n\tconst r123 = R123.sqrt();\r\n\tconst Rs = T121.pow2().mul( R23 ).div( vec3( 1.0 ).sub( R123 ) );\r\n\r\n\t// Reflectance term for m = 0 (DC term amplitude)\r\n\tconst C0 = R12.add( Rs );\r\n\tlet I = C0;\r\n\r\n\t// Reflectance term for m > 0 (pairs of diracs)\r\n\tlet Cm = Rs.sub( T121 );\r\n\tfor ( let m = 1; m <= 2; ++ m ) {\r\n\r\n\t\tCm = Cm.mul( r123 );\r\n\t\tconst Sm = evalSensitivity( float( m ).mul( OPD ), float( m ).mul( phi ) ).mul( 2.0 );\r\n\t\tI = I.add( Cm.mul( Sm ) );\r\n\r\n\t}\r\n\r\n\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\r\n\treturn I.max( vec3( 0.0 ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'evalIridescence',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'outsideIOR', type: 'float' },\r\n\t\t{ name: 'eta2', type: 'float' },\r\n\t\t{ name: 'cosTheta1', type: 'float' },\r\n\t\t{ name: 'thinFilmThickness', type: 'float' },\r\n\t\t{ name: 'baseF0', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n//\r\n//\tSheen\r\n//\r\n\r\n// This is a curve-fit approxmation to the \"Charlie sheen\" BRDF integrated over the hemisphere from\r\n// Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\". The analysis can be found\r\n// in the Sheen section of https://drive.google.com/file/d/1T0D1VSyR4AllqIJTQAraEIzjlb5h4FKH/view?usp=sharing\r\nconst IBLSheenBRDF = tslFn( ( { normal, viewDir, roughness } ) => {\r\n\r\n\tconst dotNV = normal.dot( viewDir ).saturate();\r\n\r\n\tconst r2 = roughness.pow2();\r\n\r\n\tconst a = cond(\r\n\t\troughness.lessThan( 0.25 ),\r\n\t\tfloat( - 339.2 ).mul( r2 ).add( float( 161.4 ).mul( roughness ) ).sub( 25.9 ),\r\n\t\tfloat( - 8.48 ).mul( r2 ).add( float( 14.3 ).mul( roughness ) ).sub( 9.95 )\r\n\t);\r\n\r\n\tconst b = cond(\r\n\t\troughness.lessThan( 0.25 ),\r\n\t\tfloat( 44.0 ).mul( r2 ).sub( float( 23.7 ).mul( roughness ) ).add( 3.26 ),\r\n\t\tfloat( 1.97 ).mul( r2 ).sub( float( 3.27 ).mul( roughness ) ).add( 0.72 )\r\n\t);\r\n\r\n\tconst DG = cond( roughness.lessThan( 0.25 ), 0.0, float( 0.1 ).mul( roughness ).sub( 0.025 ) ).add( a.mul( dotNV ).add( b ).exp() );\r\n\r\n\treturn DG.mul( 1.0 / Math.PI ).saturate();\r\n\r\n} );\r\n\r\nconst clearcoatF0 = vec3( 0.04 );\r\nconst clearcoatF90 = float( 1 );\r\n\r\n//\r\n\r\nclass PhysicalLightingModel extends LightingModel {\r\n\r\n\tconstructor( clearcoat = false, sheen = false, iridescence = false, anisotropy = false, transmission = false, dispersion = false ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.clearcoat = clearcoat;\r\n\t\tthis.sheen = sheen;\r\n\t\tthis.iridescence = iridescence;\r\n\t\tthis.anisotropy = anisotropy;\r\n\t\tthis.transmission = transmission;\r\n\t\tthis.dispersion = dispersion;\r\n\r\n\t\tthis.clearcoatRadiance = null;\r\n\t\tthis.clearcoatSpecularDirect = null;\r\n\t\tthis.clearcoatSpecularIndirect = null;\r\n\t\tthis.sheenSpecularDirect = null;\r\n\t\tthis.sheenSpecularIndirect = null;\r\n\t\tthis.iridescenceFresnel = null;\r\n\t\tthis.iridescenceF0 = null;\r\n\r\n\t}\r\n\r\n\tstart( context ) {\r\n\r\n\t\tif ( this.clearcoat === true ) {\r\n\r\n\t\t\tthis.clearcoatRadiance = vec3().temp( 'clearcoatRadiance' );\r\n\t\t\tthis.clearcoatSpecularDirect = vec3().temp( 'clearcoatSpecularDirect' );\r\n\t\t\tthis.clearcoatSpecularIndirect = vec3().temp( 'clearcoatSpecularIndirect' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.sheen === true ) {\r\n\r\n\t\t\tthis.sheenSpecularDirect = vec3().temp( 'sheenSpecularDirect' );\r\n\t\t\tthis.sheenSpecularIndirect = vec3().temp( 'sheenSpecularIndirect' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.iridescence === true ) {\r\n\r\n\t\t\tconst dotNVi = transformedNormalView.dot( positionViewDirection ).clamp();\r\n\r\n\t\t\tthis.iridescenceFresnel = evalIridescence( {\r\n\t\t\t\toutsideIOR: float( 1.0 ),\r\n\t\t\t\teta2: iridescenceIOR,\r\n\t\t\t\tcosTheta1: dotNVi,\r\n\t\t\t\tthinFilmThickness: iridescenceThickness,\r\n\t\t\t\tbaseF0: specularColor\r\n\t\t\t} );\r\n\r\n\t\t\tthis.iridescenceF0 = Schlick_to_F0( { f: this.iridescenceFresnel, f90: 1.0, dotVH: dotNVi } );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.transmission === true ) {\r\n\r\n\t\t\tconst position = positionWorld;\r\n\t\t\tconst v = cameraPosition.sub( positionWorld ).normalize(); // TODO: Create Node for this, same issue in MaterialX\r\n\t\t\tconst n = transformedNormalWorld;\r\n\r\n\t\t\tcontext.backdrop = getIBLVolumeRefraction(\r\n\t\t\t\tn,\r\n\t\t\t\tv,\r\n\t\t\t\troughness,\r\n\t\t\t\tdiffuseColor,\r\n\t\t\t\tspecularColor,\r\n\t\t\t\tspecularF90, // specularF90\r\n\t\t\t\tposition, // positionWorld\r\n\t\t\t\tmodelWorldMatrix, // modelMatrix\r\n\t\t\t\tcameraViewMatrix, // viewMatrix\r\n\t\t\t\tcameraProjectionMatrix, // projMatrix\r\n\t\t\t\tior,\r\n\t\t\t\tthickness,\r\n\t\t\t\tattenuationColor,\r\n\t\t\t\tattenuationDistance,\r\n\t\t\t\tthis.dispersion ? dispersion : null\r\n\t\t\t);\r\n\r\n\t\t\tcontext.backdropAlpha = transmission;\r\n\r\n\t\t\tdiffuseColor.a.mulAssign( mix( 1, context.backdrop.a, transmission ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Fdez-Agüera's \"Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting\"\r\n\t// Approximates multiscattering in order to preserve energy.\r\n\t// http://www.jcgt.org/published/0008/01/03/\r\n\r\n\tcomputeMultiscattering( singleScatter, multiScatter, specularF90 ) {\r\n\r\n\t\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\r\n\r\n\t\tconst fab = DFGApprox( { roughness, dotNV } );\r\n\r\n\t\tconst Fr = this.iridescenceF0 ? iridescence.mix( specularColor, this.iridescenceF0 ) : specularColor;\r\n\r\n\t\tconst FssEss = Fr.mul( fab.x ).add( specularF90.mul( fab.y ) );\r\n\r\n\t\tconst Ess = fab.x.add( fab.y );\r\n\t\tconst Ems = Ess.oneMinus();\r\n\r\n\t\tconst Favg = specularColor.add( specularColor.oneMinus().mul( 0.047619 ) ); // 1/21\r\n\t\tconst Fms = FssEss.mul( Favg ).div( Ems.mul( Favg ).oneMinus() );\r\n\r\n\t\tsingleScatter.addAssign( FssEss );\r\n\t\tmultiScatter.addAssign( Fms.mul( Ems ) );\r\n\r\n\t}\r\n\r\n\tdirect( { lightDirection, lightColor, reflectedLight } ) {\r\n\r\n\t\tconst dotNL = transformedNormalView.dot( lightDirection ).clamp();\r\n\t\tconst irradiance = dotNL.mul( lightColor );\r\n\r\n\t\tif ( this.sheen === true ) {\r\n\r\n\t\t\tthis.sheenSpecularDirect.addAssign( irradiance.mul( BRDF_Sheen( { lightDirection } ) ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoat === true ) {\r\n\r\n\t\t\tconst dotNLcc = transformedClearcoatNormalView.dot( lightDirection ).clamp();\r\n\t\t\tconst ccIrradiance = dotNLcc.mul( lightColor );\r\n\r\n\t\t\tthis.clearcoatSpecularDirect.addAssign( ccIrradiance.mul( BRDF_GGX( { lightDirection, f0: clearcoatF0, f90: clearcoatF90, roughness: clearcoatRoughness, normalView: transformedClearcoatNormalView } ) ) );\r\n\r\n\t\t}\r\n\r\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\r\n\r\n\t\treflectedLight.directSpecular.addAssign( irradiance.mul( BRDF_GGX( { lightDirection, f0: specularColor, f90: 1, roughness, iridescence: this.iridescence, f: this.iridescenceFresnel, USE_IRIDESCENCE: this.iridescence, USE_ANISOTROPY: this.anisotropy } ) ) );\r\n\r\n\t}\r\n\r\n\tdirectRectArea( { lightColor, lightPosition, halfWidth, halfHeight, reflectedLight, ltc_1, ltc_2 } ) {\r\n\r\n\t\tconst p0 = lightPosition.add( halfWidth ).sub( halfHeight ); // counterclockwise; light shines in local neg z direction\r\n\t\tconst p1 = lightPosition.sub( halfWidth ).sub( halfHeight );\r\n\t\tconst p2 = lightPosition.sub( halfWidth ).add( halfHeight );\r\n\t\tconst p3 = lightPosition.add( halfWidth ).add( halfHeight );\r\n\r\n\t\tconst N = transformedNormalView;\r\n\t\tconst V = positionViewDirection;\r\n\t\tconst P = positionView.toVar();\r\n\r\n\t\tconst uv = LTC_Uv( { N, V, roughness } );\r\n\r\n\t\tconst t1 = ltc_1.uv( uv ).toVar();\r\n\t\tconst t2 = ltc_2.uv( uv ).toVar();\r\n\r\n\t\tconst mInv = mat3(\r\n\t\t\tvec3( t1.x, 0, t1.y ),\r\n\t\t\tvec3( 0, 1, 0 ),\r\n\t\t\tvec3( t1.z, 0, t1.w )\r\n\t\t).toVar();\r\n\r\n\t\t// LTC Fresnel Approximation by Stephen Hill\r\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\r\n\t\tconst fresnel = specularColor.mul( t2.x ).add( specularColor.oneMinus().mul( t2.y ) ).toVar();\r\n\r\n\t\treflectedLight.directSpecular.addAssign( lightColor.mul( fresnel ).mul( LTC_Evaluate( { N, V, P, mInv, p0, p1, p2, p3 } ) ) );\r\n\r\n\t\treflectedLight.directDiffuse.addAssign( lightColor.mul( diffuseColor ).mul( LTC_Evaluate( { N, V, P, mInv: mat3( 1, 0, 0, 0, 1, 0, 0, 0, 1 ), p0, p1, p2, p3 } ) ) );\r\n\r\n\t}\r\n\r\n\tindirect( context, stack, builder ) {\r\n\r\n\t\tthis.indirectDiffuse( context, stack, builder );\r\n\t\tthis.indirectSpecular( context, stack, builder );\r\n\t\tthis.ambientOcclusion( context, stack, builder );\r\n\r\n\t}\r\n\r\n\tindirectDiffuse( { irradiance, reflectedLight } ) {\r\n\r\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\r\n\r\n\t}\r\n\r\n\tindirectSpecular( { radiance, iblIrradiance, reflectedLight } ) {\r\n\r\n\t\tif ( this.sheen === true ) {\r\n\r\n\t\t\tthis.sheenSpecularIndirect.addAssign( iblIrradiance.mul(\r\n\t\t\t\tsheen,\r\n\t\t\t\tIBLSheenBRDF( {\r\n\t\t\t\t\tnormal: transformedNormalView,\r\n\t\t\t\t\tviewDir: positionViewDirection,\r\n\t\t\t\t\troughness: sheenRoughness\r\n\t\t\t\t} )\r\n\t\t\t) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoat === true ) {\r\n\r\n\t\t\tconst dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();\r\n\r\n\t\t\tconst clearcoatEnv = EnvironmentBRDF( {\r\n\t\t\t\tdotNV: dotNVcc,\r\n\t\t\t\tspecularColor: clearcoatF0,\r\n\t\t\t\tspecularF90: clearcoatF90,\r\n\t\t\t\troughness: clearcoatRoughness\r\n\t\t\t} );\r\n\r\n\t\t\tthis.clearcoatSpecularIndirect.addAssign( this.clearcoatRadiance.mul( clearcoatEnv ) );\r\n\r\n\t\t}\r\n\r\n\t\t// Both indirect specular and indirect diffuse light accumulate here\r\n\r\n\t\tconst singleScattering = vec3().temp( 'singleScattering' );\r\n\t\tconst multiScattering = vec3().temp( 'multiScattering' );\r\n\t\tconst cosineWeightedIrradiance = iblIrradiance.mul( 1 / Math.PI );\r\n\r\n\t\tthis.computeMultiscattering( singleScattering, multiScattering, specularF90 );\r\n\r\n\t\tconst totalScattering = singleScattering.add( multiScattering );\r\n\r\n\t\tconst diffuse = diffuseColor.mul( totalScattering.r.max( totalScattering.g ).max( totalScattering.b ).oneMinus() );\r\n\r\n\t\treflectedLight.indirectSpecular.addAssign( radiance.mul( singleScattering ) );\r\n\t\treflectedLight.indirectSpecular.addAssign( multiScattering.mul( cosineWeightedIrradiance ) );\r\n\r\n\t\treflectedLight.indirectDiffuse.addAssign( diffuse.mul( cosineWeightedIrradiance ) );\r\n\r\n\t}\r\n\r\n\tambientOcclusion( { ambientOcclusion, reflectedLight } ) {\r\n\r\n\t\tconst dotNV = transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\r\n\r\n\t\tconst aoNV = dotNV.add( ambientOcclusion );\r\n\t\tconst aoExp = roughness.mul( - 16.0 ).oneMinus().negate().exp2();\r\n\r\n\t\tconst aoNode = ambientOcclusion.sub( aoNV.pow( aoExp ).oneMinus() ).clamp();\r\n\r\n\t\tif ( this.clearcoat === true ) {\r\n\r\n\t\t\tthis.clearcoatSpecularIndirect.mulAssign( ambientOcclusion );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.sheen === true ) {\r\n\r\n\t\t\tthis.sheenSpecularIndirect.mulAssign( ambientOcclusion );\r\n\r\n\t\t}\r\n\r\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\r\n\t\treflectedLight.indirectSpecular.mulAssign( aoNode );\r\n\r\n\t}\r\n\r\n\tfinish( context ) {\r\n\r\n\t\tconst { outgoingLight } = context;\r\n\r\n\t\tif ( this.clearcoat === true ) {\r\n\r\n\t\t\tconst dotNVcc = transformedClearcoatNormalView.dot( positionViewDirection ).clamp();\r\n\r\n\t\t\tconst Fcc = F_Schlick( {\r\n\t\t\t\tdotVH: dotNVcc,\r\n\t\t\t\tf0: clearcoatF0,\r\n\t\t\t\tf90: clearcoatF90\r\n\t\t\t} );\r\n\r\n\t\t\tconst clearcoatLight = outgoingLight.mul( clearcoat.mul( Fcc ).oneMinus() ).add( this.clearcoatSpecularDirect.add( this.clearcoatSpecularIndirect ).mul( clearcoat ) );\r\n\r\n\t\t\toutgoingLight.assign( clearcoatLight );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.sheen === true ) {\r\n\r\n\t\t\tconst sheenEnergyComp = sheen.r.max( sheen.g ).max( sheen.b ).mul( 0.157 ).oneMinus();\r\n\t\t\tconst sheenLight = outgoingLight.mul( sheenEnergyComp ).add( this.sheenSpecularDirect, this.sheenSpecularIndirect );\r\n\r\n\t\t\toutgoingLight.assign( sheenLight );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PhysicalLightingModel;\r\n", "import { TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\nclass MeshStandardMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshStandardMaterial = true;\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.type = 'MeshStandardMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.roughness = 1.0;\r\n\t\tthis.metalness = 0.0;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.roughnessMap = null;\r\n\r\n\t\tthis.metalnessMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapRotation = new Euler();\r\n\t\tthis.envMapIntensity = 1.0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.roughness = source.roughness;\r\n\t\tthis.metalness = source.metalness;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.roughnessMap = source.roughnessMap;\r\n\r\n\t\tthis.metalnessMap = source.metalnessMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapRotation.copy( source.envMapRotation );\r\n\t\tthis.envMapIntensity = source.envMapIntensity;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshStandardMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { diffuseColor, metalness, roughness, specularColor, specularF90 } from '../core/PropertyNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { materialRoughness, materialMetalness } from '../accessors/MaterialNode.js';\r\nimport getRoughness from '../functions/material/getRoughness.js';\r\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\r\nimport EnvironmentNode from '../lighting/EnvironmentNode.js';\r\nimport { float, vec3, vec4 } from '../shadernode/ShaderNode.js';\r\n\r\nimport { MeshStandardMaterial } from '../../materials/MeshStandardMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshStandardMaterial();\r\n\r\nclass MeshStandardNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshStandardNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.emissiveNode = null;\r\n\r\n\t\tthis.metalnessNode = null;\r\n\t\tthis.roughnessNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupEnvironment( builder ) {\r\n\r\n\t\tconst envNode = super.setupEnvironment( builder );\r\n\r\n\t\treturn envNode ? new EnvironmentNode( envNode ) : null;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new PhysicalLightingModel();\r\n\r\n\t}\r\n\r\n\tsetupSpecular() {\r\n\r\n\t\tconst specularColorNode = mix( vec3( 0.04 ), diffuseColor.rgb, metalness );\r\n\r\n\t\tspecularColor.assign( specularColorNode );\r\n\t\tspecularF90.assign( 1.0 );\r\n\r\n\t}\r\n\r\n\tsetupVariants() {\r\n\r\n\t\t// METALNESS\r\n\r\n\t\tconst metalnessNode = this.metalnessNode ? float( this.metalnessNode ) : materialMetalness;\r\n\r\n\t\tmetalness.assign( metalnessNode );\r\n\r\n\t\t// ROUGHNESS\r\n\r\n\t\tlet roughnessNode = this.roughnessNode ? float( this.roughnessNode ) : materialRoughness;\r\n\t\troughnessNode = getRoughness( { roughness: roughnessNode } );\r\n\r\n\t\troughness.assign( roughnessNode );\r\n\r\n\t\t// SPECULAR COLOR\r\n\r\n\t\tthis.setupSpecular();\r\n\r\n\t\t// DIFFUSE COLOR\r\n\r\n\t\tdiffuseColor.assign( vec4( diffuseColor.rgb.mul( metalnessNode.oneMinus() ), diffuseColor.a ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.emissiveNode = source.emissiveNode;\r\n\r\n\t\tthis.metalnessNode = source.metalnessNode;\r\n\t\tthis.roughnessNode = source.roughnessNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshStandardNodeMaterial;\r\n\r\naddNodeMaterial( 'MeshStandardNodeMaterial', MeshStandardNodeMaterial );\r\n", "import { Vector2 } from '../math/Vector2.js';\r\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\r\nimport { Color } from '../math/Color.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshPhysicalMaterial = true;\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.type = 'MeshPhysicalMaterial';\r\n\r\n\t\tthis.anisotropyRotation = 0;\r\n\t\tthis.anisotropyMap = null;\r\n\r\n\t\tthis.clearcoatMap = null;\r\n\t\tthis.clearcoatRoughness = 0.0;\r\n\t\tthis.clearcoatRoughnessMap = null;\r\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\r\n\t\tthis.clearcoatNormalMap = null;\r\n\r\n\t\tthis.ior = 1.5;\r\n\r\n\t\tObject.defineProperty( this, 'reflectivity', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn ( MathUtils.clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( reflectivity ) {\r\n\r\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.iridescenceMap = null;\r\n\t\tthis.iridescenceIOR = 1.3;\r\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\r\n\t\tthis.iridescenceThicknessMap = null;\r\n\r\n\t\tthis.sheenColor = new Color( 0x000000 );\r\n\t\tthis.sheenColorMap = null;\r\n\t\tthis.sheenRoughness = 1.0;\r\n\t\tthis.sheenRoughnessMap = null;\r\n\r\n\t\tthis.transmissionMap = null;\r\n\r\n\t\tthis.thickness = 0;\r\n\t\tthis.thicknessMap = null;\r\n\t\tthis.attenuationDistance = Infinity;\r\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\r\n\r\n\t\tthis.specularIntensity = 1.0;\r\n\t\tthis.specularIntensityMap = null;\r\n\t\tthis.specularColor = new Color( 1, 1, 1 );\r\n\t\tthis.specularColorMap = null;\r\n\r\n\t\tthis._anisotropy = 0;\r\n\t\tthis._clearcoat = 0;\r\n\t\tthis._dispersion = 0;\r\n\t\tthis._iridescence = 0;\r\n\t\tthis._sheen = 0.0;\r\n\t\tthis._transmission = 0;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tget anisotropy() {\r\n\r\n\t\treturn this._anisotropy;\r\n\r\n\t}\r\n\r\n\tset anisotropy( value ) {\r\n\r\n\t\tif ( this._anisotropy > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._anisotropy = value;\r\n\r\n\t}\r\n\r\n\tget clearcoat() {\r\n\r\n\t\treturn this._clearcoat;\r\n\r\n\t}\r\n\r\n\tset clearcoat( value ) {\r\n\r\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._clearcoat = value;\r\n\r\n\t}\r\n\r\n\tget iridescence() {\r\n\r\n\t\treturn this._iridescence;\r\n\r\n\t}\r\n\r\n\tset iridescence( value ) {\r\n\r\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._iridescence = value;\r\n\r\n\t}\r\n\r\n\tget dispersion() {\r\n\r\n\t\treturn this._dispersion;\r\n\r\n\t}\r\n\r\n\tset dispersion( value ) {\r\n\r\n\t\tif ( this._dispersion > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._dispersion = value;\r\n\r\n\t}\r\n\r\n\tget sheen() {\r\n\r\n\t\treturn this._sheen;\r\n\r\n\t}\r\n\r\n\tset sheen( value ) {\r\n\r\n\t\tif ( this._sheen > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._sheen = value;\r\n\r\n\t}\r\n\r\n\tget transmission() {\r\n\r\n\t\treturn this._transmission;\r\n\r\n\t}\r\n\r\n\tset transmission( value ) {\r\n\r\n\t\tif ( this._transmission > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._transmission = value;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.anisotropy = source.anisotropy;\r\n\t\tthis.anisotropyRotation = source.anisotropyRotation;\r\n\t\tthis.anisotropyMap = source.anisotropyMap;\r\n\r\n\t\tthis.clearcoat = source.clearcoat;\r\n\t\tthis.clearcoatMap = source.clearcoatMap;\r\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\r\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\r\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\r\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\r\n\r\n\t\tthis.dispersion = source.dispersion;\r\n\t\tthis.ior = source.ior;\r\n\r\n\t\tthis.iridescence = source.iridescence;\r\n\t\tthis.iridescenceMap = source.iridescenceMap;\r\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\r\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\r\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\r\n\r\n\t\tthis.sheen = source.sheen;\r\n\t\tthis.sheenColor.copy( source.sheenColor );\r\n\t\tthis.sheenColorMap = source.sheenColorMap;\r\n\t\tthis.sheenRoughness = source.sheenRoughness;\r\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\r\n\r\n\t\tthis.transmission = source.transmission;\r\n\t\tthis.transmissionMap = source.transmissionMap;\r\n\r\n\t\tthis.thickness = source.thickness;\r\n\t\tthis.thicknessMap = source.thicknessMap;\r\n\t\tthis.attenuationDistance = source.attenuationDistance;\r\n\t\tthis.attenuationColor.copy( source.attenuationColor );\r\n\r\n\t\tthis.specularIntensity = source.specularIntensity;\r\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\r\n\t\tthis.specularColor.copy( source.specularColor );\r\n\t\tthis.specularColorMap = source.specularColorMap;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshPhysicalMaterial };\r\n", "import { addNodeMaterial } from './NodeMaterial.js';\r\nimport { transformedClearcoatNormalView } from '../accessors/NormalNode.js';\r\nimport { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness, specularColor, specularF90, diffuseColor, metalness, roughness, anisotropy, alphaT, anisotropyT, anisotropyB, ior, transmission, thickness, attenuationDistance, attenuationColor, dispersion } from '../core/PropertyNode.js';\r\nimport { materialClearcoat, materialClearcoatRoughness, materialClearcoatNormal, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness, materialSpecularIntensity, materialSpecularColor, materialAnisotropy, materialIOR, materialTransmission, materialThickness, materialAttenuationDistance, materialAttenuationColor, materialDispersion } from '../accessors/MaterialNode.js';\r\nimport { float, vec2, vec3, If } from '../shadernode/ShaderNode.js';\r\nimport getRoughness from '../functions/material/getRoughness.js';\r\nimport { TBNViewMatrix } from '../accessors/AccessorsUtils.js';\r\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\r\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\r\nimport { mix, pow2, min } from '../math/MathNode.js';\r\n\r\nimport { MeshPhysicalMaterial } from '../../materials/MeshPhysicalMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshPhysicalMaterial();\r\n\r\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshPhysicalNodeMaterial = true;\r\n\r\n\t\tthis.clearcoatNode = null;\r\n\t\tthis.clearcoatRoughnessNode = null;\r\n\t\tthis.clearcoatNormalNode = null;\r\n\r\n\t\tthis.sheenNode = null;\r\n\t\tthis.sheenRoughnessNode = null;\r\n\r\n\t\tthis.iridescenceNode = null;\r\n\t\tthis.iridescenceIORNode = null;\r\n\t\tthis.iridescenceThicknessNode = null;\r\n\r\n\t\tthis.specularIntensityNode = null;\r\n\t\tthis.specularColorNode = null;\r\n\r\n\t\tthis.iorNode = null;\r\n\t\tthis.transmissionNode = null;\r\n\t\tthis.thicknessNode = null;\r\n\t\tthis.attenuationDistanceNode = null;\r\n\t\tthis.attenuationColorNode = null;\r\n\t\tthis.dispersionNode = null;\r\n\r\n\t\tthis.anisotropyNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tget useClearcoat() {\r\n\r\n\t\treturn this.clearcoat > 0 || this.clearcoatNode !== null;\r\n\r\n\t}\r\n\r\n\tget useIridescence() {\r\n\r\n\t\treturn this.iridescence > 0 || this.iridescenceNode !== null;\r\n\r\n\t}\r\n\r\n\tget useSheen() {\r\n\r\n\t\treturn this.sheen > 0 || this.sheenNode !== null;\r\n\r\n\t}\r\n\r\n\tget useAnisotropy() {\r\n\r\n\t\treturn this.anisotropy > 0 || this.anisotropyNode !== null;\r\n\r\n\t}\r\n\r\n\tget useTransmission() {\r\n\r\n\t\treturn this.transmission > 0 || this.transmissionNode !== null;\r\n\r\n\t}\r\n\r\n\tget useDispersion() {\r\n\r\n\t\treturn this.dispersion > 0 || this.dispersionNode !== null;\r\n\r\n\t}\r\n\r\n\tsetupSpecular() {\r\n\r\n\t\tconst iorNode = this.iorNode ? float( this.iorNode ) : materialIOR;\r\n\r\n\t\tior.assign( iorNode );\r\n\t\tspecularColor.assign( mix( min( pow2( ior.sub( 1.0 ).div( ior.add( 1.0 ) ) ).mul( materialSpecularColor ), vec3( 1.0 ) ).mul( materialSpecularIntensity ), diffuseColor.rgb, metalness ) );\r\n\t\tspecularF90.assign( mix( materialSpecularIntensity, 1.0, metalness ) );\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new PhysicalLightingModel( this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion );\r\n\r\n\t}\r\n\r\n\tsetupVariants( builder ) {\r\n\r\n\t\tsuper.setupVariants( builder );\r\n\r\n\t\t// CLEARCOAT\r\n\r\n\t\tif ( this.useClearcoat ) {\r\n\r\n\t\t\tconst clearcoatNode = this.clearcoatNode ? float( this.clearcoatNode ) : materialClearcoat;\r\n\t\t\tconst clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float( this.clearcoatRoughnessNode ) : materialClearcoatRoughness;\r\n\r\n\t\t\tclearcoat.assign( clearcoatNode );\r\n\t\t\tclearcoatRoughness.assign( getRoughness( { roughness: clearcoatRoughnessNode } ) );\r\n\r\n\t\t}\r\n\r\n\t\t// SHEEN\r\n\r\n\t\tif ( this.useSheen ) {\r\n\r\n\t\t\tconst sheenNode = this.sheenNode ? vec3( this.sheenNode ) : materialSheen;\r\n\t\t\tconst sheenRoughnessNode = this.sheenRoughnessNode ? float( this.sheenRoughnessNode ) : materialSheenRoughness;\r\n\r\n\t\t\tsheen.assign( sheenNode );\r\n\t\t\tsheenRoughness.assign( sheenRoughnessNode );\r\n\r\n\t\t}\r\n\r\n\t\t// IRIDESCENCE\r\n\r\n\t\tif ( this.useIridescence ) {\r\n\r\n\t\t\tconst iridescenceNode = this.iridescenceNode ? float( this.iridescenceNode ) : materialIridescence;\r\n\t\t\tconst iridescenceIORNode = this.iridescenceIORNode ? float( this.iridescenceIORNode ) : materialIridescenceIOR;\r\n\t\t\tconst iridescenceThicknessNode = this.iridescenceThicknessNode ? float( this.iridescenceThicknessNode ) : materialIridescenceThickness;\r\n\r\n\t\t\tiridescence.assign( iridescenceNode );\r\n\t\t\tiridescenceIOR.assign( iridescenceIORNode );\r\n\t\t\tiridescenceThickness.assign( iridescenceThicknessNode );\r\n\r\n\t\t}\r\n\r\n\t\t// ANISOTROPY\r\n\r\n\t\tif ( this.useAnisotropy ) {\r\n\r\n\t\t\tconst anisotropyV = ( this.anisotropyNode ? vec2( this.anisotropyNode ) : materialAnisotropy ).toVar();\r\n\r\n\t\t\tanisotropy.assign( anisotropyV.length() );\r\n\r\n\t\t\tIf( anisotropy.equal( 0.0 ), () => {\r\n\r\n\t\t\t\tanisotropyV.assign( vec2( 1.0, 0.0 ) );\r\n\r\n\t\t\t} ).else( () => {\r\n\r\n\t\t\t\tanisotropyV.divAssign( vec2( anisotropy ) );\r\n\t\t\t\tanisotropy.assign( anisotropy.saturate() );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t// Roughness along the anisotropy bitangent is the material roughness, while the tangent roughness increases with anisotropy.\r\n\t\t\talphaT.assign( anisotropy.pow2().mix( roughness.pow2(), 1.0 ) );\r\n\r\n\t\t\tanisotropyT.assign( TBNViewMatrix[ 0 ].mul( anisotropyV.x ).add( TBNViewMatrix[ 1 ].mul( anisotropyV.y ) ) );\r\n\t\t\tanisotropyB.assign( TBNViewMatrix[ 1 ].mul( anisotropyV.x ).sub( TBNViewMatrix[ 0 ].mul( anisotropyV.y ) ) );\r\n\r\n\t\t}\r\n\r\n\t\t// TRANSMISSION\r\n\r\n\t\tif ( this.useTransmission ) {\r\n\r\n\t\t\tconst transmissionNode = this.transmissionNode ? float( this.transmissionNode ) : materialTransmission;\r\n\t\t\tconst thicknessNode = this.thicknessNode ? float( this.thicknessNode ) : materialThickness;\r\n\t\t\tconst attenuationDistanceNode = this.attenuationDistanceNode ? float( this.attenuationDistanceNode ) : materialAttenuationDistance;\r\n\t\t\tconst attenuationColorNode = this.attenuationColorNode ? vec3( this.attenuationColorNode ) : materialAttenuationColor;\r\n\r\n\t\t\ttransmission.assign( transmissionNode );\r\n\t\t\tthickness.assign( thicknessNode );\r\n\t\t\tattenuationDistance.assign( attenuationDistanceNode );\r\n\t\t\tattenuationColor.assign( attenuationColorNode );\r\n\r\n\t\t\tif ( this.useDispersion ) {\r\n\r\n\t\t\t\tconst dispersionNode = this.dispersionNode ? float( this.dispersionNode ) : materialDispersion;\r\n\r\n\t\t\t\tdispersion.assign( dispersionNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetupNormal( builder ) {\r\n\r\n\t\tsuper.setupNormal( builder );\r\n\r\n\t\t// CLEARCOAT NORMAL\r\n\r\n\t\tconst clearcoatNormalNode = this.clearcoatNormalNode ? vec3( this.clearcoatNormalNode ) : materialClearcoatNormal;\r\n\r\n\t\ttransformedClearcoatNormalView.assign( clearcoatNormalNode );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.clearcoatNode = source.clearcoatNode;\r\n\t\tthis.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\r\n\t\tthis.clearcoatNormalNode = source.clearcoatNormalNode;\r\n\r\n\t\tthis.sheenNode = source.sheenNode;\r\n\t\tthis.sheenRoughnessNode = source.sheenRoughnessNode;\r\n\r\n\t\tthis.iridescenceNode = source.iridescenceNode;\r\n\t\tthis.iridescenceIORNode = source.iridescenceIORNode;\r\n\t\tthis.iridescenceThicknessNode = source.iridescenceThicknessNode;\r\n\r\n\t\tthis.specularIntensityNode = source.specularIntensityNode;\r\n\t\tthis.specularColorNode = source.specularColorNode;\r\n\r\n\t\tthis.transmissionNode = source.transmissionNode;\r\n\t\tthis.thicknessNode = source.thicknessNode;\r\n\t\tthis.attenuationDistanceNode = source.attenuationDistanceNode;\r\n\t\tthis.attenuationColorNode = source.attenuationColorNode;\r\n\t\tthis.dispersionNode = source.dispersionNode;\r\n\r\n\t\tthis.anisotropyNode = source.anisotropyNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshPhysicalNodeMaterial;\r\n\r\naddNodeMaterial( 'MeshPhysicalNodeMaterial', MeshPhysicalNodeMaterial );\r\n", "import { addNodeMaterial } from './NodeMaterial.js';\r\nimport { transformedNormalView } from '../accessors/NormalNode.js';\r\nimport { positionViewDirection } from '../accessors/PositionNode.js';\r\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\r\nimport MeshPhysicalNodeMaterial from './MeshPhysicalNodeMaterial.js';\r\nimport { float, vec3 } from '../shadernode/ShaderNode.js';\r\n\r\nclass SSSLightingModel extends PhysicalLightingModel {\r\n\r\n\tconstructor( useClearcoat, useSheen, useIridescence, useSSS ) {\r\n\r\n\t\tsuper( useClearcoat, useSheen, useIridescence );\r\n\r\n\t\tthis.useSSS = useSSS;\r\n\r\n\t}\r\n\r\n\tdirect( { lightDirection, lightColor, reflectedLight }, stack, builder ) {\r\n\r\n\t\tif ( this.useSSS === true ) {\r\n\r\n\t\t\tconst material = builder.material;\r\n\r\n\t\t\tconst { thicknessColorNode, thicknessDistortionNode, thicknessAmbientNode, thicknessAttenuationNode, thicknessPowerNode, thicknessScaleNode } = material;\r\n\r\n\t\t\tconst scatteringHalf = lightDirection.add( transformedNormalView.mul( thicknessDistortionNode ) ).normalize();\r\n\t\t\tconst scatteringDot = float( positionViewDirection.dot( scatteringHalf.negate() ).saturate().pow( thicknessPowerNode ).mul( thicknessScaleNode ) );\r\n\t\t\tconst scatteringIllu = vec3( scatteringDot.add( thicknessAmbientNode ).mul( thicknessColorNode ) );\r\n\r\n\t\t\treflectedLight.directDiffuse.addAssign( scatteringIllu.mul( thicknessAttenuationNode.mul( lightColor ) ) );\r\n\r\n\t\t}\r\n\r\n\t\tsuper.direct( { lightDirection, lightColor, reflectedLight }, stack, builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass MeshSSSNodeMaterial extends MeshPhysicalNodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper( parameters );\r\n\r\n\t\tthis.thicknessColorNode = null;\r\n\t\tthis.thicknessDistortionNode = float( 0.1 );\r\n\t\tthis.thicknessAmbientNode = float( 0.0 );\r\n\t\tthis.thicknessAttenuationNode = float( .1 );\r\n\t\tthis.thicknessPowerNode = float( 2.0 );\r\n\t\tthis.thicknessScaleNode = float( 10.0 );\r\n\r\n\t}\r\n\r\n\tget useSSS() {\r\n\r\n\t\treturn this.thicknessColorNode !== null;\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new SSSLightingModel( this.useClearcoat, this.useSheen, this.useIridescence, this.useSSS );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.thicknessColorNode = source.thicknessColorNode;\r\n\t\tthis.thicknessDistortionNode = source.thicknessDistortionNode;\r\n\t\tthis.thicknessAmbientNode = source.thicknessAmbientNode;\r\n\t\tthis.thicknessAttenuationNode = source.thicknessAttenuationNode;\r\n\t\tthis.thicknessPowerNode = source.thicknessPowerNode;\r\n\t\tthis.thicknessScaleNode = source.thicknessScaleNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshSSSNodeMaterial;\r\n\r\naddNodeMaterial( 'MeshSSSNodeMaterial', MeshSSSNodeMaterial );\r\n", "import LightingModel from '../core/LightingModel.js';\r\nimport BRDF_Lambert from './BSDF/BRDF_Lambert.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { normalGeometry } from '../accessors/NormalNode.js';\r\nimport { tslFn, float, vec2, vec3 } from '../shadernode/ShaderNode.js';\r\nimport { mix, smoothstep } from '../math/MathNode.js';\r\nimport { materialReference } from '../accessors/MaterialReferenceNode.js';\r\n\r\nconst getGradientIrradiance = tslFn( ( { normal, lightDirection, builder } ) => {\r\n\r\n\t// dotNL will be from -1.0 to 1.0\r\n\tconst dotNL = normal.dot( lightDirection );\r\n\tconst coord = vec2( dotNL.mul( 0.5 ).add( 0.5 ), 0.0 );\r\n\r\n\tif ( builder.material.gradientMap ) {\r\n\r\n\t\tconst gradientMap = materialReference( 'gradientMap', 'texture' ).context( { getUV: () => coord } );\r\n\r\n\t\treturn vec3( gradientMap.r );\r\n\r\n\t} else {\r\n\r\n\t\tconst fw = coord.fwidth().mul( 0.5 );\r\n\r\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( float( 0.7 ).sub( fw.x ), float( 0.7 ).add( fw.x ), coord.x ) );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nclass ToonLightingModel extends LightingModel {\r\n\r\n\tdirect( { lightDirection, lightColor, reflectedLight }, stack, builder ) {\r\n\r\n\t\tconst irradiance = getGradientIrradiance( { normal: normalGeometry, lightDirection, builder } ).mul( lightColor );\r\n\r\n\t\treflectedLight.directDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor: diffuseColor.rgb } ) ) );\r\n\r\n\t}\r\n\r\n\tindirect( { ambientOcclusion, irradiance, reflectedLight } ) {\r\n\r\n\t\treflectedLight.indirectDiffuse.addAssign( irradiance.mul( BRDF_Lambert( { diffuseColor } ) ) );\r\n\r\n\t\treflectedLight.indirectDiffuse.mulAssign( ambientOcclusion );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ToonLightingModel;\r\n", "import { TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass MeshToonMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshToonMaterial = true;\r\n\r\n\t\tthis.defines = { 'TOON': '' };\r\n\r\n\t\tthis.type = 'MeshToonMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\t\tthis.gradientMap = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\t\tthis.gradientMap = source.gradientMap;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshToonMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport ToonLightingModel from '../functions/ToonLightingModel.js';\r\n\r\nimport { MeshToonMaterial } from '../../materials/MeshToonMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshToonMaterial();\r\n\r\nclass MeshToonNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshToonNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new ToonLightingModel();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MeshToonNodeMaterial;\r\n\r\naddNodeMaterial( 'MeshToonNodeMaterial', MeshToonNodeMaterial );\r\n", "import { TangentSpaceNormalMap } from '../constants.js';\r\nimport { Material } from './Material.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass MeshMatcapMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshMatcapMaterial = true;\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.type = 'MeshMatcapMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.matcap = null;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.flatShading = false;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.matcap = source.matcap;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.flatShading = source.flatShading;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshMatcapMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { materialReference } from '../accessors/MaterialReferenceNode.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { vec3 } from '../shadernode/ShaderNode.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { matcapUV } from '../utils/MatcapUVNode.js';\r\n\r\nimport { MeshMatcapMaterial } from '../../materials/MeshMatcapMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new MeshMatcapMaterial();\r\n\r\nclass MeshMatcapNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.isMeshMatcapNodeMaterial = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupVariants( builder ) {\r\n\r\n\t\tconst uv = matcapUV;\r\n\r\n\t\tlet matcapColor;\r\n\r\n\t\tif ( builder.material.matcap ) {\r\n\r\n\t\t\tmatcapColor = materialReference( 'matcap', 'texture' ).context( { getUV: () => uv } );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmatcapColor = vec3( mix( 0.2, 0.8, uv.y ) ); // default if matcap is missing\r\n\r\n\t\t}\r\n\r\n\t\tdiffuseColor.rgb.mulAssign( matcapColor.rgb );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default MeshMatcapNodeMaterial;\r\n\r\naddNodeMaterial( 'MeshMatcapNodeMaterial', MeshMatcapNodeMaterial );\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\n\r\nimport { PointsMaterial } from '../../materials/PointsMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new PointsMaterial();\r\n\r\nclass PointsNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isPointsNodeMaterial = true;\r\n\r\n\t\tthis.lights = false;\r\n\t\tthis.normals = false;\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.sizeNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.sizeNode = source.sizeNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PointsNodeMaterial;\r\n\r\naddNodeMaterial( 'PointsNodeMaterial', PointsNodeMaterial );\r\n", "import { Material } from './Material.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass SpriteMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isSpriteMaterial = true;\r\n\r\n\t\tthis.type = 'SpriteMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.rotation = source.rotation;\r\n\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SpriteMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\r\nimport { materialRotation } from '../accessors/MaterialNode.js';\r\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\r\nimport { positionLocal } from '../accessors/PositionNode.js';\r\nimport { float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\r\n\r\nimport { SpriteMaterial } from '../../materials/SpriteMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new SpriteMaterial();\r\n\r\nclass SpriteNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isSpriteNodeMaterial = true;\r\n\r\n\t\tthis.lights = false;\r\n\t\tthis.normals = false;\r\n\r\n\t\tthis.positionNode = null;\r\n\t\tthis.rotationNode = null;\r\n\t\tthis.scaleNode = null;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupPosition( { object, context } ) {\r\n\r\n\t\t// < VERTEX STAGE >\r\n\r\n\t\tconst { positionNode, rotationNode, scaleNode } = this;\r\n\r\n\t\tconst vertex = positionLocal;\r\n\r\n\t\tlet mvPosition = modelViewMatrix.mul( vec3( positionNode || 0 ) );\r\n\r\n\t\tlet scale = vec2( modelWorldMatrix[ 0 ].xyz.length(), modelWorldMatrix[ 1 ].xyz.length() );\r\n\r\n\t\tif ( scaleNode !== null ) {\r\n\r\n\t\t\tscale = scale.mul( scaleNode );\r\n\r\n\t\t}\r\n\r\n\t\tlet alignedPosition = vertex.xy;\r\n\r\n\t\tif ( object.center && object.center.isVector2 === true ) {\r\n\r\n\t\t\talignedPosition = alignedPosition.sub( uniform( object.center ).sub( 0.5 ) );\r\n\r\n\t\t}\r\n\r\n\t\talignedPosition = alignedPosition.mul( scale );\r\n\r\n\t\tconst rotation = float( rotationNode || materialRotation );\r\n\r\n\t\tconst rotatedPosition = alignedPosition.rotate( rotation );\r\n\r\n\t\tmvPosition = vec4( mvPosition.xy.add( rotatedPosition ), mvPosition.zw );\r\n\r\n\t\tconst modelViewProjection = cameraProjectionMatrix.mul( mvPosition );\r\n\r\n\t\tcontext.vertex = vertex;\r\n\r\n\t\treturn modelViewProjection;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.positionNode = source.positionNode;\r\n\t\tthis.rotationNode = source.rotationNode;\r\n\t\tthis.scaleNode = source.scaleNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SpriteNodeMaterial;\r\n\r\naddNodeMaterial( 'SpriteNodeMaterial', SpriteNodeMaterial );\r\n", "import LightingModel from '../core/LightingModel.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { float } from '../shadernode/ShaderNode.js';\r\n\r\nclass ShadowMaskModel extends LightingModel {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.shadowNode = float( 1 ).toVar( 'shadowMask' );\r\n\r\n\t}\r\n\r\n\tdirect( { shadowMask } ) {\r\n\r\n\t\tthis.shadowNode.mulAssign( shadowMask );\r\n\r\n\t}\r\n\r\n\tfinish( context ) {\r\n\r\n\t\tdiffuseColor.a.mulAssign( this.shadowNode.oneMinus() );\r\n\r\n\t\tcontext.outgoingLight.rgb.assign( diffuseColor.rgb ); // TODO: Optimize LightsNode to avoid this assignment\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ShadowMaskModel;\r\n", "import { Material } from './Material.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nclass ShadowMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isShadowMaterial = true;\r\n\r\n\t\tthis.type = 'ShadowMaterial';\r\n\r\n\t\tthis.color = new Color( 0x000000 );\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ShadowMaterial };\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport ShadowMaskModel from '../functions/ShadowMaskModel.js';\r\n\r\nimport { ShadowMaterial } from '../../materials/ShadowMaterial.js';\r\n\r\nconst _defaultValues = /*@__PURE__*/ new ShadowMaterial();\r\n\r\nclass ShadowNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isShadowNodeMaterial = true;\r\n\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.setDefaultValues( _defaultValues );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\treturn new ShadowMaskModel();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ShadowNodeMaterial;\r\n\r\naddNodeMaterial( 'ShadowNodeMaterial', ShadowNodeMaterial );\r\n", "import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\nimport { property } from '../core/PropertyNode.js';\r\nimport { materialReference } from '../accessors/MaterialReferenceNode.js';\r\nimport { modelWorldMatrixInverse } from '../accessors/ModelNode.js';\r\nimport { cameraPosition } from '../accessors/CameraNode.js';\r\nimport { positionGeometry } from '../accessors/PositionNode.js';\r\nimport { tslFn, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\r\nimport { min, max } from '../math/MathNode.js';\r\nimport { loop, Break } from '../utils/LoopNode.js';\r\nimport { texture3D } from '../accessors/Texture3DNode.js';\r\n\r\nclass VolumeNodeMaterial extends NodeMaterial {\r\n\r\n\tconstructor( params = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.normals = false;\r\n\t\tthis.lights = false;\r\n\t\tthis.isVolumeNodeMaterial = true;\r\n\t\tthis.testNode = null;\r\n\r\n\t\tthis.setValues( params );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst map = texture3D( this.map, null, 0 );\r\n\r\n\t\tconst hitBox = tslFn( ( { orig, dir } ) => {\r\n\r\n\t\t\tconst box_min = vec3( - 0.5 );\r\n\t\t\tconst box_max = vec3( 0.5 );\r\n\r\n\t\t\tconst inv_dir = dir.reciprocal();\r\n\r\n\t\t\tconst tmin_tmp = box_min.sub( orig ).mul( inv_dir );\r\n\t\t\tconst tmax_tmp = box_max.sub( orig ).mul( inv_dir );\r\n\r\n\t\t\tconst tmin = min( tmin_tmp, tmax_tmp );\r\n\t\t\tconst tmax = max( tmin_tmp, tmax_tmp );\r\n\r\n\t\t\tconst t0 = max( tmin.x, max( tmin.y, tmin.z ) );\r\n\t\t\tconst t1 = min( tmax.x, min( tmax.y, tmax.z ) );\r\n\r\n\t\t\treturn vec2( t0, t1 );\r\n\r\n\t\t} );\r\n\r\n\t\tthis.fragmentNode = tslFn( () => {\r\n\r\n\t\t\tconst vOrigin = varying( vec3( modelWorldMatrixInverse.mul( vec4( cameraPosition, 1.0 ) ) ) );\r\n\t\t\tconst vDirection = varying( positionGeometry.sub( vOrigin ) );\r\n\r\n\t\t\tconst rayDir = vDirection.normalize();\r\n\t\t\tconst bounds = property( 'vec2', 'bounds' ).assign( hitBox( { orig: vOrigin, dir: rayDir } ) );\r\n\r\n\t\t\tbounds.x.greaterThan( bounds.y ).discard();\r\n\r\n\t\t\tbounds.assign( vec2( max( bounds.x, 0.0 ), bounds.y ) );\r\n\r\n\t\t\tconst p = property( 'vec3', 'p' ).assign( vOrigin.add( bounds.x.mul( rayDir ) ) );\r\n\t\t\tconst inc = property( 'vec3', 'inc' ).assign( vec3( rayDir.abs().reciprocal() ) );\r\n\t\t\tconst delta = property( 'float', 'delta' ).assign( min( inc.x, min( inc.y, inc.z ) ) );\r\n\r\n\t\t\tdelta.divAssign( materialReference( 'steps', 'float' ) );\r\n\r\n\t\t\tconst ac = property( 'vec4', 'ac' ).assign( vec4( materialReference( 'base', 'color' ), 0.0 ) );\r\n\r\n\t\t\tloop( { type: 'float', start: bounds.x, end: bounds.y, update: '+= delta' }, () => {\r\n\r\n\t\t\t\tconst d = property( 'float', 'd' ).assign( map.uv( p.add( 0.5 ) ).r );\r\n\r\n\t\t\t\tif ( this.testNode !== null ) {\r\n\r\n\t\t\t\t\tthis.testNode( { map: map, mapValue: d, probe: p, finalColor: ac } ).append();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// default to show surface of mesh\r\n\t\t\t\t\tac.a.assign( 1 );\r\n\t\t\t\t\tBreak();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp.addAssign( rayDir.mul( delta ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tac.a.equal( 0 ).discard();\r\n\r\n\t\t\treturn vec4( ac );\r\n\r\n\t\t} )();\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VolumeNodeMaterial;\r\n\r\naddNodeMaterial( 'VolumeNodeMaterial', VolumeNodeMaterial );\r\n", "import { ShaderMaterial } from './ShaderMaterial.js';\r\n\r\nclass RawShaderMaterial extends ShaderMaterial {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper( parameters );\r\n\r\n\t\tthis.isRawShaderMaterial = true;\r\n\r\n\t\tthis.type = 'RawShaderMaterial';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RawShaderMaterial };\r\n", "import { Material } from './Material.js';\r\nimport { BasicDepthPacking } from '../constants.js';\r\n\r\nclass MeshDepthMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshDepthMaterial = true;\r\n\r\n\t\tthis.type = 'MeshDepthMaterial';\r\n\r\n\t\tthis.depthPacking = BasicDepthPacking;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.depthPacking = source.depthPacking;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshDepthMaterial };\r\n", "import { Material } from './Material.js';\r\n\r\nclass MeshDistanceMaterial extends Material {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isMeshDistanceMaterial = true;\r\n\r\n\t\tthis.type = 'MeshDistanceMaterial';\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshDistanceMaterial };\r\n", "import { Color } from '../math/Color.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { FileLoader } from './FileLoader.js';\r\nimport { Loader } from './Loader.js';\r\nimport {\r\n\tShadowMaterial,\r\n\tSpriteMaterial,\r\n\tRawShaderMaterial,\r\n\tShaderMaterial,\r\n\tPointsMaterial,\r\n\tMeshPhysicalMaterial,\r\n\tMeshStandardMaterial,\r\n\tMeshPhongMaterial,\r\n\tMeshToonMaterial,\r\n\tMeshNormalMaterial,\r\n\tMeshLambertMaterial,\r\n\tMeshDepthMaterial,\r\n\tMeshDistanceMaterial,\r\n\tMeshBasicMaterial,\r\n\tMeshMatcapMaterial,\r\n\tLineDashedMaterial,\r\n\tLineBasicMaterial,\r\n\tMaterial,\r\n} from '../materials/Materials.js';\r\n\r\nclass MaterialLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\t\tthis.textures = {};\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( json ) {\r\n\r\n\t\tconst textures = this.textures;\r\n\r\n\t\tfunction getTexture( name ) {\r\n\r\n\t\t\tif ( textures[ name ] === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn textures[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tconst material = MaterialLoader.createMaterialFromType( json.type );\r\n\r\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\r\n\t\tif ( json.name !== undefined ) material.name = json.name;\r\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\r\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\r\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\r\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\r\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\r\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\r\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\r\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\r\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\r\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\r\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\r\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\r\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\r\n\t\tif ( json.dispersion !== undefined ) material.dispersion = json.dispersion;\r\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\r\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\r\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\r\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\r\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\r\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\r\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\r\n\t\tif ( json.anisotropy !== undefined ) material.anisotropy = json.anisotropy;\r\n\t\tif ( json.anisotropyRotation !== undefined ) material.anisotropyRotation = json.anisotropyRotation;\r\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\r\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\r\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\r\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\r\n\t\tif ( json.side !== undefined ) material.side = json.side;\r\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\r\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\r\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\r\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\r\n\t\tif ( json.alphaHash !== undefined ) material.alphaHash = json.alphaHash;\r\n\t\tif ( json.depthFunc !== undefined ) material.depthFunc = json.depthFunc;\r\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\r\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\r\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\r\n\t\tif ( json.blendSrc !== undefined ) material.blendSrc = json.blendSrc;\r\n\t\tif ( json.blendDst !== undefined ) material.blendDst = json.blendDst;\r\n\t\tif ( json.blendEquation !== undefined ) material.blendEquation = json.blendEquation;\r\n\t\tif ( json.blendSrcAlpha !== undefined ) material.blendSrcAlpha = json.blendSrcAlpha;\r\n\t\tif ( json.blendDstAlpha !== undefined ) material.blendDstAlpha = json.blendDstAlpha;\r\n\t\tif ( json.blendEquationAlpha !== undefined ) material.blendEquationAlpha = json.blendEquationAlpha;\r\n\t\tif ( json.blendColor !== undefined && material.blendColor !== undefined ) material.blendColor.setHex( json.blendColor );\r\n\t\tif ( json.blendAlpha !== undefined ) material.blendAlpha = json.blendAlpha;\r\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\r\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\r\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\r\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\r\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\r\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\r\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\r\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\r\n\r\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\r\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\r\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\r\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\r\n\r\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\r\n\r\n\t\tif ( json.linewidth !== undefined ) material.linewidth = json.linewidth;\r\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\r\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\r\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\r\n\r\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\r\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\r\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\r\n\r\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\r\n\r\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\r\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\r\n\t\tif ( json.forceSinglePass !== undefined ) material.forceSinglePass = json.forceSinglePass;\r\n\r\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\r\n\r\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\r\n\r\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\r\n\r\n\t\tif ( json.vertexColors !== undefined ) {\r\n\r\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\r\n\r\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Shader Material\r\n\r\n\t\tif ( json.uniforms !== undefined ) {\r\n\r\n\t\t\tfor ( const name in json.uniforms ) {\r\n\r\n\t\t\t\tconst uniform = json.uniforms[ name ];\r\n\r\n\t\t\t\tmaterial.uniforms[ name ] = {};\r\n\r\n\t\t\t\tswitch ( uniform.type ) {\r\n\r\n\t\t\t\t\tcase 't':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'c':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'v2':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'v3':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'v4':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'm3':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'm4':\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\r\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\r\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\r\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\r\n\r\n\t\tif ( json.extensions !== undefined ) {\r\n\r\n\t\t\tfor ( const key in json.extensions ) {\r\n\r\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.lights !== undefined ) material.lights = json.lights;\r\n\t\tif ( json.clipping !== undefined ) material.clipping = json.clipping;\r\n\r\n\t\t// for PointsMaterial\r\n\r\n\t\tif ( json.size !== undefined ) material.size = json.size;\r\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\r\n\r\n\t\t// maps\r\n\r\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\r\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\r\n\r\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\r\n\r\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\r\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\r\n\r\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\r\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\r\n\t\tif ( json.normalScale !== undefined ) {\r\n\r\n\t\t\tlet normalScale = json.normalScale;\r\n\r\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\r\n\r\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\r\n\r\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\r\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\r\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\r\n\r\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\r\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\r\n\r\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\r\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\r\n\r\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\r\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\r\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\r\n\r\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\r\n\t\tif ( json.envMapRotation !== undefined ) material.envMapRotation.fromArray( json.envMapRotation );\r\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\r\n\r\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\r\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\r\n\r\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\r\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\r\n\r\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\r\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\r\n\r\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\r\n\r\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\r\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\r\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\r\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\r\n\r\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\r\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\r\n\r\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\r\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\r\n\r\n\t\tif ( json.anisotropyMap !== undefined ) material.anisotropyMap = getTexture( json.anisotropyMap );\r\n\r\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\r\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\tsetTextures( value ) {\r\n\r\n\t\tthis.textures = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic createMaterialFromType( type ) {\r\n\r\n\t\tconst materialLib = {\r\n\t\t\tShadowMaterial,\r\n\t\t\tSpriteMaterial,\r\n\t\t\tRawShaderMaterial,\r\n\t\t\tShaderMaterial,\r\n\t\t\tPointsMaterial,\r\n\t\t\tMeshPhysicalMaterial,\r\n\t\t\tMeshStandardMaterial,\r\n\t\t\tMeshPhongMaterial,\r\n\t\t\tMeshToonMaterial,\r\n\t\t\tMeshNormalMaterial,\r\n\t\t\tMeshLambertMaterial,\r\n\t\t\tMeshDepthMaterial,\r\n\t\t\tMeshDistanceMaterial,\r\n\t\t\tMeshBasicMaterial,\r\n\t\t\tMeshMatcapMaterial,\r\n\t\t\tLineDashedMaterial,\r\n\t\t\tLineBasicMaterial,\r\n\t\t\tMaterial\r\n\t\t};\r\n\r\n\t\treturn new materialLib[ type ]();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MaterialLoader };\r\n", "import { createNodeMaterialFromType } from '../materials/Materials.js';\r\n\r\nimport { MaterialLoader } from '../../loaders/MaterialLoader.js';\r\n\r\nconst superFromTypeFunction = MaterialLoader.createMaterialFromType;\r\n\r\nMaterialLoader.createMaterialFromType = function ( type ) {\r\n\r\n\tconst material = createNodeMaterialFromType( type );\r\n\r\n\tif ( material !== undefined ) {\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\treturn superFromTypeFunction.call( this, type );\r\n\r\n};\r\n\r\nclass NodeMaterialLoader extends MaterialLoader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.nodes = {};\r\n\r\n\t}\r\n\r\n\tparse( json ) {\r\n\r\n\t\tconst material = super.parse( json );\r\n\r\n\t\tconst nodes = this.nodes;\r\n\t\tconst inputNodes = json.inputNodes;\r\n\r\n\t\tfor ( const property in inputNodes ) {\r\n\r\n\t\t\tconst uuid = inputNodes[ property ];\r\n\r\n\t\t\tmaterial[ property ] = nodes[ uuid ];\r\n\r\n\t\t}\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\tsetNodes( value ) {\r\n\r\n\t\tthis.nodes = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeMaterialLoader;\r\n", "import { InstancedBufferAttribute } from '../core/InstancedBufferAttribute.js';\r\nimport { Mesh } from './Mesh.js';\r\nimport { Box3 } from '../math/Box3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { DataTexture } from '../textures/DataTexture.js';\r\nimport { FloatType, RedFormat } from '../constants.js';\r\n\r\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\nconst _instanceIntersects = [];\r\n\r\nconst _box3 = /*@__PURE__*/ new Box3();\r\nconst _identity = /*@__PURE__*/ new Matrix4();\r\nconst _mesh = /*@__PURE__*/ new Mesh();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\n\r\nclass InstancedMesh extends Mesh {\r\n\r\n\tconstructor( geometry, material, count ) {\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.isInstancedMesh = true;\r\n\r\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\r\n\t\tthis.instanceColor = null;\r\n\t\tthis.morphTexture = null;\r\n\r\n\t\tthis.count = count;\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tthis.setMatrixAt( i, _identity );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst count = this.count;\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\r\n\r\n\t\t\t_box3.copy( geometry.boundingBox ).applyMatrix4( _instanceLocalMatrix );\r\n\r\n\t\t\tthis.boundingBox.union( _box3 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeBoundingSphere() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst count = this.count;\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingSphere === null ) {\r\n\r\n\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.makeEmpty();\r\n\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\r\n\r\n\t\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( _instanceLocalMatrix );\r\n\r\n\t\t\tthis.boundingSphere.union( _sphere );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\r\n\r\n\t\tif ( source.morphTexture !== null ) this.morphTexture = source.morphTexture.clone();\r\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\r\n\r\n\t\tthis.count = source.count;\r\n\r\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\r\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetColorAt( index, color ) {\r\n\r\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\r\n\r\n\t}\r\n\r\n\tgetMatrixAt( index, matrix ) {\r\n\r\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\r\n\r\n\t}\r\n\r\n\tgetMorphAt( index, object ) {\r\n\r\n\t\tconst objectInfluences = object.morphTargetInfluences;\r\n\r\n\t\tconst array = this.morphTexture.source.data.data;\r\n\r\n\t\tconst len = objectInfluences.length + 1; // All influences + the baseInfluenceSum\r\n\r\n\t\tconst dataIndex = index * len + 1; // Skip the baseInfluenceSum at the beginning\r\n\r\n\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\r\n\r\n\t\t\tobjectInfluences[ i ] = array[ dataIndex + i ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\t\tconst raycastTimes = this.count;\r\n\r\n\t\t_mesh.geometry = this.geometry;\r\n\t\t_mesh.material = this.material;\r\n\r\n\t\tif ( _mesh.material === undefined ) return;\r\n\r\n\t\t// test with bounding sphere first\r\n\r\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( this.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\r\n\r\n\t\t// now test each instance\r\n\r\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\r\n\r\n\t\t\t// calculate the world matrix for each instance\r\n\r\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\r\n\r\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\r\n\r\n\t\t\t// the mesh represents this single instance\r\n\r\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\r\n\r\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\r\n\r\n\t\t\t// process the result of raycast\r\n\r\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\r\n\t\t\t\tintersect.instanceId = instanceId;\r\n\t\t\t\tintersect.object = this;\r\n\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_instanceIntersects.length = 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetColorAt( index, color ) {\r\n\r\n\t\tif ( this.instanceColor === null ) {\r\n\r\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ).fill( 1 ), 3 );\r\n\r\n\t\t}\r\n\r\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\r\n\r\n\t}\r\n\r\n\tsetMatrixAt( index, matrix ) {\r\n\r\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\r\n\r\n\t}\r\n\r\n\tsetMorphAt( index, object ) {\r\n\r\n\t\tconst objectInfluences = object.morphTargetInfluences;\r\n\r\n\t\tconst len = objectInfluences.length + 1; // morphBaseInfluence + all influences\r\n\r\n\t\tif ( this.morphTexture === null ) {\r\n\r\n\t\t\tthis.morphTexture = new DataTexture( new Float32Array( len * this.count ), len, this.count, RedFormat, FloatType );\r\n\r\n\t\t}\r\n\r\n\t\tconst array = this.morphTexture.source.data.data;\r\n\r\n\t\tlet morphInfluencesSum = 0;\r\n\r\n\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\r\n\r\n\t\t\tmorphInfluencesSum += objectInfluences[ i ];\r\n\r\n\t\t}\r\n\r\n\t\tconst morphBaseInfluence = this.geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\r\n\r\n\t\tconst dataIndex = len * index;\r\n\r\n\t\tarray[ dataIndex ] = morphBaseInfluence;\r\n\r\n\t\tarray.set( objectInfluences, dataIndex + 1 );\r\n\r\n\t}\r\n\r\n\tupdateMorphTargets() {\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\tif ( this.morphTexture !== null ) {\r\n\r\n\t\t\tthis.morphTexture.dispose();\r\n\t\t\tthis.morphTexture = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InstancedMesh };\r\n", "import { BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { DataTexture } from '../textures/DataTexture.js';\r\nimport { FloatType, RedIntegerFormat, UnsignedIntType } from '../constants.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Mesh } from './Mesh.js';\r\nimport { RGBAFormat } from '../constants.js';\r\nimport { ColorManagement } from '../math/ColorManagement.js';\r\nimport { Box3 } from '../math/Box3.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { Frustum } from '../math/Frustum.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Color } from '../math/Color.js';\r\n\r\nfunction sortOpaque( a, b ) {\r\n\r\n\treturn a.z - b.z;\r\n\r\n}\r\n\r\nfunction sortTransparent( a, b ) {\r\n\r\n\treturn b.z - a.z;\r\n\r\n}\r\n\r\nclass MultiDrawRenderList {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.index = 0;\r\n\t\tthis.pool = [];\r\n\t\tthis.list = [];\r\n\r\n\t}\r\n\r\n\tpush( drawRange, z, index ) {\r\n\r\n\t\tconst pool = this.pool;\r\n\t\tconst list = this.list;\r\n\t\tif ( this.index >= pool.length ) {\r\n\r\n\t\t\tpool.push( {\r\n\r\n\t\t\t\tstart: - 1,\r\n\t\t\t\tcount: - 1,\r\n\t\t\t\tz: - 1,\r\n\t\t\t\tindex: - 1,\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tconst item = pool[ this.index ];\r\n\t\tlist.push( item );\r\n\t\tthis.index ++;\r\n\r\n\t\titem.start = drawRange.start;\r\n\t\titem.count = drawRange.count;\r\n\t\titem.z = z;\r\n\t\titem.index = index;\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis.list.length = 0;\r\n\t\tthis.index = 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _matrix = /*@__PURE__*/ new Matrix4();\r\nconst _invMatrixWorld = /*@__PURE__*/ new Matrix4();\r\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _whiteColor = /*@__PURE__*/ new Color( 1, 1, 1 );\r\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _frustum = /*@__PURE__*/ new Frustum();\r\nconst _box = /*@__PURE__*/ new Box3();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _forward = /*@__PURE__*/ new Vector3();\r\nconst _temp = /*@__PURE__*/ new Vector3();\r\nconst _renderList = /*@__PURE__*/ new MultiDrawRenderList();\r\nconst _mesh = /*@__PURE__*/ new Mesh();\r\nconst _batchIntersects = [];\r\n\r\n// @TODO: SkinnedMesh support?\r\n// @TODO: geometry.groups support?\r\n// @TODO: geometry.drawRange support?\r\n// @TODO: geometry.morphAttributes support?\r\n// @TODO: Support uniform parameter per geometry\r\n// @TODO: Add an \"optimize\" function to pack geometry and remove data gaps\r\n\r\n// copies data from attribute \"src\" into \"target\" starting at \"targetOffset\"\r\nfunction copyAttributeData( src, target, targetOffset = 0 ) {\r\n\r\n\tconst itemSize = target.itemSize;\r\n\tif ( src.isInterleavedBufferAttribute || src.array.constructor !== target.array.constructor ) {\r\n\r\n\t\t// use the component getters and setters if the array data cannot\r\n\t\t// be copied directly\r\n\t\tconst vertexCount = src.count;\r\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\r\n\r\n\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\r\n\r\n\t\t\t\ttarget.setComponent( i + targetOffset, c, src.getComponent( i, c ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\t// faster copy approach using typed array set function\r\n\t\ttarget.array.set( src.array, targetOffset * itemSize );\r\n\r\n\t}\r\n\r\n\ttarget.needsUpdate = true;\r\n\r\n}\r\n\r\nclass BatchedMesh extends Mesh {\r\n\r\n\tget maxInstanceCount() {\r\n\r\n\t\treturn this._maxInstanceCount;\r\n\r\n\t}\r\n\r\n\tconstructor( maxInstanceCount, maxVertexCount, maxIndexCount = maxVertexCount * 2, material ) {\r\n\r\n\t\tsuper( new BufferGeometry(), material );\r\n\r\n\t\tthis.isBatchedMesh = true;\r\n\t\tthis.perObjectFrustumCulled = true;\r\n\t\tthis.sortObjects = true;\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\t\tthis.customSort = null;\r\n\r\n\t\t// stores visible, active, and geometry id per object\r\n\t\tthis._drawInfo = [];\r\n\r\n\t\t// geometry information\r\n\t\tthis._drawRanges = [];\r\n\t\tthis._reservedRanges = [];\r\n\t\tthis._bounds = [];\r\n\r\n\t\tthis._maxInstanceCount = maxInstanceCount;\r\n\t\tthis._maxVertexCount = maxVertexCount;\r\n\t\tthis._maxIndexCount = maxIndexCount;\r\n\r\n\t\tthis._geometryInitialized = false;\r\n\t\tthis._geometryCount = 0;\r\n\t\tthis._multiDrawCounts = new Int32Array( maxInstanceCount );\r\n\t\tthis._multiDrawStarts = new Int32Array( maxInstanceCount );\r\n\t\tthis._multiDrawCount = 0;\r\n\t\tthis._multiDrawInstances = null;\r\n\t\tthis._visibilityChanged = true;\r\n\r\n\t\t// Local matrix per geometry by using data texture\r\n\t\tthis._matricesTexture = null;\r\n\t\tthis._indirectTexture = null;\r\n\t\tthis._colorsTexture = null;\r\n\r\n\t\tthis._initMatricesTexture();\r\n\t\tthis._initIndirectTexture();\r\n\r\n\t}\r\n\r\n\t_initMatricesTexture() {\r\n\r\n\t\t// layout (1 matrix = 4 pixels)\r\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t//  with  8x8  pixel texture max   16 matrices * 4 pixels =  (8 * 8)\r\n\t\t//       16x16 pixel texture max   64 matrices * 4 pixels = (16 * 16)\r\n\t\t//       32x32 pixel texture max  256 matrices * 4 pixels = (32 * 32)\r\n\t\t//       64x64 pixel texture max 1024 matrices * 4 pixels = (64 * 64)\r\n\r\n\t\tlet size = Math.sqrt( this._maxInstanceCount * 4 ); // 4 pixels needed for 1 matrix\r\n\t\tsize = Math.ceil( size / 4 ) * 4;\r\n\t\tsize = Math.max( size, 4 );\r\n\r\n\t\tconst matricesArray = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\r\n\t\tconst matricesTexture = new DataTexture( matricesArray, size, size, RGBAFormat, FloatType );\r\n\r\n\t\tthis._matricesTexture = matricesTexture;\r\n\r\n\t}\r\n\r\n\t_initIndirectTexture() {\r\n\r\n\t\tlet size = Math.sqrt( this._maxInstanceCount );\r\n\t\tsize = Math.ceil( size );\r\n\r\n\t\tconst indirectArray = new Uint32Array( size * size );\r\n\t\tconst indirectTexture = new DataTexture( indirectArray, size, size, RedIntegerFormat, UnsignedIntType );\r\n\r\n\t\tthis._indirectTexture = indirectTexture;\r\n\r\n\t}\r\n\r\n\t_initColorsTexture() {\r\n\r\n\t\tlet size = Math.sqrt( this._maxIndexCount );\r\n\t\tsize = Math.ceil( size );\r\n\r\n\t\t// 4 floats per RGBA pixel initialized to white\r\n\t\tconst colorsArray = new Float32Array( size * size * 4 ).fill( 1 );\r\n\t\tconst colorsTexture = new DataTexture( colorsArray, size, size, RGBAFormat, FloatType );\r\n\t\tcolorsTexture.colorSpace = ColorManagement.workingColorSpace;\r\n\r\n\t\tthis._colorsTexture = colorsTexture;\r\n\r\n\t}\r\n\r\n\t_initializeGeometry( reference ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst maxVertexCount = this._maxVertexCount;\r\n\t\tconst maxIndexCount = this._maxIndexCount;\r\n\t\tif ( this._geometryInitialized === false ) {\r\n\r\n\t\t\tfor ( const attributeName in reference.attributes ) {\r\n\r\n\t\t\t\tconst srcAttribute = reference.getAttribute( attributeName );\r\n\t\t\t\tconst { array, itemSize, normalized } = srcAttribute;\r\n\r\n\t\t\t\tconst dstArray = new array.constructor( maxVertexCount * itemSize );\r\n\t\t\t\tconst dstAttribute = new BufferAttribute( dstArray, itemSize, normalized );\r\n\r\n\t\t\t\tgeometry.setAttribute( attributeName, dstAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( reference.getIndex() !== null ) {\r\n\r\n\t\t\t\t// Reserve last u16 index for primitive restart.\r\n\t\t\t\tconst indexArray = maxVertexCount > 65535\r\n\t\t\t\t\t? new Uint32Array( maxIndexCount )\r\n\t\t\t\t\t: new Uint16Array( maxIndexCount );\r\n\r\n\t\t\t\tgeometry.setIndex( new BufferAttribute( indexArray, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._geometryInitialized = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Make sure the geometry is compatible with the existing combined geometry attributes\r\n\t_validateGeometry( geometry ) {\r\n\r\n\t\t// check to ensure the geometries are using consistent attributes and indices\r\n\t\tconst batchGeometry = this.geometry;\r\n\t\tif ( Boolean( geometry.getIndex() ) !== Boolean( batchGeometry.getIndex() ) ) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: All geometries must consistently have \"index\".' );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const attributeName in batchGeometry.attributes ) {\r\n\r\n\t\t\tif ( ! geometry.hasAttribute( attributeName ) ) {\r\n\r\n\t\t\t\tthrow new Error( `BatchedMesh: Added geometry missing \"${ attributeName }\". All geometries must have consistent attributes.` );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst srcAttribute = geometry.getAttribute( attributeName );\r\n\t\t\tconst dstAttribute = batchGeometry.getAttribute( attributeName );\r\n\t\t\tif ( srcAttribute.itemSize !== dstAttribute.itemSize || srcAttribute.normalized !== dstAttribute.normalized ) {\r\n\r\n\t\t\t\tthrow new Error( 'BatchedMesh: All attributes must have a consistent itemSize and normalized value.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetCustomSort( func ) {\r\n\r\n\t\tthis.customSort = func;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tconst geometryCount = this._geometryCount;\r\n\t\tconst boundingBox = this.boundingBox;\r\n\t\tconst drawInfo = this._drawInfo;\r\n\r\n\t\tboundingBox.makeEmpty();\r\n\t\tfor ( let i = 0; i < geometryCount; i ++ ) {\r\n\r\n\t\t\tif ( drawInfo[ i ].active === false ) continue;\r\n\r\n\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\r\n\t\t\tthis.getMatrixAt( i, _matrix );\r\n\t\t\tthis.getBoundingBoxAt( geometryId, _box ).applyMatrix4( _matrix );\r\n\t\t\tboundingBox.union( _box );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeBoundingSphere() {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tconst boundingSphere = this.boundingSphere;\r\n\t\tconst drawInfo = this._drawInfo;\r\n\r\n\t\tboundingSphere.makeEmpty();\r\n\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( drawInfo[ i ].active === false ) continue;\r\n\r\n\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\r\n\t\t\tthis.getMatrixAt( i, _matrix );\r\n\t\t\tthis.getBoundingSphereAt( geometryId, _sphere ).applyMatrix4( _matrix );\r\n\t\t\tboundingSphere.union( _sphere );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\taddInstance( geometryId ) {\r\n\r\n\t\t// ensure we're not over geometry\r\n\t\tif ( this._drawInfo.length >= this._maxInstanceCount ) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: Maximum item count reached.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis._drawInfo.push( {\r\n\r\n\t\t\tvisible: true,\r\n\t\t\tactive: true,\r\n\t\t\tgeometryIndex: geometryId,\r\n\r\n\t\t} );\r\n\r\n\t\t// initialize the matrix\r\n\t\tconst drawId = this._drawInfo.length - 1;\r\n\t\tconst matricesTexture = this._matricesTexture;\r\n\t\tconst matricesArray = matricesTexture.image.data;\r\n\t\t_identityMatrix.toArray( matricesArray, drawId * 16 );\r\n\t\tmatricesTexture.needsUpdate = true;\r\n\r\n\t\tconst colorsTexture = this._colorsTexture;\r\n\t\tif ( colorsTexture ) {\r\n\r\n\t\t\t_whiteColor.toArray( colorsTexture.image.data, drawId * 4 );\r\n\t\t\tcolorsTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn drawId;\r\n\r\n\t}\r\n\r\n\taddGeometry( geometry, vertexCount = - 1, indexCount = - 1 ) {\r\n\r\n\t\tthis._initializeGeometry( geometry );\r\n\r\n\t\tthis._validateGeometry( geometry );\r\n\r\n\t\t// ensure we're not over geometry\r\n\t\tif ( this._drawInfo.length >= this._maxInstanceCount ) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: Maximum item count reached.' );\r\n\r\n\t\t}\r\n\r\n\t\t// get the necessary range fo the geometry\r\n\t\tconst reservedRange = {\r\n\t\t\tvertexStart: - 1,\r\n\t\t\tvertexCount: - 1,\r\n\t\t\tindexStart: - 1,\r\n\t\t\tindexCount: - 1,\r\n\t\t};\r\n\r\n\t\tlet lastRange = null;\r\n\t\tconst reservedRanges = this._reservedRanges;\r\n\t\tconst drawRanges = this._drawRanges;\r\n\t\tconst bounds = this._bounds;\r\n\t\tif ( this._geometryCount !== 0 ) {\r\n\r\n\t\t\tlastRange = reservedRanges[ reservedRanges.length - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( vertexCount === - 1 ) {\r\n\r\n\t\t\treservedRange.vertexCount = geometry.getAttribute( 'position' ).count;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treservedRange.vertexCount = vertexCount;\r\n\r\n\t\t}\r\n\r\n\t\tif ( lastRange === null ) {\r\n\r\n\t\t\treservedRange.vertexStart = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treservedRange.vertexStart = lastRange.vertexStart + lastRange.vertexCount;\r\n\r\n\t\t}\r\n\r\n\t\tconst index = geometry.getIndex();\r\n\t\tconst hasIndex = index !== null;\r\n\t\tif ( hasIndex ) {\r\n\r\n\t\t\tif ( indexCount\t=== - 1 ) {\r\n\r\n\t\t\t\treservedRange.indexCount = index.count;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treservedRange.indexCount = indexCount;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( lastRange === null ) {\r\n\r\n\t\t\t\treservedRange.indexStart = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treservedRange.indexStart = lastRange.indexStart + lastRange.indexCount;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\treservedRange.indexStart !== - 1 &&\r\n\t\t\treservedRange.indexStart + reservedRange.indexCount > this._maxIndexCount ||\r\n\t\t\treservedRange.vertexStart + reservedRange.vertexCount > this._maxVertexCount\r\n\t\t) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: Reserved space request exceeds the maximum buffer size.' );\r\n\r\n\t\t}\r\n\r\n\t\t// update id\r\n\t\tconst geometryId = this._geometryCount;\r\n\t\tthis._geometryCount ++;\r\n\r\n\t\t// add the reserved range and draw range objects\r\n\t\treservedRanges.push( reservedRange );\r\n\t\tdrawRanges.push( {\r\n\t\t\tstart: hasIndex ? reservedRange.indexStart : reservedRange.vertexStart,\r\n\t\t\tcount: - 1\r\n\t\t} );\r\n\t\tbounds.push( {\r\n\t\t\tboxInitialized: false,\r\n\t\t\tbox: new Box3(),\r\n\r\n\t\t\tsphereInitialized: false,\r\n\t\t\tsphere: new Sphere()\r\n\t\t} );\r\n\r\n\t\t// update the geometry\r\n\t\tthis.setGeometryAt( geometryId, geometry );\r\n\r\n\t\treturn geometryId;\r\n\r\n\t}\r\n\r\n\tsetGeometryAt( geometryId, geometry ) {\r\n\r\n\t\tif ( geometryId >= this._geometryCount ) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: Maximum geometry count reached.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis._validateGeometry( geometry );\r\n\r\n\t\tconst batchGeometry = this.geometry;\r\n\t\tconst hasIndex = batchGeometry.getIndex() !== null;\r\n\t\tconst dstIndex = batchGeometry.getIndex();\r\n\t\tconst srcIndex = geometry.getIndex();\r\n\t\tconst reservedRange = this._reservedRanges[ geometryId ];\r\n\t\tif (\r\n\t\t\thasIndex &&\r\n\t\t\tsrcIndex.count > reservedRange.indexCount ||\r\n\t\t\tgeometry.attributes.position.count > reservedRange.vertexCount\r\n\t\t) {\r\n\r\n\t\t\tthrow new Error( 'BatchedMesh: Reserved space not large enough for provided geometry.' );\r\n\r\n\t\t}\r\n\r\n\t\t// copy geometry over\r\n\t\tconst vertexStart = reservedRange.vertexStart;\r\n\t\tconst vertexCount = reservedRange.vertexCount;\r\n\t\tfor ( const attributeName in batchGeometry.attributes ) {\r\n\r\n\t\t\t// copy attribute data\r\n\t\t\tconst srcAttribute = geometry.getAttribute( attributeName );\r\n\t\t\tconst dstAttribute = batchGeometry.getAttribute( attributeName );\r\n\t\t\tcopyAttributeData( srcAttribute, dstAttribute, vertexStart );\r\n\r\n\t\t\t// fill the rest in with zeroes\r\n\t\t\tconst itemSize = srcAttribute.itemSize;\r\n\t\t\tfor ( let i = srcAttribute.count, l = vertexCount; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst index = vertexStart + i;\r\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\r\n\r\n\t\t\t\t\tdstAttribute.setComponent( index, c, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdstAttribute.needsUpdate = true;\r\n\t\t\tdstAttribute.addUpdateRange( vertexStart * itemSize, vertexCount * itemSize );\r\n\r\n\t\t}\r\n\r\n\t\t// copy index\r\n\t\tif ( hasIndex ) {\r\n\r\n\t\t\tconst indexStart = reservedRange.indexStart;\r\n\r\n\t\t\t// copy index data over\r\n\t\t\tfor ( let i = 0; i < srcIndex.count; i ++ ) {\r\n\r\n\t\t\t\tdstIndex.setX( indexStart + i, vertexStart + srcIndex.getX( i ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// fill the rest in with zeroes\r\n\t\t\tfor ( let i = srcIndex.count, l = reservedRange.indexCount; i < l; i ++ ) {\r\n\r\n\t\t\t\tdstIndex.setX( indexStart + i, vertexStart );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdstIndex.needsUpdate = true;\r\n\t\t\tdstIndex.addUpdateRange( indexStart, reservedRange.indexCount );\r\n\r\n\t\t}\r\n\r\n\t\t// store the bounding boxes\r\n\t\tconst bound = this._bounds[ geometryId ];\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tbound.box.copy( geometry.boundingBox );\r\n\t\t\tbound.boxInitialized = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbound.boxInitialized = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tbound.sphere.copy( geometry.boundingSphere );\r\n\t\t\tbound.sphereInitialized = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbound.sphereInitialized = false;\r\n\r\n\t\t}\r\n\r\n\t\t// set drawRange count\r\n\t\tconst drawRange = this._drawRanges[ geometryId ];\r\n\t\tconst posAttr = geometry.getAttribute( 'position' );\r\n\t\tdrawRange.count = hasIndex ? srcIndex.count : posAttr.count;\r\n\t\tthis._visibilityChanged = true;\r\n\r\n\t\treturn geometryId;\r\n\r\n\t}\r\n\r\n\t/*\r\n\tdeleteGeometry( geometryId ) {\r\n\r\n\t\t// TODO: delete geometry and associated instances\r\n\r\n\t}\r\n\t*/\r\n\r\n\t/*\r\n\tdeleteInstance( instanceId ) {\r\n\r\n\t\t// Note: User needs to call optimize() afterward to pack the data.\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tdrawInfo[ instanceId ].active = false;\r\n\t\tthis._visibilityChanged = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\t*/\r\n\r\n\t// get bounding box and compute it if it doesn't exist\r\n\tgetBoundingBoxAt( geometryId, target ) {\r\n\r\n\t\tif ( geometryId >= this._geometryCount ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// compute bounding box\r\n\t\tconst bound = this._bounds[ geometryId ];\r\n\t\tconst box = bound.box;\r\n\t\tconst geometry = this.geometry;\r\n\t\tif ( bound.boxInitialized === false ) {\r\n\r\n\t\t\tbox.makeEmpty();\r\n\r\n\t\t\tconst index = geometry.index;\r\n\t\t\tconst position = geometry.attributes.position;\r\n\t\t\tconst drawRange = this._drawRanges[ geometryId ];\r\n\t\t\tfor ( let i = drawRange.start, l = drawRange.start + drawRange.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tlet iv = i;\r\n\t\t\t\tif ( index ) {\r\n\r\n\t\t\t\t\tiv = index.getX( iv );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbox.expandByPoint( _vector.fromBufferAttribute( position, iv ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbound.boxInitialized = true;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.copy( box );\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t// get bounding sphere and compute it if it doesn't exist\r\n\tgetBoundingSphereAt( geometryId, target ) {\r\n\r\n\t\tif ( geometryId >= this._geometryCount ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// compute bounding sphere\r\n\t\tconst bound = this._bounds[ geometryId ];\r\n\t\tconst sphere = bound.sphere;\r\n\t\tconst geometry = this.geometry;\r\n\t\tif ( bound.sphereInitialized === false ) {\r\n\r\n\t\t\tsphere.makeEmpty();\r\n\r\n\t\t\tthis.getBoundingBoxAt( geometryId, _box );\r\n\t\t\t_box.getCenter( sphere.center );\r\n\r\n\t\t\tconst index = geometry.index;\r\n\t\t\tconst position = geometry.attributes.position;\r\n\t\t\tconst drawRange = this._drawRanges[ geometryId ];\r\n\r\n\t\t\tlet maxRadiusSq = 0;\r\n\t\t\tfor ( let i = drawRange.start, l = drawRange.start + drawRange.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tlet iv = i;\r\n\t\t\t\tif ( index ) {\r\n\r\n\t\t\t\t\tiv = index.getX( iv );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_vector.fromBufferAttribute( position, iv );\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, sphere.center.distanceToSquared( _vector ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsphere.radius = Math.sqrt( maxRadiusSq );\r\n\t\t\tbound.sphereInitialized = true;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.copy( sphere );\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tsetMatrixAt( instanceId, matrix ) {\r\n\r\n\t\t// @TODO: Map geometryId to index of the arrays because\r\n\t\t//        optimize() can make geometryId mismatch the index\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tconst matricesTexture = this._matricesTexture;\r\n\t\tconst matricesArray = this._matricesTexture.image.data;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tmatrix.toArray( matricesArray, instanceId * 16 );\r\n\t\tmatricesTexture.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetMatrixAt( instanceId, matrix ) {\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tconst matricesArray = this._matricesTexture.image.data;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn matrix.fromArray( matricesArray, instanceId * 16 );\r\n\r\n\t}\r\n\r\n\tsetColorAt( instanceId, color ) {\r\n\r\n\t\tif ( this._colorsTexture === null ) {\r\n\r\n\t\t\tthis._initColorsTexture();\r\n\r\n\t\t}\r\n\r\n\t\t// @TODO: Map id to index of the arrays because\r\n\t\t//        optimize() can make id mismatch the index\r\n\r\n\t\tconst colorsTexture = this._colorsTexture;\r\n\t\tconst colorsArray = this._colorsTexture.image.data;\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tcolor.toArray( colorsArray, instanceId * 4 );\r\n\t\tcolorsTexture.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetColorAt( instanceId, color ) {\r\n\r\n\t\tconst colorsArray = this._colorsTexture.image.data;\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn color.fromArray( colorsArray, instanceId * 4 );\r\n\r\n\t}\r\n\r\n\tsetVisibleAt( instanceId, value ) {\r\n\r\n\t\t// if the geometry is out of range, not active, or visibility state\r\n\t\t// does not change then return early\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif (\r\n\t\t\tinstanceId >= drawInfo.length ||\r\n\t\t\tdrawInfo[ instanceId ].active === false ||\r\n\t\t\tdrawInfo[ instanceId ].visible === value\r\n\t\t) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tdrawInfo[ instanceId ].visible = value;\r\n\t\tthis._visibilityChanged = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetVisibleAt( instanceId ) {\r\n\r\n\t\t// return early if the geometry is out of range or not active\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tif ( instanceId >= drawInfo.length || drawInfo[ instanceId ].active === false ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn drawInfo[ instanceId ].visible;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tconst drawRanges = this._drawRanges;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\t\tconst batchGeometry = this.geometry;\r\n\r\n\t\t// iterate over each geometry\r\n\t\t_mesh.material = this.material;\r\n\t\t_mesh.geometry.index = batchGeometry.index;\r\n\t\t_mesh.geometry.attributes = batchGeometry.attributes;\r\n\t\tif ( _mesh.geometry.boundingBox === null ) {\r\n\r\n\t\t\t_mesh.geometry.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tif ( _mesh.geometry.boundingSphere === null ) {\r\n\r\n\t\t\t_mesh.geometry.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( ! drawInfo[ i ].visible || ! drawInfo[ i ].active ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\r\n\t\t\tconst drawRange = drawRanges[ geometryId ];\r\n\t\t\t_mesh.geometry.setDrawRange( drawRange.start, drawRange.count );\r\n\r\n\t\t\t// ge the intersects\r\n\t\t\tthis.getMatrixAt( i, _mesh.matrixWorld ).premultiply( matrixWorld );\r\n\t\t\tthis.getBoundingBoxAt( geometryId, _mesh.geometry.boundingBox );\r\n\t\t\tthis.getBoundingSphereAt( geometryId, _mesh.geometry.boundingSphere );\r\n\t\t\t_mesh.raycast( raycaster, _batchIntersects );\r\n\r\n\t\t\t// add batch id to the intersects\r\n\t\t\tfor ( let j = 0, l = _batchIntersects.length; j < l; j ++ ) {\r\n\r\n\t\t\t\tconst intersect = _batchIntersects[ j ];\r\n\t\t\t\tintersect.object = this;\r\n\t\t\t\tintersect.batchId = i;\r\n\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_batchIntersects.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\t_mesh.material = null;\r\n\t\t_mesh.geometry.index = null;\r\n\t\t_mesh.geometry.attributes = {};\r\n\t\t_mesh.geometry.setDrawRange( 0, Infinity );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.geometry = source.geometry.clone();\r\n\t\tthis.perObjectFrustumCulled = source.perObjectFrustumCulled;\r\n\t\tthis.sortObjects = source.sortObjects;\r\n\t\tthis.boundingBox = source.boundingBox !== null ? source.boundingBox.clone() : null;\r\n\t\tthis.boundingSphere = source.boundingSphere !== null ? source.boundingSphere.clone() : null;\r\n\r\n\t\tthis._drawRanges = source._drawRanges.map( range => ( { ...range } ) );\r\n\t\tthis._reservedRanges = source._reservedRanges.map( range => ( { ...range } ) );\r\n\r\n\t\tthis._drawInfo = source._drawInfo.map( inf => ( { ...inf } ) );\r\n\t\tthis._bounds = source._bounds.map( bound => ( {\r\n\t\t\tboxInitialized: bound.boxInitialized,\r\n\t\t\tbox: bound.box.clone(),\r\n\r\n\t\t\tsphereInitialized: bound.sphereInitialized,\r\n\t\t\tsphere: bound.sphere.clone()\r\n\t\t} ) );\r\n\r\n\t\tthis._maxInstanceCount = source._maxInstanceCount;\r\n\t\tthis._maxVertexCount = source._maxVertexCount;\r\n\t\tthis._maxIndexCount = source._maxIndexCount;\r\n\r\n\t\tthis._geometryInitialized = source._geometryInitialized;\r\n\t\tthis._geometryCount = source._geometryCount;\r\n\t\tthis._multiDrawCounts = source._multiDrawCounts.slice();\r\n\t\tthis._multiDrawStarts = source._multiDrawStarts.slice();\r\n\r\n\t\tthis._matricesTexture = source._matricesTexture.clone();\r\n\t\tthis._matricesTexture.image.data = this._matricesTexture.image.data.slice();\r\n\r\n\t\tif ( this._colorsTexture !== null ) {\r\n\r\n\t\t\tthis._colorsTexture = source._colorsTexture.clone();\r\n\t\t\tthis._colorsTexture.image.data = this._colorsTexture.image.data.slice();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\t// Assuming the geometry is not shared with other meshes\r\n\t\tthis.geometry.dispose();\r\n\r\n\t\tthis._matricesTexture.dispose();\r\n\t\tthis._matricesTexture = null;\r\n\r\n\t\tthis._indirectTexture.dispose();\r\n\t\tthis._indirectTexture = null;\r\n\r\n\t\tif ( this._colorsTexture !== null ) {\r\n\r\n\t\t\tthis._colorsTexture.dispose();\r\n\t\t\tthis._colorsTexture = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tonBeforeRender( renderer, scene, camera, geometry, material/*, _group*/ ) {\r\n\r\n\t\t// if visibility has not changed and frustum culling and object sorting is not required\r\n\t\t// then skip iterating over all items\r\n\t\tif ( ! this._visibilityChanged && ! this.perObjectFrustumCulled && ! this.sortObjects ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// the indexed version of the multi draw function requires specifying the start\r\n\t\t// offset in bytes.\r\n\t\tconst index = geometry.getIndex();\r\n\t\tconst bytesPerElement = index === null ? 1 : index.array.BYTES_PER_ELEMENT;\r\n\r\n\t\tconst drawInfo = this._drawInfo;\r\n\t\tconst multiDrawStarts = this._multiDrawStarts;\r\n\t\tconst multiDrawCounts = this._multiDrawCounts;\r\n\t\tconst drawRanges = this._drawRanges;\r\n\t\tconst perObjectFrustumCulled = this.perObjectFrustumCulled;\r\n\t\tconst indirectTexture = this._indirectTexture;\r\n\t\tconst indirectArray = indirectTexture.image.data;\r\n\r\n\t\t// prepare the frustum in the local frame\r\n\t\tif ( perObjectFrustumCulled ) {\r\n\r\n\t\t\t_projScreenMatrix\r\n\t\t\t\t.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse )\r\n\t\t\t\t.multiply( this.matrixWorld );\r\n\t\t\t_frustum.setFromProjectionMatrix(\r\n\t\t\t\t_projScreenMatrix,\r\n\t\t\t\trenderer.coordinateSystem\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tlet count = 0;\r\n\t\tif ( this.sortObjects ) {\r\n\r\n\t\t\t// get the camera position in the local frame\r\n\t\t\t_invMatrixWorld.copy( this.matrixWorld ).invert();\r\n\t\t\t_vector.setFromMatrixPosition( camera.matrixWorld ).applyMatrix4( _invMatrixWorld );\r\n\t\t\t_forward.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld ).transformDirection( _invMatrixWorld );\r\n\r\n\t\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( drawInfo[ i ].visible && drawInfo[ i ].active ) {\r\n\r\n\t\t\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\r\n\r\n\t\t\t\t\t// get the bounds in world space\r\n\t\t\t\t\tthis.getMatrixAt( i, _matrix );\r\n\t\t\t\t\tthis.getBoundingSphereAt( geometryId, _sphere ).applyMatrix4( _matrix );\r\n\r\n\t\t\t\t\t// determine whether the batched geometry is within the frustum\r\n\t\t\t\t\tlet culled = false;\r\n\t\t\t\t\tif ( perObjectFrustumCulled ) {\r\n\r\n\t\t\t\t\t\tculled = ! _frustum.intersectsSphere( _sphere );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! culled ) {\r\n\r\n\t\t\t\t\t\t// get the distance from camera used for sorting\r\n\t\t\t\t\t\tconst z = _temp.subVectors( _sphere.center, _vector ).dot( _forward );\r\n\t\t\t\t\t\t_renderList.push( drawRanges[ geometryId ], z, i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Sort the draw ranges and prep for rendering\r\n\t\t\tconst list = _renderList.list;\r\n\t\t\tconst customSort = this.customSort;\r\n\t\t\tif ( customSort === null ) {\r\n\r\n\t\t\t\tlist.sort( material.transparent ? sortTransparent : sortOpaque );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcustomSort.call( this, list, camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0, l = list.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst item = list[ i ];\r\n\t\t\t\tmultiDrawStarts[ count ] = item.start * bytesPerElement;\r\n\t\t\t\tmultiDrawCounts[ count ] = item.count;\r\n\t\t\t\tindirectArray[ count ] = item.index;\r\n\t\t\t\tcount ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_renderList.reset();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( drawInfo[ i ].visible && drawInfo[ i ].active ) {\r\n\r\n\t\t\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\r\n\r\n\t\t\t\t\t// determine whether the batched geometry is within the frustum\r\n\t\t\t\t\tlet culled = false;\r\n\t\t\t\t\tif ( perObjectFrustumCulled ) {\r\n\r\n\t\t\t\t\t\t// get the bounds in world space\r\n\t\t\t\t\t\tthis.getMatrixAt( i, _matrix );\r\n\t\t\t\t\t\tthis.getBoundingSphereAt( geometryId, _sphere ).applyMatrix4( _matrix );\r\n\t\t\t\t\t\tculled = ! _frustum.intersectsSphere( _sphere );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! culled ) {\r\n\r\n\t\t\t\t\t\tconst range = drawRanges[ geometryId ];\r\n\t\t\t\t\t\tmultiDrawStarts[ count ] = range.start * bytesPerElement;\r\n\t\t\t\t\t\tmultiDrawCounts[ count ] = range.count;\r\n\t\t\t\t\t\tindirectArray[ count ] = i;\r\n\t\t\t\t\t\tcount ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tindirectTexture.needsUpdate = true;\r\n\t\tthis._multiDrawCount = count;\r\n\t\tthis._visibilityChanged = false;\r\n\r\n\t}\r\n\r\n\tonBeforeShadow( renderer, object, camera, shadowCamera, geometry, depthMaterial/* , group */ ) {\r\n\r\n\t\tthis.onBeforeRender( renderer, null, shadowCamera, geometry, depthMaterial );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { BatchedMesh };\r\n", "import { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Triangle } from '../math/Triangle.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\r\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\r\nimport { SpriteMaterial } from '../materials/SpriteMaterial.js';\r\n\r\nlet _geometry;\r\n\r\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\r\nconst _worldScale = /*@__PURE__*/ new Vector3();\r\nconst _mvPosition = /*@__PURE__*/ new Vector3();\r\n\r\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\r\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\r\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\nconst _vA = /*@__PURE__*/ new Vector3();\r\nconst _vB = /*@__PURE__*/ new Vector3();\r\nconst _vC = /*@__PURE__*/ new Vector3();\r\n\r\nconst _uvA = /*@__PURE__*/ new Vector2();\r\nconst _uvB = /*@__PURE__*/ new Vector2();\r\nconst _uvC = /*@__PURE__*/ new Vector2();\r\n\r\nclass Sprite extends Object3D {\r\n\r\n\tconstructor( material = new SpriteMaterial() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isSprite = true;\r\n\r\n\t\tthis.type = 'Sprite';\r\n\r\n\t\tif ( _geometry === undefined ) {\r\n\r\n\t\t\t_geometry = new BufferGeometry();\r\n\r\n\t\t\tconst float32Array = new Float32Array( [\r\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\r\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\r\n\t\t\t\t0.5, 0.5, 0, 1, 1,\r\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\r\n\t\t\t] );\r\n\r\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\r\n\r\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\r\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\r\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.geometry = _geometry;\r\n\t\tthis.material = material;\r\n\r\n\t\tthis.center = new Vector2( 0.5, 0.5 );\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tif ( raycaster.camera === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\r\n\r\n\t\t}\r\n\r\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\r\n\r\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\r\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\r\n\r\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\r\n\r\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\r\n\r\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\r\n\r\n\t\t}\r\n\r\n\t\tconst rotation = this.material.rotation;\r\n\t\tlet sin, cos;\r\n\r\n\t\tif ( rotation !== 0 ) {\r\n\r\n\t\t\tcos = Math.cos( rotation );\r\n\t\t\tsin = Math.sin( rotation );\r\n\r\n\t\t}\r\n\r\n\t\tconst center = this.center;\r\n\r\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\r\n\t\t_uvA.set( 0, 0 );\r\n\t\t_uvB.set( 1, 0 );\r\n\t\t_uvC.set( 1, 1 );\r\n\r\n\t\t// check first triangle\r\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\r\n\r\n\t\tif ( intersect === null ) {\r\n\r\n\t\t\t// check second triangle\r\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\t_uvB.set( 0, 1 );\r\n\r\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\r\n\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\r\n\r\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\tintersects.push( {\r\n\r\n\t\t\tdistance: distance,\r\n\t\t\tpoint: _intersectPoint.clone(),\r\n\t\t\tuv: Triangle.getInterpolation( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\r\n\t\t\tface: null,\r\n\t\t\tobject: this\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\r\n\r\n\t\tthis.material = source.material;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\r\n\r\n\t// compute position in camera space\r\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\r\n\r\n\t// to check if rotation is not zero\r\n\tif ( sin !== undefined ) {\r\n\r\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\r\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\r\n\r\n\t} else {\r\n\r\n\t\t_rotatedPosition.copy( _alignedPosition );\r\n\r\n\t}\r\n\r\n\r\n\tvertexPosition.copy( mvPosition );\r\n\tvertexPosition.x += _rotatedPosition.x;\r\n\tvertexPosition.y += _rotatedPosition.y;\r\n\r\n\t// transform to world space\r\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\r\n\r\n}\r\n\r\nexport { Sprite };\r\n", "import { Sphere } from '../math/Sphere.js';\r\nimport { Ray } from '../math/Ray.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { PointsMaterial } from '../materials/PointsMaterial.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\n\r\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _ray = /*@__PURE__*/ new Ray();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _position = /*@__PURE__*/ new Vector3();\r\n\r\nclass Points extends Object3D {\r\n\r\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isPoints = true;\r\n\r\n\t\tthis.type = 'Points';\r\n\r\n\t\tthis.geometry = geometry;\r\n\t\tthis.material = material;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\r\n\t\tthis.geometry = source.geometry;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\t\tconst threshold = raycaster.params.Points.threshold;\r\n\t\tconst drawRange = geometry.drawRange;\r\n\r\n\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\t\t_sphere.radius += threshold;\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\r\n\r\n\t\t//\r\n\r\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\r\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\tconst localThresholdSq = localThreshold * localThreshold;\r\n\r\n\t\tconst index = geometry.index;\r\n\t\tconst attributes = geometry.attributes;\r\n\t\tconst positionAttribute = attributes.position;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst a = index.getX( i );\r\n\r\n\t\t\t\t_position.fromBufferAttribute( positionAttribute, a );\r\n\r\n\t\t\t\ttestPoint( _position, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\r\n\r\n\t\t\t\t_position.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\ttestPoint( _position, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMorphTargets() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tconst morphAttributes = geometry.morphAttributes;\r\n\t\tconst keys = Object.keys( morphAttributes );\r\n\r\n\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\r\n\r\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\r\n\r\n\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\r\n\t\tconst intersectPoint = new Vector3();\r\n\r\n\t\t_ray.closestPointToPoint( point, intersectPoint );\r\n\t\tintersectPoint.applyMatrix4( matrixWorld );\r\n\r\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\tintersects.push( {\r\n\r\n\t\t\tdistance: distance,\r\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\tpoint: intersectPoint,\r\n\t\t\tindex: index,\r\n\t\t\tface: null,\r\n\t\t\tobject: object\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Points };\r\n", "import { Sphere } from '../math/Sphere.js';\r\nimport { Ray } from '../math/Ray.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\n\r\nconst _vStart = /*@__PURE__*/ new Vector3();\r\nconst _vEnd = /*@__PURE__*/ new Vector3();\r\n\r\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _ray = /*@__PURE__*/ new Ray();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\n\r\nconst _intersectPointOnRay = /*@__PURE__*/ new Vector3();\r\nconst _intersectPointOnSegment = /*@__PURE__*/ new Vector3();\r\n\r\nclass Line extends Object3D {\r\n\r\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isLine = true;\r\n\r\n\t\tthis.type = 'Line';\r\n\r\n\t\tthis.geometry = geometry;\r\n\t\tthis.material = material;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\r\n\t\tthis.geometry = source.geometry;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcomputeLineDistances() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\t// we assume non-indexed geometry\r\n\r\n\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\tconst positionAttribute = geometry.attributes.position;\r\n\t\t\tconst lineDistances = [ 0 ];\r\n\r\n\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vStart.fromBufferAttribute( positionAttribute, i - 1 );\r\n\t\t\t\t_vEnd.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\r\n\t\t\t\tlineDistances[ i ] += _vStart.distanceTo( _vEnd );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\t\tconst threshold = raycaster.params.Line.threshold;\r\n\t\tconst drawRange = geometry.drawRange;\r\n\r\n\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\t\t_sphere.radius += threshold;\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\r\n\r\n\t\t//\r\n\r\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\r\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\tconst localThresholdSq = localThreshold * localThreshold;\r\n\r\n\t\tconst step = this.isLineSegments ? 2 : 1;\r\n\r\n\t\tconst index = geometry.index;\r\n\t\tconst attributes = geometry.attributes;\r\n\t\tconst positionAttribute = attributes.position;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\r\n\r\n\t\t\t\tconst a = index.getX( i );\r\n\t\t\t\tconst b = index.getX( i + 1 );\r\n\r\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray, localThresholdSq, a, b );\r\n\r\n\t\t\t\tif ( intersect ) {\r\n\r\n\t\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isLineLoop ) {\r\n\r\n\t\t\t\tconst a = index.getX( end - 1 );\r\n\t\t\t\tconst b = index.getX( start );\r\n\r\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray, localThresholdSq, a, b );\r\n\r\n\t\t\t\tif ( intersect ) {\r\n\r\n\t\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\r\n\r\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray, localThresholdSq, i, i + 1 );\r\n\r\n\t\t\t\tif ( intersect ) {\r\n\r\n\t\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isLineLoop ) {\r\n\r\n\t\t\t\tconst intersect = checkIntersection( this, raycaster, _ray, localThresholdSq, end - 1, start );\r\n\r\n\t\t\t\tif ( intersect ) {\r\n\r\n\t\t\t\t\tintersects.push( intersect );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMorphTargets() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tconst morphAttributes = geometry.morphAttributes;\r\n\t\tconst keys = Object.keys( morphAttributes );\r\n\r\n\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction checkIntersection( object, raycaster, ray, thresholdSq, a, b ) {\r\n\r\n\tconst positionAttribute = object.geometry.attributes.position;\r\n\r\n\t_vStart.fromBufferAttribute( positionAttribute, a );\r\n\t_vEnd.fromBufferAttribute( positionAttribute, b );\r\n\r\n\tconst distSq = ray.distanceSqToSegment( _vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment );\r\n\r\n\tif ( distSq > thresholdSq ) return;\r\n\r\n\t_intersectPointOnRay.applyMatrix4( object.matrixWorld ); // Move back to world space for distance calculation\r\n\r\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectPointOnRay );\r\n\r\n\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\treturn {\r\n\r\n\t\tdistance: distance,\r\n\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t// point: raycaster.ray.at( distance ),\r\n\t\tpoint: _intersectPointOnSegment.clone().applyMatrix4( object.matrixWorld ),\r\n\t\tindex: a,\r\n\t\tface: null,\r\n\t\tfaceIndex: null,\r\n\t\tobject: object\r\n\r\n\t};\r\n\r\n}\r\n\r\nexport { Line };\r\n", "import { Line } from './Line.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\n\r\nconst _start = /*@__PURE__*/ new Vector3();\r\nconst _end = /*@__PURE__*/ new Vector3();\r\n\r\nclass LineSegments extends Line {\r\n\r\n\tconstructor( geometry, material ) {\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.isLineSegments = true;\r\n\r\n\t\tthis.type = 'LineSegments';\r\n\r\n\t}\r\n\r\n\tcomputeLineDistances() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\t// we assume non-indexed geometry\r\n\r\n\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\tconst positionAttribute = geometry.attributes.position;\r\n\t\t\tconst lineDistances = [];\r\n\r\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\r\n\r\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\r\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\r\n\r\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LineSegments };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\n\r\nclass LOD extends Object3D {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis._currentLevel = 0;\r\n\r\n\t\tthis.type = 'LOD';\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tlevels: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: []\r\n\t\t\t},\r\n\t\t\tisLOD: {\r\n\t\t\t\tvalue: true,\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.autoUpdate = true;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source, false );\r\n\r\n\t\tconst levels = source.levels;\r\n\r\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst level = levels[ i ];\r\n\r\n\t\t\tthis.addLevel( level.object.clone(), level.distance, level.hysteresis );\r\n\r\n\t\t}\r\n\r\n\t\tthis.autoUpdate = source.autoUpdate;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddLevel( object, distance = 0, hysteresis = 0 ) {\r\n\r\n\t\tdistance = Math.abs( distance );\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tlet l;\r\n\r\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\tif ( distance < levels[ l ].distance ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlevels.splice( l, 0, { distance: distance, hysteresis: hysteresis, object: object } );\r\n\r\n\t\tthis.add( object );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetCurrentLevel() {\r\n\r\n\t\treturn this._currentLevel;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tgetObjectForDistance( distance ) {\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tif ( levels.length > 0 ) {\r\n\r\n\t\t\tlet i, l;\r\n\r\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tlet levelDistance = levels[ i ].distance;\r\n\r\n\t\t\t\tif ( levels[ i ].object.visible ) {\r\n\r\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( distance < levelDistance ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn levels[ i - 1 ].object;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tif ( levels.length > 0 ) {\r\n\r\n\t\t\t_v1.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1 );\r\n\r\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate( camera ) {\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tif ( levels.length > 1 ) {\r\n\r\n\t\t\t_v1.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t_v2.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tconst distance = _v1.distanceTo( _v2 ) / camera.zoom;\r\n\r\n\t\t\tlevels[ 0 ].object.visible = true;\r\n\r\n\t\t\tlet i, l;\r\n\r\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tlet levelDistance = levels[ i ].distance;\r\n\r\n\t\t\t\tif ( levels[ i ].object.visible ) {\r\n\r\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( distance >= levelDistance ) {\r\n\r\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._currentLevel = i - 1;\r\n\r\n\t\t\tfor ( ; i < l; i ++ ) {\r\n\r\n\t\t\t\tlevels[ i ].object.visible = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\r\n\r\n\t\tdata.object.levels = [];\r\n\r\n\t\tconst levels = this.levels;\r\n\r\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst level = levels[ i ];\r\n\r\n\t\t\tdata.object.levels.push( {\r\n\t\t\t\tobject: level.object.uuid,\r\n\t\t\t\tdistance: level.distance,\r\n\t\t\t\thysteresis: level.hysteresis\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { LOD };\r\n", "import { Mesh } from './Mesh.js';\r\nimport { Box3 } from '../math/Box3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\nimport { Ray } from '../math/Ray.js';\r\nimport { AttachedBindMode, DetachedBindMode } from '../constants.js';\r\n\r\nconst _basePosition = /*@__PURE__*/ new Vector3();\r\n\r\nconst _skinIndex = /*@__PURE__*/ new Vector4();\r\nconst _skinWeight = /*@__PURE__*/ new Vector4();\r\n\r\nconst _vector3 = /*@__PURE__*/ new Vector3();\r\nconst _matrix4 = /*@__PURE__*/ new Matrix4();\r\nconst _vertex = /*@__PURE__*/ new Vector3();\r\n\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _ray = /*@__PURE__*/ new Ray();\r\n\r\nclass SkinnedMesh extends Mesh {\r\n\r\n\tconstructor( geometry, material ) {\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.isSkinnedMesh = true;\r\n\r\n\t\tthis.type = 'SkinnedMesh';\r\n\r\n\t\tthis.bindMode = AttachedBindMode;\r\n\t\tthis.bindMatrix = new Matrix4();\r\n\t\tthis.bindMatrixInverse = new Matrix4();\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t}\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\r\n\r\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\r\n\r\n\t\t\tthis.getVertexPosition( i, _vertex );\r\n\t\t\tthis.boundingBox.expandByPoint( _vertex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcomputeBoundingSphere() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.makeEmpty();\r\n\r\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\r\n\r\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\r\n\r\n\t\t\tthis.getVertexPosition( i, _vertex );\r\n\t\t\tthis.boundingSphere.expandByPoint( _vertex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.bindMode = source.bindMode;\r\n\t\tthis.bindMatrix.copy( source.bindMatrix );\r\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\r\n\r\n\t\tthis.skeleton = source.skeleton;\r\n\r\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\r\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst material = this.material;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\r\n\t\tif ( material === undefined ) return;\r\n\r\n\t\t// test with bounding sphere in world space\r\n\r\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( this.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\r\n\r\n\t\t// convert ray to local space of skinned mesh\r\n\r\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\r\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\t// test with bounding box in local space\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tif ( _ray.intersectsBox( this.boundingBox ) === false ) return;\r\n\r\n\t\t}\r\n\r\n\t\t// test for intersections with geometry\r\n\r\n\t\tthis._computeIntersections( raycaster, intersects, _ray );\r\n\r\n\t}\r\n\r\n\tgetVertexPosition( index, target ) {\r\n\r\n\t\tsuper.getVertexPosition( index, target );\r\n\r\n\t\tthis.applyBoneTransform( index, target );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tbind( skeleton, bindMatrix ) {\r\n\r\n\t\tthis.skeleton = skeleton;\r\n\r\n\t\tif ( bindMatrix === undefined ) {\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.skeleton.calculateInverses();\r\n\r\n\t\t\tbindMatrix = this.matrixWorld;\r\n\r\n\t\t}\r\n\r\n\t\tthis.bindMatrix.copy( bindMatrix );\r\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\r\n\r\n\t}\r\n\r\n\tpose() {\r\n\r\n\t\tthis.skeleton.pose();\r\n\r\n\t}\r\n\r\n\tnormalizeSkinWeights() {\r\n\r\n\t\tconst vector = new Vector4();\r\n\r\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\r\n\r\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\r\n\r\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\r\n\r\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\r\n\r\n\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\tvector.multiplyScalar( scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t}\r\n\r\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t\tif ( this.bindMode === AttachedBindMode ) {\r\n\r\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\r\n\r\n\t\t} else if ( this.bindMode === DetachedBindMode ) {\r\n\r\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tapplyBoneTransform( index, vector ) {\r\n\r\n\t\tconst skeleton = this.skeleton;\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\r\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\r\n\r\n\t\t_basePosition.copy( vector ).applyMatrix4( this.bindMatrix );\r\n\r\n\t\tvector.set( 0, 0, 0 );\r\n\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tconst weight = _skinWeight.getComponent( i );\r\n\r\n\t\t\tif ( weight !== 0 ) {\r\n\r\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\r\n\r\n\t\t\t\t_matrix4.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\r\n\r\n\t\t\t\tvector.addScaledVector( _vector3.copy( _basePosition ).applyMatrix4( _matrix4 ), weight );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn vector.applyMatrix4( this.bindMatrixInverse );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SkinnedMesh };\r\n", "import {\r\n\tRGBAFormat,\r\n\tFloatType\r\n} from '../constants.js';\r\nimport { Bone } from './Bone.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { DataTexture } from '../textures/DataTexture.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\n\r\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\nclass Skeleton {\r\n\r\n\tconstructor( bones = [], boneInverses = [] ) {\r\n\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\tthis.bones = bones.slice( 0 );\r\n\t\tthis.boneInverses = boneInverses;\r\n\t\tthis.boneMatrices = null;\r\n\r\n\t\tthis.boneTexture = null;\r\n\r\n\t\tthis.init();\r\n\r\n\t}\r\n\r\n\tinit() {\r\n\r\n\t\tconst bones = this.bones;\r\n\t\tconst boneInverses = this.boneInverses;\r\n\r\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\r\n\r\n\t\t// calculate inverse bone matrices if necessary\r\n\r\n\t\tif ( boneInverses.length === 0 ) {\r\n\r\n\t\t\tthis.calculateInverses();\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// handle special case\r\n\r\n\t\t\tif ( bones.length !== boneInverses.length ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\r\n\r\n\t\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcalculateInverses() {\r\n\r\n\t\tthis.boneInverses.length = 0;\r\n\r\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst inverse = new Matrix4();\r\n\r\n\t\t\tif ( this.bones[ i ] ) {\r\n\r\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpose() {\r\n\r\n\t\t// recover the bind-time world matrices\r\n\r\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst bone = this.bones[ i ];\r\n\r\n\t\t\tif ( bone ) {\r\n\r\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// compute the local matrices, positions, rotations and scales\r\n\r\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst bone = this.bones[ i ];\r\n\r\n\t\t\tif ( bone ) {\r\n\r\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\r\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst bones = this.bones;\r\n\t\tconst boneInverses = this.boneInverses;\r\n\t\tconst boneMatrices = this.boneMatrices;\r\n\t\tconst boneTexture = this.boneTexture;\r\n\r\n\t\t// flatten bone matrices to array\r\n\r\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t// compute the offset between the current and the original transform\r\n\r\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\r\n\r\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\r\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( boneTexture !== null ) {\r\n\r\n\t\t\tboneTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new Skeleton( this.bones, this.boneInverses );\r\n\r\n\t}\r\n\r\n\tcomputeBoneTexture() {\r\n\r\n\t\t// layout (1 matrix = 4 pixels)\r\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\r\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\tsize = Math.ceil( size / 4 ) * 4;\r\n\t\tsize = Math.max( size, 4 );\r\n\r\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\r\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\r\n\r\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\r\n\t\tboneTexture.needsUpdate = true;\r\n\r\n\t\tthis.boneMatrices = boneMatrices;\r\n\t\tthis.boneTexture = boneTexture;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetBoneByName( name ) {\r\n\r\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\tconst bone = this.bones[ i ];\r\n\r\n\t\t\tif ( bone.name === name ) {\r\n\r\n\t\t\t\treturn bone;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n\tdispose( ) {\r\n\r\n\t\tif ( this.boneTexture !== null ) {\r\n\r\n\t\t\tthis.boneTexture.dispose();\r\n\r\n\t\t\tthis.boneTexture = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfromJSON( json, bones ) {\r\n\r\n\t\tthis.uuid = json.uuid;\r\n\r\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst uuid = json.bones[ i ];\r\n\t\t\tlet bone = bones[ uuid ];\r\n\r\n\t\t\tif ( bone === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\r\n\t\t\t\tbone = new Bone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.bones.push( bone );\r\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.init();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.6,\r\n\t\t\t\ttype: 'Skeleton',\r\n\t\t\t\tgenerator: 'Skeleton.toJSON'\r\n\t\t\t},\r\n\t\t\tbones: [],\r\n\t\t\tboneInverses: []\r\n\t\t};\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\r\n\t\tconst bones = this.bones;\r\n\t\tconst boneInverses = this.boneInverses;\r\n\r\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst bone = bones[ i ];\r\n\t\t\tdata.bones.push( bone.uuid );\r\n\r\n\t\t\tconst boneInverse = boneInverses[ i ];\r\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Skeleton };\r\n", "import { Vector3 } from '../../math/Vector3.js';\r\nimport { Curve } from '../core/Curve.js';\r\n\r\n/**\r\n * Centripetal CatmullRom Curve - which is useful for avoiding\r\n * cusps and self-intersections in non-uniform catmull rom curves.\r\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n *\r\n * curve.type accepts centripetal(default), chordal and catmullrom\r\n * curve.tension is used for catmullrom which defaults to 0.5\r\n */\r\n\r\n\r\n/*\r\nBased on an optimized c++ solution in\r\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n - http://ideone.com/NoEbVM\r\n\r\nThis CubicPoly class could be used for reusing some variables and calculations,\r\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\nwhich can be placed in CurveUtils.\r\n*/\r\n\r\nfunction CubicPoly() {\r\n\r\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\r\n\r\n\t/*\r\n\t * Compute coefficients for a cubic polynomial\r\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t * such that\r\n\t *   p(0) = x0, p(1) = x1\r\n\t *  and\r\n\t *   p'(0) = t0, p'(1) = t1.\r\n\t */\r\n\tfunction init( x0, x1, t0, t1 ) {\r\n\r\n\t\tc0 = x0;\r\n\t\tc1 = t0;\r\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t}\r\n\r\n\treturn {\r\n\r\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\r\n\r\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t\t},\r\n\r\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t\t// rescale tangents for parametrization in [0,1]\r\n\t\t\tt1 *= dt1;\r\n\t\t\tt2 *= dt1;\r\n\r\n\t\t\tinit( x1, x2, t1, t2 );\r\n\r\n\t\t},\r\n\r\n\t\tcalc: function ( t ) {\r\n\r\n\t\t\tconst t2 = t * t;\r\n\t\t\tconst t3 = t2 * t;\r\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}\r\n\r\n//\r\n\r\nconst tmp = /*@__PURE__*/ new Vector3();\r\nconst px = /*@__PURE__*/ new CubicPoly();\r\nconst py = /*@__PURE__*/ new CubicPoly();\r\nconst pz = /*@__PURE__*/ new CubicPoly();\r\n\r\nclass CatmullRomCurve3 extends Curve {\r\n\r\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isCatmullRomCurve3 = true;\r\n\r\n\t\tthis.type = 'CatmullRomCurve3';\r\n\r\n\t\tthis.points = points;\r\n\t\tthis.closed = closed;\r\n\t\tthis.curveType = curveType;\r\n\t\tthis.tension = tension;\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector3() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst points = this.points;\r\n\t\tconst l = points.length;\r\n\r\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\tlet intPoint = Math.floor( p );\r\n\t\tlet weight = p - intPoint;\r\n\r\n\t\tif ( this.closed ) {\r\n\r\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\r\n\r\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\tintPoint = l - 2;\r\n\t\t\tweight = 1;\r\n\r\n\t\t}\r\n\r\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\r\n\r\n\t\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate first point\r\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\tp0 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tconst p1 = points[ intPoint % l ];\r\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate last point\r\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\tp3 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\r\n\r\n\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\r\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t// safety check for repeated points\r\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\r\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t} else if ( this.curveType === 'catmullrom' ) {\r\n\r\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\r\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\r\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\r\n\r\n\t\t}\r\n\r\n\t\tpoint.set(\r\n\t\t\tpx.calc( weight ),\r\n\t\t\tpy.calc( weight ),\r\n\t\t\tpz.calc( weight )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = source.closed;\r\n\t\tthis.curveType = source.curveType;\r\n\t\tthis.tension = source.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\tdata.closed = this.closed;\r\n\t\tdata.curveType = this.curveType;\r\n\t\tdata.tension = this.tension;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\tfromJSON( json ) {\r\n\r\n\t\tsuper.fromJSON( json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = json.closed;\r\n\t\tthis.curveType = json.curveType;\r\n\t\tthis.tension = json.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CatmullRomCurve3 };\r\n", "import { Quaternion } from '../math/Quaternion.js';\r\nimport { AdditiveAnimationBlendMode } from '../constants.js';\r\n\r\n// converts an array to a specific type\r\nfunction convertArray( array, type, forceClone ) {\r\n\r\n\tif ( ! array || // let 'undefined' and 'null' pass\r\n\t\t! forceClone && array.constructor === type ) return array;\r\n\r\n\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\r\n\r\n\t\treturn new type( array ); // create typed array\r\n\r\n\t}\r\n\r\n\treturn Array.prototype.slice.call( array ); // create Array\r\n\r\n}\r\n\r\nfunction isTypedArray( object ) {\r\n\r\n\treturn ArrayBuffer.isView( object ) &&\r\n\t\t! ( object instanceof DataView );\r\n\r\n}\r\n\r\n// returns an array by which times and values can be sorted\r\nfunction getKeyframeOrder( times ) {\r\n\r\n\tfunction compareTime( i, j ) {\r\n\r\n\t\treturn times[ i ] - times[ j ];\r\n\r\n\t}\r\n\r\n\tconst n = times.length;\r\n\tconst result = new Array( n );\r\n\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\r\n\r\n\tresult.sort( compareTime );\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\n// uses the array previously returned by 'getKeyframeOrder' to sort data\r\nfunction sortedArray( values, stride, order ) {\r\n\r\n\tconst nValues = values.length;\r\n\tconst result = new values.constructor( nValues );\r\n\r\n\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\r\n\r\n\t\tconst srcOffset = order[ i ] * stride;\r\n\r\n\t\tfor ( let j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\n// function for parsing AOS keyframe formats\r\nfunction flattenJSON( jsonKeys, times, values, valuePropertyName ) {\r\n\r\n\tlet i = 1, key = jsonKeys[ 0 ];\r\n\r\n\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\r\n\r\n\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t}\r\n\r\n\tif ( key === undefined ) return; // no data\r\n\r\n\tlet value = key[ valuePropertyName ];\r\n\tif ( value === undefined ) return; // no data\r\n\r\n\tif ( Array.isArray( value ) ) {\r\n\r\n\t\tdo {\r\n\r\n\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\ttimes.push( key.time );\r\n\t\t\t\tvalues.push.apply( values, value ); // push all elements\r\n\r\n\t\t\t}\r\n\r\n\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t} while ( key !== undefined );\r\n\r\n\t} else if ( value.toArray !== undefined ) {\r\n\r\n\t\t// ...assume THREE.Math-ish\r\n\r\n\t\tdo {\r\n\r\n\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\ttimes.push( key.time );\r\n\t\t\t\tvalue.toArray( values, values.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t} while ( key !== undefined );\r\n\r\n\t} else {\r\n\r\n\t\t// otherwise push as-is\r\n\r\n\t\tdo {\r\n\r\n\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\ttimes.push( key.time );\r\n\t\t\t\tvalues.push( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t} while ( key !== undefined );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\r\n\r\n\tconst clip = sourceClip.clone();\r\n\r\n\tclip.name = name;\r\n\r\n\tconst tracks = [];\r\n\r\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\tconst track = clip.tracks[ i ];\r\n\t\tconst valueSize = track.getValueSize();\r\n\r\n\t\tconst times = [];\r\n\t\tconst values = [];\r\n\r\n\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\r\n\r\n\t\t\tconst frame = track.times[ j ] * fps;\r\n\r\n\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\r\n\r\n\t\t\ttimes.push( track.times[ j ] );\r\n\r\n\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\r\n\r\n\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( times.length === 0 ) continue;\r\n\r\n\t\ttrack.times = convertArray( times, track.times.constructor );\r\n\t\ttrack.values = convertArray( values, track.values.constructor );\r\n\r\n\t\ttracks.push( track );\r\n\r\n\t}\r\n\r\n\tclip.tracks = tracks;\r\n\r\n\t// find minimum .times value across all tracks in the trimmed clip\r\n\r\n\tlet minStartTime = Infinity;\r\n\r\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\r\n\r\n\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// shift all tracks such that clip begins at t=0\r\n\r\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\r\n\r\n\t}\r\n\r\n\tclip.resetDuration();\r\n\r\n\treturn clip;\r\n\r\n}\r\n\r\nfunction makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\r\n\r\n\tif ( fps <= 0 ) fps = 30;\r\n\r\n\tconst numTracks = referenceClip.tracks.length;\r\n\tconst referenceTime = referenceFrame / fps;\r\n\r\n\t// Make each track's values relative to the values at the reference frame\r\n\tfor ( let i = 0; i < numTracks; ++ i ) {\r\n\r\n\t\tconst referenceTrack = referenceClip.tracks[ i ];\r\n\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\r\n\r\n\t\t// Skip this track if it's non-numeric\r\n\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\r\n\r\n\t\t// Find the track in the target clip whose name and type matches the reference track\r\n\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\r\n\r\n\t\t\treturn track.name === referenceTrack.name\r\n\t\t\t\t&& track.ValueTypeName === referenceTrackType;\r\n\r\n\t\t} );\r\n\r\n\t\tif ( targetTrack === undefined ) continue;\r\n\r\n\t\tlet referenceOffset = 0;\r\n\t\tconst referenceValueSize = referenceTrack.getValueSize();\r\n\r\n\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\r\n\r\n\t\t\treferenceOffset = referenceValueSize / 3;\r\n\r\n\t\t}\r\n\r\n\t\tlet targetOffset = 0;\r\n\t\tconst targetValueSize = targetTrack.getValueSize();\r\n\r\n\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\r\n\r\n\t\t\ttargetOffset = targetValueSize / 3;\r\n\r\n\t\t}\r\n\r\n\t\tconst lastIndex = referenceTrack.times.length - 1;\r\n\t\tlet referenceValue;\r\n\r\n\t\t// Find the value to subtract out of the track\r\n\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\r\n\r\n\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\r\n\t\t\tconst startIndex = referenceOffset;\r\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\r\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\r\n\r\n\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\r\n\r\n\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\r\n\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\r\n\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\r\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Interpolate to the reference value\r\n\t\t\tconst interpolant = referenceTrack.createInterpolant();\r\n\t\t\tconst startIndex = referenceOffset;\r\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\r\n\t\t\tinterpolant.evaluate( referenceTime );\r\n\t\t\treferenceValue = interpolant.resultBuffer.slice( startIndex, endIndex );\r\n\r\n\t\t}\r\n\r\n\t\t// Conjugate the quaternion\r\n\t\tif ( referenceTrackType === 'quaternion' ) {\r\n\r\n\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\r\n\t\t\treferenceQuat.toArray( referenceValue );\r\n\r\n\t\t}\r\n\r\n\t\t// Subtract the reference value from all of the track values\r\n\r\n\t\tconst numTimes = targetTrack.times.length;\r\n\t\tfor ( let j = 0; j < numTimes; ++ j ) {\r\n\r\n\t\t\tconst valueStart = j * targetValueSize + targetOffset;\r\n\r\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\r\n\r\n\t\t\t\t// Multiply the conjugate for quaternion track types\r\n\t\t\t\tQuaternion.multiplyQuaternionsFlat(\r\n\t\t\t\t\ttargetTrack.values,\r\n\t\t\t\t\tvalueStart,\r\n\t\t\t\t\treferenceValue,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\ttargetTrack.values,\r\n\t\t\t\t\tvalueStart\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\r\n\r\n\t\t\t\t// Subtract each value for all other numeric track types\r\n\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\r\n\r\n\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttargetClip.blendMode = AdditiveAnimationBlendMode;\r\n\r\n\treturn targetClip;\r\n\r\n}\r\n\r\nconst AnimationUtils = {\r\n\tconvertArray: convertArray,\r\n\tisTypedArray: isTypedArray,\r\n\tgetKeyframeOrder: getKeyframeOrder,\r\n\tsortedArray: sortedArray,\r\n\tflattenJSON: flattenJSON,\r\n\tsubclip: subclip,\r\n\tmakeClipAdditive: makeClipAdditive\r\n};\r\n\r\nexport {\r\n\tconvertArray,\r\n\tisTypedArray,\r\n\tgetKeyframeOrder,\r\n\tsortedArray,\r\n\tflattenJSON,\r\n\tsubclip,\r\n\tmakeClipAdditive,\r\n\tAnimationUtils\r\n};\r\n", "/**\r\n * Abstract base class of interpolants over parametric samples.\r\n *\r\n * The parameter domain is one dimensional, typically the time or a path\r\n * along a curve defined by the data.\r\n *\r\n * The sample values can have any dimensionality and derived classes may\r\n * apply special interpretations to the data.\r\n *\r\n * This class provides the interval seek in a Template Method, deferring\r\n * the actual interpolation to derived classes.\r\n *\r\n * Time complexity is O(1) for linear access crossing at most two points\r\n * and O(log N) for random access, where N is the number of positions.\r\n *\r\n * References:\r\n *\r\n * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n *\r\n */\r\n\r\nclass Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tthis.parameterPositions = parameterPositions;\r\n\t\tthis._cachedIndex = 0;\r\n\r\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\t\tthis.sampleValues = sampleValues;\r\n\t\tthis.valueSize = sampleSize;\r\n\r\n\t\tthis.settings = null;\r\n\t\tthis.DefaultSettings_ = {};\r\n\r\n\t}\r\n\r\n\tevaluate( t ) {\r\n\r\n\t\tconst pp = this.parameterPositions;\r\n\t\tlet i1 = this._cachedIndex,\r\n\t\t\tt1 = pp[ i1 ],\r\n\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\tvalidate_interval: {\r\n\r\n\t\t\tseek: {\r\n\r\n\t\t\t\tlet right;\r\n\r\n\t\t\t\tlinear_scan: {\r\n\r\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\r\n\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t//-\r\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\r\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\r\n\r\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\r\n\r\n\t\t\t\t\t\t\t\t// after end\r\n\r\n\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\r\n\t\t\t\t\t\t// looping?\r\n\r\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\r\n\r\n\t\t\t\t\t\tif ( t < t1global ) {\r\n\r\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\tt0 = t1global;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// linear reverse scan\r\n\r\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\r\n\r\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t// before start\r\n\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( 0 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// the interval is valid\r\n\r\n\t\t\t\t\tbreak validate_interval;\r\n\r\n\t\t\t\t} // linear scan\r\n\r\n\t\t\t\t// binary search\r\n\r\n\t\t\t\twhile ( i1 < right ) {\r\n\r\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\r\n\r\n\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\r\n\t\t\t\t\t\tright = mid;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ti1 = mid + 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tt1 = pp[ i1 ];\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\t\t// check boundary cases, again\r\n\r\n\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\treturn this.copySampleValue_( 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // seek\r\n\r\n\t\t\tthis._cachedIndex = i1;\r\n\r\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\r\n\t\t} // validate_interval\r\n\r\n\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\r\n\t}\r\n\r\n\tgetSettings_() {\r\n\r\n\t\treturn this.settings || this.DefaultSettings_;\r\n\r\n\t}\r\n\r\n\tcopySampleValue_( index ) {\r\n\r\n\t\t// copies a sample value to the result buffer\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = index * stride;\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] = values[ offset + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// Template methods for derived classes:\r\n\r\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\r\n\r\n\t\tthrow new Error( 'call to abstract method' );\r\n\t\t// implementations shall return this.resultBuffer\r\n\r\n\t}\r\n\r\n\tintervalChanged_( /* i1, t0, t1 */ ) {\r\n\r\n\t\t// empty\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Interpolant };\r\n", "import { ZeroCurvatureEnding, WrapAroundEnding, ZeroSlopeEnding } from '../../constants.js';\r\nimport { Interpolant } from '../Interpolant.js';\r\n\r\n/**\r\n * Fast and simple cubic spline interpolant.\r\n *\r\n * It was derived from a Hermitian construction setting the first derivative\r\n * at each sample position to the linear slope between neighboring positions\r\n * over their parameter interval.\r\n */\r\n\r\nclass CubicInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t\tthis._weightPrev = - 0;\r\n\t\tthis._offsetPrev = - 0;\r\n\t\tthis._weightNext = - 0;\r\n\t\tthis._offsetNext = - 0;\r\n\r\n\t\tthis.DefaultSettings_ = {\r\n\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tintervalChanged_( i1, t0, t1 ) {\r\n\r\n\t\tconst pp = this.parameterPositions;\r\n\t\tlet iPrev = i1 - 2,\r\n\t\t\tiNext = i1 + 1,\r\n\r\n\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\ttNext = pp[ iNext ];\r\n\r\n\t\tif ( tPrev === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\r\n\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = t1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( tNext === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\r\n\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\ttNext = t0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\tstride = this.valueSize;\r\n\r\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\tthis._offsetPrev = iPrev * stride;\r\n\t\tthis._offsetNext = iNext * stride;\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1, t0, t, t1 ) {\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\r\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tpp = p * p,\r\n\t\t\tppp = pp * p;\r\n\r\n\t\t// evaluate polynomials\r\n\r\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\r\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\r\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\r\n\t\tconst sN = wN * ppp - wN * pp;\r\n\r\n\t\t// combine data linearly\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\tsN * values[ oN + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CubicInterpolant };\r\n", "import { Interpolant } from '../Interpolant.js';\r\n\r\nclass LinearInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1, t0, t, t1 ) {\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toffset1 = i1 * stride,\r\n\t\t\toffset0 = offset1 - stride,\r\n\r\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tweight0 = 1 - weight1;\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { LinearInterpolant };\r\n", "import { Interpolant } from '../Interpolant.js';\r\n\r\n/**\r\n *\r\n * Interpolant that evaluates to the sample value at the position preceding\r\n * the parameter.\r\n */\r\n\r\nclass DiscreteInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\r\n\r\n\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { DiscreteInterpolant };\r\n", "import {\r\n\tInterpolateLinear,\r\n\tInterpolateSmooth,\r\n\tInterpolateDiscrete\r\n} from '../constants.js';\r\nimport { CubicInterpolant } from '../math/interpolants/CubicInterpolant.js';\r\nimport { LinearInterpolant } from '../math/interpolants/LinearInterpolant.js';\r\nimport { DiscreteInterpolant } from '../math/interpolants/DiscreteInterpolant.js';\r\nimport * as AnimationUtils from './AnimationUtils.js';\r\n\r\nclass KeyframeTrack {\r\n\r\n\tconstructor( name, times, values, interpolation ) {\r\n\r\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\r\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\r\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\r\n\r\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\r\n\r\n\t}\r\n\r\n\t// Serialization (in static context, because of constructor invocation\r\n\t// and automatic invocation of .toJSON):\r\n\r\n\tstatic toJSON( track ) {\r\n\r\n\t\tconst trackType = track.constructor;\r\n\r\n\t\tlet json;\r\n\r\n\t\t// derived classes can define a static toJSON method\r\n\t\tif ( trackType.toJSON !== this.toJSON ) {\r\n\r\n\t\t\tjson = trackType.toJSON( track );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we assume the data can be serialized as-is\r\n\t\t\tjson = {\r\n\r\n\t\t\t\t'name': track.name,\r\n\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\r\n\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\r\n\r\n\t\t\t};\r\n\r\n\t\t\tconst interpolation = track.getInterpolation();\r\n\r\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\r\n\r\n\t\t\t\tjson.interpolation = interpolation;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tjson.type = track.ValueTypeName; // mandatory\r\n\r\n\t\treturn json;\r\n\r\n\t}\r\n\r\n\tInterpolantFactoryMethodDiscrete( result ) {\r\n\r\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t}\r\n\r\n\tInterpolantFactoryMethodLinear( result ) {\r\n\r\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t}\r\n\r\n\tInterpolantFactoryMethodSmooth( result ) {\r\n\r\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t}\r\n\r\n\tsetInterpolation( interpolation ) {\r\n\r\n\t\tlet factoryMethod;\r\n\r\n\t\tswitch ( interpolation ) {\r\n\r\n\t\t\tcase InterpolateDiscrete:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase InterpolateLinear:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase InterpolateSmooth:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif ( factoryMethod === undefined ) {\r\n\r\n\t\t\tconst message = 'unsupported interpolation for ' +\r\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\r\n\r\n\t\t\tif ( this.createInterpolant === undefined ) {\r\n\r\n\t\t\t\t// fall back to default, unless the default itself is messed up\r\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tthis.createInterpolant = factoryMethod;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetInterpolation() {\r\n\r\n\t\tswitch ( this.createInterpolant ) {\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\r\n\r\n\t\t\t\treturn InterpolateDiscrete;\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodLinear:\r\n\r\n\t\t\t\treturn InterpolateLinear;\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\r\n\r\n\t\t\t\treturn InterpolateSmooth;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetValueSize() {\r\n\r\n\t\treturn this.values.length / this.times.length;\r\n\r\n\t}\r\n\r\n\t// move all keyframes either forwards or backwards in time\r\n\tshift( timeOffset ) {\r\n\r\n\t\tif ( timeOffset !== 0.0 ) {\r\n\r\n\t\t\tconst times = this.times;\r\n\r\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttimes[ i ] += timeOffset;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\tscale( timeScale ) {\r\n\r\n\t\tif ( timeScale !== 1.0 ) {\r\n\r\n\t\t\tconst times = this.times;\r\n\r\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttimes[ i ] *= timeScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\ttrim( startTime, endTime ) {\r\n\r\n\t\tconst times = this.times,\r\n\t\t\tnKeys = times.length;\r\n\r\n\t\tlet from = 0,\r\n\t\t\tto = nKeys - 1;\r\n\r\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\r\n\r\n\t\t\t++ from;\r\n\r\n\t\t}\r\n\r\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\r\n\r\n\t\t\t-- to;\r\n\r\n\t\t}\r\n\r\n\t\t++ to; // inclusive -> exclusive bound\r\n\r\n\t\tif ( from !== 0 || to !== nKeys ) {\r\n\r\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\r\n\t\t\tif ( from >= to ) {\r\n\r\n\t\t\t\tto = Math.max( to, 1 );\r\n\t\t\t\tfrom = to - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst stride = this.getValueSize();\r\n\t\t\tthis.times = times.slice( from, to );\r\n\t\t\tthis.values = this.values.slice( from * stride, to * stride );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\tvalidate() {\r\n\r\n\t\tlet valid = true;\r\n\r\n\t\tconst valueSize = this.getValueSize();\r\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\r\n\t\t\tvalid = false;\r\n\r\n\t\t}\r\n\r\n\t\tconst times = this.times,\r\n\t\t\tvalues = this.values,\r\n\r\n\t\t\tnKeys = times.length;\r\n\r\n\t\tif ( nKeys === 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\r\n\t\t\tvalid = false;\r\n\r\n\t\t}\r\n\r\n\t\tlet prevTime = null;\r\n\r\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\r\n\r\n\t\t\tconst currTime = times[ i ];\r\n\r\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\r\n\t\t\t\tvalid = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\r\n\t\t\t\tvalid = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprevTime = currTime;\r\n\r\n\t\t}\r\n\r\n\t\tif ( values !== undefined ) {\r\n\r\n\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\r\n\r\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tconst value = values[ i ];\r\n\r\n\t\t\t\t\tif ( isNaN( value ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\r\n\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn valid;\r\n\r\n\t}\r\n\r\n\t// removes equivalent sequential keys as common in morph target sequences\r\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\toptimize() {\r\n\r\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\r\n\t\tconst times = this.times.slice(),\r\n\t\t\tvalues = this.values.slice(),\r\n\t\t\tstride = this.getValueSize(),\r\n\r\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\r\n\r\n\t\t\tlastIndex = times.length - 1;\r\n\r\n\t\tlet writeIndex = 1;\r\n\r\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\r\n\r\n\t\t\tlet keep = false;\r\n\r\n\t\t\tconst time = times[ i ];\r\n\t\t\tconst timeNext = times[ i + 1 ];\r\n\r\n\t\t\t// remove adjacent keyframes scheduled at the same time\r\n\r\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\r\n\r\n\t\t\t\tif ( ! smoothInterpolation ) {\r\n\r\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\r\n\r\n\t\t\t\t\tconst offset = i * stride,\r\n\t\t\t\t\t\toffsetP = offset - stride,\r\n\t\t\t\t\t\toffsetN = offset + stride;\r\n\r\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\tconst value = values[ offset + j ];\r\n\r\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\r\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\r\n\r\n\t\t\t\t\t\t\tkeep = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tkeep = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// in-place compaction\r\n\r\n\t\t\tif ( keep ) {\r\n\r\n\t\t\t\tif ( i !== writeIndex ) {\r\n\r\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\r\n\r\n\t\t\t\t\tconst readOffset = i * stride,\r\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\r\n\r\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// flush last keyframe (compaction looks ahead)\r\n\r\n\t\tif ( lastIndex > 0 ) {\r\n\r\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\r\n\r\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t++ writeIndex;\r\n\r\n\t\t}\r\n\r\n\t\tif ( writeIndex !== times.length ) {\r\n\r\n\t\t\tthis.times = times.slice( 0, writeIndex );\r\n\t\t\tthis.values = values.slice( 0, writeIndex * stride );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.times = times;\r\n\t\t\tthis.values = values;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst times = this.times.slice();\r\n\t\tconst values = this.values.slice();\r\n\r\n\t\tconst TypedKeyframeTrack = this.constructor;\r\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\r\n\r\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\r\n\t\ttrack.createInterpolant = this.createInterpolant;\r\n\r\n\t\treturn track;\r\n\r\n\t}\r\n\r\n}\r\n\r\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\r\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\r\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\r\n\r\nexport { KeyframeTrack };\r\n", "import { InterpolateDiscrete } from '../../constants.js';\r\nimport { KeyframeTrack } from '../KeyframeTrack.js';\r\n\r\n/**\r\n * A Track of Boolean keyframe values.\r\n */\r\nclass BooleanKeyframeTrack extends KeyframeTrack {\r\n\r\n\t// No interpolation parameter because only InterpolateDiscrete is valid.\r\n\tconstructor( name, times, values ) {\r\n\r\n\t\tsuper( name, times, values );\r\n\r\n\t}\r\n\r\n}\r\n\r\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\r\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\r\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\r\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\r\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\r\n\r\n// Note: Actually this track could have a optimized / compressed\r\n// representation of a single value and a custom interpolant that\r\n// computes \"firstValue ^ isOdd( index )\".\r\n\r\nexport { BooleanKeyframeTrack };\r\n", "import { KeyframeTrack } from '../KeyframeTrack.js';\r\n\r\n/**\r\n * A Track of keyframe values that represent color.\r\n */\r\nclass ColorKeyframeTrack extends KeyframeTrack {}\r\n\r\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\r\n// ValueBufferType is inherited\r\n// DefaultInterpolation is inherited\r\n\r\n// Note: Very basic implementation and nothing special yet.\r\n// However, this is the place for color space parameterization.\r\n\r\nexport { ColorKeyframeTrack };\r\n", "import { KeyframeTrack } from '../KeyframeTrack.js';\r\n\r\n/**\r\n * A Track of numeric keyframe values.\r\n */\r\nclass NumberKeyframeTrack extends KeyframeTrack {}\r\n\r\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\r\n// ValueBufferType is inherited\r\n// DefaultInterpolation is inherited\r\n\r\nexport { NumberKeyframeTrack };\r\n", "import { Interpolant } from '../Interpolant.js';\r\nimport { Quaternion } from '../Quaternion.js';\r\n\r\n/**\r\n * Spherical linear unit quaternion interpolant.\r\n */\r\n\r\nclass QuaternionLinearInterpolant extends Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tinterpolate_( i1, t0, t, t1 ) {\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\r\n\t\tlet offset = i1 * stride;\r\n\r\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\r\n\r\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { QuaternionLinearInterpolant };\r\n", "import { KeyframeTrack } from '../KeyframeTrack.js';\r\nimport { QuaternionLinearInterpolant } from '../../math/interpolants/QuaternionLinearInterpolant.js';\r\n\r\n/**\r\n * A Track of quaternion keyframe values.\r\n */\r\nclass QuaternionKeyframeTrack extends KeyframeTrack {\r\n\r\n\tInterpolantFactoryMethodLinear( result ) {\r\n\r\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t}\r\n\r\n}\r\n\r\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\r\n// ValueBufferType is inherited\r\n// DefaultInterpolation is inherited;\r\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\r\n\r\nexport { QuaternionKeyframeTrack };\r\n", "import { InterpolateDiscrete } from '../../constants.js';\r\nimport { KeyframeTrack } from '../KeyframeTrack.js';\r\n\r\n/**\r\n * A Track that interpolates Strings\r\n */\r\nclass StringKeyframeTrack extends KeyframeTrack {\r\n\r\n\t// No interpolation parameter because only InterpolateDiscrete is valid.\r\n\tconstructor( name, times, values ) {\r\n\r\n\t\tsuper( name, times, values );\r\n\r\n\t}\r\n\r\n}\r\n\r\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\r\nStringKeyframeTrack.prototype.ValueBufferType = Array;\r\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\r\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\r\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\r\n\r\nexport { StringKeyframeTrack };\r\n", "import { KeyframeTrack } from '../KeyframeTrack.js';\r\n\r\n/**\r\n * A Track of vectored keyframe values.\r\n */\r\nclass VectorKeyframeTrack extends KeyframeTrack {}\r\n\r\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\r\n// ValueBufferType is inherited\r\n// DefaultInterpolation is inherited\r\n\r\nexport { VectorKeyframeTrack };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport * as MathUtils from '../math/MathUtils.js';\r\nimport { Triangle } from '../math/Triangle.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nconst _v0 = /*@__PURE__*/ new Vector3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _normal = /*@__PURE__*/ new Vector3();\r\nconst _triangle = /*@__PURE__*/ new Triangle();\r\n\r\nclass EdgesGeometry extends BufferGeometry {\r\n\r\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'EdgesGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tgeometry: geometry,\r\n\t\t\tthresholdAngle: thresholdAngle\r\n\t\t};\r\n\r\n\t\tif ( geometry !== null ) {\r\n\r\n\t\t\tconst precisionPoints = 4;\r\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\r\n\t\t\tconst thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );\r\n\r\n\t\t\tconst indexAttr = geometry.getIndex();\r\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\r\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\r\n\r\n\t\t\tconst indexArr = [ 0, 0, 0 ];\r\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\r\n\t\t\tconst hashes = new Array( 3 );\r\n\r\n\t\t\tconst edgeData = {};\r\n\t\t\tconst vertices = [];\r\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\r\n\r\n\t\t\t\tif ( indexAttr ) {\r\n\r\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\r\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\r\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindexArr[ 0 ] = i;\r\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\r\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst { a, b, c } = _triangle;\r\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\r\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\r\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\r\n\t\t\t\t_triangle.getNormal( _normal );\r\n\r\n\t\t\t\t// create hashes for the edge from the vertices\r\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\r\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\r\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\r\n\r\n\t\t\t\t// skip degenerate triangles\r\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\r\n\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// iterate over every edge\r\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t// get the first and next vertex making up the edge\r\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\r\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\r\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\r\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\r\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\r\n\r\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\r\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\r\n\r\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\r\n\r\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\r\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\r\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\r\n\r\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\r\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\r\n\r\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\r\n\r\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\r\n\t\t\t\t\t\tedgeData[ hash ] = {\r\n\r\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\r\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\r\n\t\t\t\t\t\t\tnormal: _normal.clone(),\r\n\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\r\n\t\t\tfor ( const key in edgeData ) {\r\n\r\n\t\t\t\tif ( edgeData[ key ] ) {\r\n\r\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\r\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\r\n\t\t\t\t\t_v1.fromBufferAttribute( positionAttr, index1 );\r\n\r\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\r\n\t\t\t\t\tvertices.push( _v1.x, _v1.y, _v1.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { EdgesGeometry };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nclass SphereGeometry extends BufferGeometry {\r\n\r\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'SphereGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\r\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\r\n\r\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\r\n\r\n\t\tlet index = 0;\r\n\t\tconst grid = [];\r\n\r\n\t\tconst vertex = new Vector3();\r\n\t\tconst normal = new Vector3();\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\r\n\r\n\t\t\tconst verticesRow = [];\r\n\r\n\t\t\tconst v = iy / heightSegments;\r\n\r\n\t\t\t// special case for the poles\r\n\r\n\t\t\tlet uOffset = 0;\r\n\r\n\t\t\tif ( iy === 0 && thetaStart === 0 ) {\r\n\r\n\t\t\t\tuOffset = 0.5 / widthSegments;\r\n\r\n\t\t\t} else if ( iy === heightSegments && thetaEnd === Math.PI ) {\r\n\r\n\t\t\t\tuOffset = - 0.5 / widthSegments;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tconst u = ix / widthSegments;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.copy( vertex ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\r\n\r\n\t\t\t\tverticesRow.push( index ++ );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgrid.push( verticesRow );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\r\n\r\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\r\n\t\t\t\tconst b = grid[ iy ][ ix ];\r\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\r\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\r\n\r\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\r\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SphereGeometry };\r\n", "class NodeFunction {\r\n\r\n\tconstructor( type, inputs, name = '', precision = '' ) {\r\n\r\n\t\tthis.type = type;\r\n\t\tthis.inputs = inputs;\r\n\t\tthis.name = name;\r\n\t\tthis.precision = precision;\r\n\r\n\t}\r\n\r\n\tgetCode( /*name = this.name*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nNodeFunction.isNodeFunction = true;\r\n\r\nexport default NodeFunction;\r\n", "// Three.js Transpiler\r\n// https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/libraries/stdlib/genglsl/lib/mx_noise.glsl\r\n\r\nimport { int, uint, float, vec3, bool, uvec3, vec2, vec4, If, tslFn } from '../../shadernode/ShaderNode.js';\r\nimport { cond } from '../../math/CondNode.js';\r\nimport { sub, mul } from '../../math/OperatorNode.js';\r\nimport { floor, abs, max, dot, min, sqrt } from '../../math/MathNode.js';\r\nimport { overloadingFn } from '../../utils/FunctionOverloadingNode.js';\r\nimport { loop } from '../../utils/LoopNode.js';\r\n\r\n\r\nexport const mx_select = /*#__PURE__*/ tslFn( ( [ b_immutable, t_immutable, f_immutable ] ) => {\r\n\r\n\tconst f = float( f_immutable ).toVar();\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst b = bool( b_immutable ).toVar();\r\n\r\n\treturn cond( b, t, f );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_select',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'b', type: 'bool' },\r\n\t\t{ name: 't', type: 'float' },\r\n\t\t{ name: 'f', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_negate_if = /*#__PURE__*/ tslFn( ( [ val_immutable, b_immutable ] ) => {\r\n\r\n\tconst b = bool( b_immutable ).toVar();\r\n\tconst val = float( val_immutable ).toVar();\r\n\r\n\treturn cond( b, val.negate(), val );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_negate_if',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'val', type: 'float' },\r\n\t\t{ name: 'b', type: 'bool' }\r\n\t]\r\n} );\r\n\r\nexport const mx_floor = /*#__PURE__*/ tslFn( ( [ x_immutable ] ) => {\r\n\r\n\tconst x = float( x_immutable ).toVar();\r\n\r\n\treturn int( floor( x ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_floor',\r\n\ttype: 'int',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_floorfrac = /*#__PURE__*/ tslFn( ( [ x_immutable, i ] ) => {\r\n\r\n\tconst x = float( x_immutable ).toVar();\r\n\ti.assign( mx_floor( x ) );\r\n\r\n\treturn x.sub( float( i ) );\r\n\r\n} );\r\n\r\nexport const mx_bilerp_0 = /*#__PURE__*/ tslFn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\r\n\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v3 = float( v3_immutable ).toVar();\r\n\tconst v2 = float( v2_immutable ).toVar();\r\n\tconst v1 = float( v1_immutable ).toVar();\r\n\tconst v0 = float( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\r\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bilerp_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'float' },\r\n\t\t{ name: 'v1', type: 'float' },\r\n\t\t{ name: 'v2', type: 'float' },\r\n\t\t{ name: 'v3', type: 'float' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bilerp_1 = /*#__PURE__*/ tslFn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\r\n\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v3 = vec3( v3_immutable ).toVar();\r\n\tconst v2 = vec3( v2_immutable ).toVar();\r\n\tconst v1 = vec3( v1_immutable ).toVar();\r\n\tconst v0 = vec3( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\r\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bilerp_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'vec3' },\r\n\t\t{ name: 'v1', type: 'vec3' },\r\n\t\t{ name: 'v2', type: 'vec3' },\r\n\t\t{ name: 'v3', type: 'vec3' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bilerp = /*#__PURE__*/ overloadingFn( [ mx_bilerp_0, mx_bilerp_1 ] );\r\n\r\nexport const mx_trilerp_0 = /*#__PURE__*/ tslFn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\r\n\r\n\tconst r = float( r_immutable ).toVar();\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v7 = float( v7_immutable ).toVar();\r\n\tconst v6 = float( v6_immutable ).toVar();\r\n\tconst v5 = float( v5_immutable ).toVar();\r\n\tconst v4 = float( v4_immutable ).toVar();\r\n\tconst v3 = float( v3_immutable ).toVar();\r\n\tconst v2 = float( v2_immutable ).toVar();\r\n\tconst v1 = float( v1_immutable ).toVar();\r\n\tconst v0 = float( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\r\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\r\n\r\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_trilerp_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'float' },\r\n\t\t{ name: 'v1', type: 'float' },\r\n\t\t{ name: 'v2', type: 'float' },\r\n\t\t{ name: 'v3', type: 'float' },\r\n\t\t{ name: 'v4', type: 'float' },\r\n\t\t{ name: 'v5', type: 'float' },\r\n\t\t{ name: 'v6', type: 'float' },\r\n\t\t{ name: 'v7', type: 'float' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' },\r\n\t\t{ name: 'r', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_trilerp_1 = /*#__PURE__*/ tslFn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\r\n\r\n\tconst r = float( r_immutable ).toVar();\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v7 = vec3( v7_immutable ).toVar();\r\n\tconst v6 = vec3( v6_immutable ).toVar();\r\n\tconst v5 = vec3( v5_immutable ).toVar();\r\n\tconst v4 = vec3( v4_immutable ).toVar();\r\n\tconst v3 = vec3( v3_immutable ).toVar();\r\n\tconst v2 = vec3( v2_immutable ).toVar();\r\n\tconst v1 = vec3( v1_immutable ).toVar();\r\n\tconst v0 = vec3( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\r\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\r\n\r\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_trilerp_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'vec3' },\r\n\t\t{ name: 'v1', type: 'vec3' },\r\n\t\t{ name: 'v2', type: 'vec3' },\r\n\t\t{ name: 'v3', type: 'vec3' },\r\n\t\t{ name: 'v4', type: 'vec3' },\r\n\t\t{ name: 'v5', type: 'vec3' },\r\n\t\t{ name: 'v6', type: 'vec3' },\r\n\t\t{ name: 'v7', type: 'vec3' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' },\r\n\t\t{ name: 'r', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_trilerp = /*#__PURE__*/ overloadingFn( [ mx_trilerp_0, mx_trilerp_1 ] );\r\n\r\nexport const mx_gradient_float_0 = /*#__PURE__*/ tslFn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uint( hash_immutable ).toVar();\r\n\tconst h = uint( hash.bitAnd( uint( 7 ) ) ).toVar();\r\n\tconst u = float( mx_select( h.lessThan( uint( 4 ) ), x, y ) ).toVar();\r\n\tconst v = float( mul( 2.0, mx_select( h.lessThan( uint( 4 ) ), y, x ) ) ).toVar();\r\n\r\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uint' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_float_1 = /*#__PURE__*/ tslFn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = float( z_immutable ).toVar();\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uint( hash_immutable ).toVar();\r\n\tconst h = uint( hash.bitAnd( uint( 15 ) ) ).toVar();\r\n\tconst u = float( mx_select( h.lessThan( uint( 8 ) ), x, y ) ).toVar();\r\n\tconst v = float( mx_select( h.lessThan( uint( 4 ) ), y, mx_select( h.equal( uint( 12 ) ).or( h.equal( uint( 14 ) ) ), x, z ) ) ).toVar();\r\n\r\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uint' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' },\r\n\t\t{ name: 'z', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_float = /*#__PURE__*/ overloadingFn( [ mx_gradient_float_0, mx_gradient_float_1 ] );\r\n\r\nexport const mx_gradient_vec3_0 = /*#__PURE__*/ tslFn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uvec3( hash_immutable ).toVar();\r\n\r\n\treturn vec3( mx_gradient_float( hash.x, x, y ), mx_gradient_float( hash.y, x, y ), mx_gradient_float( hash.z, x, y ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uvec3' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_vec3_1 = /*#__PURE__*/ tslFn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = float( z_immutable ).toVar();\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uvec3( hash_immutable ).toVar();\r\n\r\n\treturn vec3( mx_gradient_float( hash.x, x, y, z ), mx_gradient_float( hash.y, x, y, z ), mx_gradient_float( hash.z, x, y, z ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uvec3' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' },\r\n\t\t{ name: 'z', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_vec3 = /*#__PURE__*/ overloadingFn( [ mx_gradient_vec3_0, mx_gradient_vec3_1 ] );\r\n\r\nexport const mx_gradient_scale2d_0 = /*#__PURE__*/ tslFn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = float( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.6616, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale2d_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale3d_0 = /*#__PURE__*/ tslFn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = float( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.9820, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale3d_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale2d_1 = /*#__PURE__*/ tslFn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = vec3( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.6616, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale2d_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale2d = /*#__PURE__*/ overloadingFn( [ mx_gradient_scale2d_0, mx_gradient_scale2d_1 ] );\r\n\r\nexport const mx_gradient_scale3d_1 = /*#__PURE__*/ tslFn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = vec3( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.9820, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale3d_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale3d = /*#__PURE__*/ overloadingFn( [ mx_gradient_scale3d_0, mx_gradient_scale3d_1 ] );\r\n\r\nexport const mx_rotl32 = /*#__PURE__*/ tslFn( ( [ x_immutable, k_immutable ] ) => {\r\n\r\n\tconst k = int( k_immutable ).toVar();\r\n\tconst x = uint( x_immutable ).toVar();\r\n\r\n\treturn x.shiftLeft( k ).bitOr( x.shiftRight( int( 32 ).sub( k ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_rotl32',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'uint' },\r\n\t\t{ name: 'k', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bjmix = /*#__PURE__*/ tslFn( ( [ a, b, c ] ) => {\r\n\r\n\ta.subAssign( c );\r\n\ta.bitXorAssign( mx_rotl32( c, int( 4 ) ) );\r\n\tc.addAssign( b );\r\n\tb.subAssign( a );\r\n\tb.bitXorAssign( mx_rotl32( a, int( 6 ) ) );\r\n\ta.addAssign( c );\r\n\tc.subAssign( b );\r\n\tc.bitXorAssign( mx_rotl32( b, int( 8 ) ) );\r\n\tb.addAssign( a );\r\n\ta.subAssign( c );\r\n\ta.bitXorAssign( mx_rotl32( c, int( 16 ) ) );\r\n\tc.addAssign( b );\r\n\tb.subAssign( a );\r\n\tb.bitXorAssign( mx_rotl32( a, int( 19 ) ) );\r\n\ta.addAssign( c );\r\n\tc.subAssign( b );\r\n\tc.bitXorAssign( mx_rotl32( b, int( 4 ) ) );\r\n\tb.addAssign( a );\r\n\r\n} );\r\n\r\nexport const mx_bjfinal = /*#__PURE__*/ tslFn( ( [ a_immutable, b_immutable, c_immutable ] ) => {\r\n\r\n\tconst c = uint( c_immutable ).toVar();\r\n\tconst b = uint( b_immutable ).toVar();\r\n\tconst a = uint( a_immutable ).toVar();\r\n\tc.bitXorAssign( b );\r\n\tc.subAssign( mx_rotl32( b, int( 14 ) ) );\r\n\ta.bitXorAssign( c );\r\n\ta.subAssign( mx_rotl32( c, int( 11 ) ) );\r\n\tb.bitXorAssign( a );\r\n\tb.subAssign( mx_rotl32( a, int( 25 ) ) );\r\n\tc.bitXorAssign( b );\r\n\tc.subAssign( mx_rotl32( b, int( 16 ) ) );\r\n\ta.bitXorAssign( c );\r\n\ta.subAssign( mx_rotl32( c, int( 4 ) ) );\r\n\tb.bitXorAssign( a );\r\n\tb.subAssign( mx_rotl32( a, int( 14 ) ) );\r\n\tc.bitXorAssign( b );\r\n\tc.subAssign( mx_rotl32( b, int( 24 ) ) );\r\n\r\n\treturn c;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bjfinal',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'a', type: 'uint' },\r\n\t\t{ name: 'b', type: 'uint' },\r\n\t\t{ name: 'c', type: 'uint' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bits_to_01 = /*#__PURE__*/ tslFn( ( [ bits_immutable ] ) => {\r\n\r\n\tconst bits = uint( bits_immutable ).toVar();\r\n\r\n\treturn float( bits ).div( float( uint( int( 0xffffffff ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bits_to_01',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'bits', type: 'uint' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fade = /*#__PURE__*/ tslFn( ( [ t_immutable ] ) => {\r\n\r\n\tconst t = float( t_immutable ).toVar();\r\n\r\n\treturn t.mul( t ).mul( t ).mul( t.mul( t.mul( 6.0 ).sub( 15.0 ) ).add( 10.0 ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fade',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 't', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_0 = /*#__PURE__*/ tslFn( ( [ x_immutable ] ) => {\r\n\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 1 ) ).toVar();\r\n\tconst seed = uint( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ).toVar();\r\n\r\n\treturn mx_bjfinal( seed.add( uint( x ) ), seed, seed );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_0',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_1 = /*#__PURE__*/ tslFn( ( [ x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 2 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_1',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_2 = /*#__PURE__*/ tslFn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 3 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\tc.addAssign( uint( z ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_2',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_3 = /*#__PURE__*/ tslFn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable ] ) => {\r\n\r\n\tconst xx = int( xx_immutable ).toVar();\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 4 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\tc.addAssign( uint( z ) );\r\n\tmx_bjmix( a, b, c );\r\n\ta.addAssign( uint( xx ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_3',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' },\r\n\t\t{ name: 'xx', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_4 = /*#__PURE__*/ tslFn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable, yy_immutable ] ) => {\r\n\r\n\tconst yy = int( yy_immutable ).toVar();\r\n\tconst xx = int( xx_immutable ).toVar();\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 5 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\tc.addAssign( uint( z ) );\r\n\tmx_bjmix( a, b, c );\r\n\ta.addAssign( uint( xx ) );\r\n\tb.addAssign( uint( yy ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_4',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' },\r\n\t\t{ name: 'xx', type: 'int' },\r\n\t\t{ name: 'yy', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int = /*#__PURE__*/ overloadingFn( [ mx_hash_int_0, mx_hash_int_1, mx_hash_int_2, mx_hash_int_3, mx_hash_int_4 ] );\r\n\r\nexport const mx_hash_vec3_0 = /*#__PURE__*/ tslFn( ( [ x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst h = uint( mx_hash_int( x, y ) ).toVar();\r\n\tconst result = uvec3().toVar();\r\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\r\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\r\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_vec3_0',\r\n\ttype: 'uvec3',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_vec3_1 = /*#__PURE__*/ tslFn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst h = uint( mx_hash_int( x, y, z ) ).toVar();\r\n\tconst result = uvec3().toVar();\r\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\r\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\r\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_vec3_1',\r\n\ttype: 'uvec3',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_vec3 = /*#__PURE__*/ overloadingFn( [ mx_hash_vec3_0, mx_hash_vec3_1 ] );\r\n\r\nexport const mx_perlin_noise_float_0 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst result = float( mx_bilerp( mx_gradient_float( mx_hash_int( X, Y ), fx, fy ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\r\n\r\n\treturn mx_gradient_scale2d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_float_1 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst w = float( mx_fade( fz ) ).toVar();\r\n\tconst result = float( mx_trilerp( mx_gradient_float( mx_hash_int( X, Y, Z ), fx, fy, fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\r\n\r\n\treturn mx_gradient_scale3d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_float = /*#__PURE__*/ overloadingFn( [ mx_perlin_noise_float_0, mx_perlin_noise_float_1 ] );\r\n\r\nexport const mx_perlin_noise_vec3_0 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst result = vec3( mx_bilerp( mx_gradient_vec3( mx_hash_vec3( X, Y ), fx, fy ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\r\n\r\n\treturn mx_gradient_scale2d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_vec3_1 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst w = float( mx_fade( fz ) ).toVar();\r\n\tconst result = vec3( mx_trilerp( mx_gradient_vec3( mx_hash_vec3( X, Y, Z ), fx, fy, fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\r\n\r\n\treturn mx_gradient_scale3d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_vec3 = /*#__PURE__*/ overloadingFn( [ mx_perlin_noise_vec3_0, mx_perlin_noise_vec3_1 ] );\r\n\r\nexport const mx_cell_noise_float_0 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = float( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float_1 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix, iy ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float_2 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_2',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float_3 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec4( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\tconst iw = int( mx_floor( p.w ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz, iw ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_3',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec4' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float = /*#__PURE__*/ overloadingFn( [ mx_cell_noise_float_0, mx_cell_noise_float_1, mx_cell_noise_float_2, mx_cell_noise_float_3 ] );\r\n\r\nexport const mx_cell_noise_vec3_0 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = float( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3_1 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3_2 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_2',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3_3 = /*#__PURE__*/ tslFn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec4( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\tconst iw = int( mx_floor( p.w ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_3',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec4' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3 = /*#__PURE__*/ overloadingFn( [ mx_cell_noise_vec3_0, mx_cell_noise_vec3_1, mx_cell_noise_vec3_2, mx_cell_noise_vec3_3 ] );\r\n\r\nexport const mx_fractal_noise_float = /*#__PURE__*/ tslFn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst result = float( 0.0 ).toVar();\r\n\tconst amplitude = float( 1.0 ).toVar();\r\n\r\n\tloop( octaves, () => {\r\n\r\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_float( p ) ) );\r\n\t\tamplitude.mulAssign( diminish );\r\n\t\tp.mulAssign( lacunarity );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_float',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fractal_noise_vec3 = /*#__PURE__*/ tslFn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst result = vec3( 0.0 ).toVar();\r\n\tconst amplitude = float( 1.0 ).toVar();\r\n\r\n\tloop( octaves, () => {\r\n\r\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_vec3( p ) ) );\r\n\t\tamplitude.mulAssign( diminish );\r\n\t\tp.mulAssign( lacunarity );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_vec3',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fractal_noise_vec2 = /*#__PURE__*/ tslFn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\r\n\treturn vec2( mx_fractal_noise_float( p, octaves, lacunarity, diminish ), mx_fractal_noise_float( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_vec2',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fractal_noise_vec4 = /*#__PURE__*/ tslFn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst c = vec3( mx_fractal_noise_vec3( p, octaves, lacunarity, diminish ) ).toVar();\r\n\tconst f = float( mx_fractal_noise_float( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) ).toVar();\r\n\r\n\treturn vec4( c, f );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_vec4',\r\n\ttype: 'vec4',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_distance_0 = /*#__PURE__*/ tslFn( ( [ p_immutable, x_immutable, y_immutable, xoff_immutable, yoff_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst yoff = int( yoff_immutable ).toVar();\r\n\tconst xoff = int( xoff_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst tmp = vec3( mx_cell_noise_vec3( vec2( x.add( xoff ), y.add( yoff ) ) ) ).toVar();\r\n\tconst off = vec2( tmp.x, tmp.y ).toVar();\r\n\toff.subAssign( 0.5 );\r\n\toff.mulAssign( jitter );\r\n\toff.addAssign( 0.5 );\r\n\tconst cellpos = vec2( vec2( float( x ), float( y ) ).add( off ) ).toVar();\r\n\tconst diff = vec2( cellpos.sub( p ) ).toVar();\r\n\r\n\tIf( metric.equal( int( 2 ) ), () => {\r\n\r\n\t\treturn abs( diff.x ).add( abs( diff.y ) );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 3 ) ), () => {\r\n\r\n\t\treturn max( abs( diff.x ), abs( diff.y ) );\r\n\r\n\t} );\r\n\r\n\treturn dot( diff, diff );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_distance_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'xoff', type: 'int' },\r\n\t\t{ name: 'yoff', type: 'int' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_distance_1 = /*#__PURE__*/ tslFn( ( [ p_immutable, x_immutable, y_immutable, z_immutable, xoff_immutable, yoff_immutable, zoff_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst zoff = int( zoff_immutable ).toVar();\r\n\tconst yoff = int( yoff_immutable ).toVar();\r\n\tconst xoff = int( xoff_immutable ).toVar();\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst off = vec3( mx_cell_noise_vec3( vec3( x.add( xoff ), y.add( yoff ), z.add( zoff ) ) ) ).toVar();\r\n\toff.subAssign( 0.5 );\r\n\toff.mulAssign( jitter );\r\n\toff.addAssign( 0.5 );\r\n\tconst cellpos = vec3( vec3( float( x ), float( y ), float( z ) ).add( off ) ).toVar();\r\n\tconst diff = vec3( cellpos.sub( p ) ).toVar();\r\n\r\n\tIf( metric.equal( int( 2 ) ), () => {\r\n\r\n\t\treturn abs( diff.x ).add( abs( diff.y ) ).add( abs( diff.z ) );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 3 ) ), () => {\r\n\r\n\t\treturn max( max( abs( diff.x ), abs( diff.y ) ), abs( diff.z ) );\r\n\r\n\t} );\r\n\r\n\treturn dot( diff, diff );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_distance_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' },\r\n\t\t{ name: 'xoff', type: 'int' },\r\n\t\t{ name: 'yoff', type: 'int' },\r\n\t\t{ name: 'zoff', type: 'int' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_distance = /*#__PURE__*/ overloadingFn( [ mx_worley_distance_0, mx_worley_distance_1 ] );\r\n\r\nexport const mx_worley_noise_float_0 = /*#__PURE__*/ tslFn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst sqdist = float( 1e6 ).toVar();\r\n\r\n\tloop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tloop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\r\n\t\t\tsqdist.assign( min( sqdist, dist ) );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec2_0 = /*#__PURE__*/ tslFn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\r\n\r\n\tloop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tloop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\r\n\r\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t} ).elseif( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec2_0',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec3_0 = /*#__PURE__*/ tslFn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\r\n\r\n\tloop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tloop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\r\n\r\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t} ).elseif( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t} ).elseif( dist.lessThan( sqdist.z ), () => {\r\n\r\n\t\t\t\tsqdist.z.assign( dist );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_float_1 = /*#__PURE__*/ tslFn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst sqdist = float( 1e6 ).toVar();\r\n\r\n\tloop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tloop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tloop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\r\n\r\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\r\n\t\t\t\tsqdist.assign( min( sqdist, dist ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_float = /*#__PURE__*/ overloadingFn( [ mx_worley_noise_float_0, mx_worley_noise_float_1 ] );\r\n\r\nexport const mx_worley_noise_vec2_1 = /*#__PURE__*/ tslFn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\r\n\r\n\tloop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tloop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tloop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\r\n\r\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\r\n\r\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t\t} ).elseif( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec2_1',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec2 = /*#__PURE__*/ overloadingFn( [ mx_worley_noise_vec2_0, mx_worley_noise_vec2_1 ] );\r\n\r\nexport const mx_worley_noise_vec3_1 = /*#__PURE__*/ tslFn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\r\n\r\n\tloop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tloop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tloop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\r\n\r\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\r\n\r\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t\t} ).elseif( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t\t} ).elseif( dist.lessThan( sqdist.z ), () => {\r\n\r\n\t\t\t\t\tsqdist.z.assign( dist );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec3 = /*#__PURE__*/ overloadingFn( [ mx_worley_noise_vec3_0, mx_worley_noise_vec3_1 ] );\r\n", "// Three.js Transpiler\r\n// https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_hsv.glsl\r\n\r\nimport { int, float, vec3, If, tslFn } from '../../shadernode/ShaderNode.js';\r\nimport { add, sub, mul } from '../../math/OperatorNode.js';\r\nimport { floor, trunc, max, min } from '../../math/MathNode.js';\r\n\r\nexport const mx_hsvtorgb = /*#__PURE__*/ tslFn( ( [ hsv_immutable ] ) => {\r\n\r\n\tconst hsv = vec3( hsv_immutable ).toVar();\r\n\tconst h = float( hsv.x ).toVar();\r\n\tconst s = float( hsv.y ).toVar();\r\n\tconst v = float( hsv.z ).toVar();\r\n\r\n\tIf( s.lessThan( 0.0001 ), () => {\r\n\r\n\t\treturn vec3( v, v, v );\r\n\r\n\t} ).else( () => {\r\n\r\n\t\th.assign( mul( 6.0, h.sub( floor( h ) ) ) );\r\n\t\tconst hi = int( trunc( h ) ).toVar();\r\n\t\tconst f = float( h.sub( float( hi ) ) ).toVar();\r\n\t\tconst p = float( v.mul( sub( 1.0, s ) ) ).toVar();\r\n\t\tconst q = float( v.mul( sub( 1.0, s.mul( f ) ) ) ).toVar();\r\n\t\tconst t = float( v.mul( sub( 1.0, s.mul( sub( 1.0, f ) ) ) ) ).toVar();\r\n\r\n\t\tIf( hi.equal( int( 0 ) ), () => {\r\n\r\n\t\t\treturn vec3( v, t, p );\r\n\r\n\t\t} ).elseif( hi.equal( int( 1 ) ), () => {\r\n\r\n\t\t\treturn vec3( q, v, p );\r\n\r\n\t\t} ).elseif( hi.equal( int( 2 ) ), () => {\r\n\r\n\t\t\treturn vec3( p, v, t );\r\n\r\n\t\t} ).elseif( hi.equal( int( 3 ) ), () => {\r\n\r\n\t\t\treturn vec3( p, q, v );\r\n\r\n\t\t} ).elseif( hi.equal( int( 4 ) ), () => {\r\n\r\n\t\t\treturn vec3( t, p, v );\r\n\r\n\t\t} );\r\n\r\n\t\treturn vec3( v, p, q );\r\n\r\n\t} );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hsvtorgb',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'hsv', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_rgbtohsv = /*#__PURE__*/ tslFn( ( [ c_immutable ] ) => {\r\n\r\n\tconst c = vec3( c_immutable ).toVar();\r\n\tconst r = float( c.x ).toVar();\r\n\tconst g = float( c.y ).toVar();\r\n\tconst b = float( c.z ).toVar();\r\n\tconst mincomp = float( min( r, min( g, b ) ) ).toVar();\r\n\tconst maxcomp = float( max( r, max( g, b ) ) ).toVar();\r\n\tconst delta = float( maxcomp.sub( mincomp ) ).toVar();\r\n\tconst h = float().toVar(), s = float().toVar(), v = float().toVar();\r\n\tv.assign( maxcomp );\r\n\r\n\tIf( maxcomp.greaterThan( 0.0 ), () => {\r\n\r\n\t\ts.assign( delta.div( maxcomp ) );\r\n\r\n\t} ).else( () => {\r\n\r\n\t\ts.assign( 0.0 );\r\n\r\n\t} );\r\n\r\n\tIf( s.lessThanEqual( 0.0 ), () => {\r\n\r\n\t\th.assign( 0.0 );\r\n\r\n\t} ).else( () => {\r\n\r\n\t\tIf( r.greaterThanEqual( maxcomp ), () => {\r\n\r\n\t\t\th.assign( g.sub( b ).div( delta ) );\r\n\r\n\t\t} ).elseif( g.greaterThanEqual( maxcomp ), () => {\r\n\r\n\t\t\th.assign( add( 2.0, b.sub( r ).div( delta ) ) );\r\n\r\n\t\t} ).else( () => {\r\n\r\n\t\t\th.assign( add( 4.0, r.sub( g ).div( delta ) ) );\r\n\r\n\t\t} );\r\n\r\n\t\th.mulAssign( 1.0 / 6.0 );\r\n\r\n\t\tIf( h.lessThan( 0.0 ), () => {\r\n\r\n\t\t\th.addAssign( 1.0 );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\treturn vec3( h, s, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_rgbtohsv',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'c', type: 'vec3' }\r\n\t]\r\n} );\r\n", "// Three.js Transpiler\r\n// https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_transform_color.glsl\r\n\r\nimport { bvec3, vec3, tslFn } from '../../shadernode/ShaderNode.js';\r\nimport { greaterThan } from '../../math/OperatorNode.js';\r\nimport { max, pow, mix } from '../../math/MathNode.js';\r\n\r\nexport const mx_srgb_texture_to_lin_rec709 = /*#__PURE__*/ tslFn( ( [ color_immutable ] ) => {\r\n\r\n\tconst color = vec3( color_immutable ).toVar();\r\n\tconst isAbove = bvec3( greaterThan( color, vec3( 0.04045 ) ) ).toVar();\r\n\tconst linSeg = vec3( color.div( 12.92 ) ).toVar();\r\n\tconst powSeg = vec3( pow( max( color.add( vec3( 0.055 ) ), vec3( 0.0 ) ).div( 1.055 ), vec3( 2.4 ) ) ).toVar();\r\n\r\n\treturn mix( linSeg, powSeg, isAbove );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_srgb_texture_to_lin_rec709',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' }\r\n\t]\r\n} );\r\n", "import DataMap from './DataMap.js';\r\nimport Color4 from './Color4.js';\r\nimport { vec4, context, normalWorld, backgroundBlurriness, backgroundIntensity, NodeMaterial, modelViewProjection } from '../../nodes/Nodes.js';\r\n\r\nimport { Mesh } from '../../objects/Mesh.js';\r\nimport { SphereGeometry } from '../../geometries/SphereGeometry.js';\r\nimport { BackSide, LinearSRGBColorSpace } from '../../constants.js';\r\n\r\nconst _clearColor = /*@__PURE__*/ new Color4();\r\n\r\nclass Background extends DataMap {\r\n\r\n\tconstructor( renderer, nodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.nodes = nodes;\r\n\r\n\t}\r\n\r\n\tupdate( scene, renderList, renderContext ) {\r\n\r\n\t\tconst renderer = this.renderer;\r\n\t\tconst background = this.nodes.getBackgroundNode( scene ) || scene.background;\r\n\r\n\t\tlet forceClear = false;\r\n\r\n\t\tif ( background === null ) {\r\n\r\n\t\t\t// no background settings, use clear color configuration from the renderer\r\n\r\n\t\t\trenderer._clearColor.getRGB( _clearColor, LinearSRGBColorSpace );\r\n\t\t\t_clearColor.a = renderer._clearColor.a;\r\n\r\n\t\t} else if ( background.isColor === true ) {\r\n\r\n\t\t\t// background is an opaque color\r\n\r\n\t\t\tbackground.getRGB( _clearColor, LinearSRGBColorSpace );\r\n\t\t\t_clearColor.a = 1;\r\n\r\n\t\t\tforceClear = true;\r\n\r\n\t\t} else if ( background.isNode === true ) {\r\n\r\n\t\t\tconst sceneData = this.get( scene );\r\n\t\t\tconst backgroundNode = background;\r\n\r\n\t\t\t_clearColor.copy( renderer._clearColor );\r\n\r\n\t\t\tlet backgroundMesh = sceneData.backgroundMesh;\r\n\r\n\t\t\tif ( backgroundMesh === undefined ) {\r\n\r\n\t\t\t\tconst backgroundMeshNode = context( vec4( backgroundNode ).mul( backgroundIntensity ), {\r\n\t\t\t\t\t// @TODO: Add Texture2D support using node context\r\n\t\t\t\t\tgetUV: () => normalWorld,\r\n\t\t\t\t\tgetTextureLevel: () => backgroundBlurriness\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tlet viewProj = modelViewProjection();\r\n\t\t\t\tviewProj = viewProj.setZ( viewProj.w );\r\n\r\n\t\t\t\tconst nodeMaterial = new NodeMaterial();\r\n\t\t\t\tnodeMaterial.name = 'Background.material';\r\n\t\t\t\tnodeMaterial.side = BackSide;\r\n\t\t\t\tnodeMaterial.depthTest = false;\r\n\t\t\t\tnodeMaterial.depthWrite = false;\r\n\t\t\t\tnodeMaterial.fog = false;\r\n\t\t\t\tnodeMaterial.lights = false;\r\n\t\t\t\tnodeMaterial.vertexNode = viewProj;\r\n\t\t\t\tnodeMaterial.colorNode = backgroundMeshNode;\r\n\r\n\t\t\t\tsceneData.backgroundMeshNode = backgroundMeshNode;\r\n\t\t\t\tsceneData.backgroundMesh = backgroundMesh = new Mesh( new SphereGeometry( 1, 32, 32 ), nodeMaterial );\r\n\t\t\t\tbackgroundMesh.frustumCulled = false;\r\n\t\t\t\tbackgroundMesh.name = 'Background.mesh';\r\n\r\n\t\t\t\tbackgroundMesh.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst backgroundCacheKey = backgroundNode.getCacheKey();\r\n\r\n\t\t\tif ( sceneData.backgroundCacheKey !== backgroundCacheKey ) {\r\n\r\n\t\t\t\tsceneData.backgroundMeshNode.node = vec4( backgroundNode ).mul( backgroundIntensity );\r\n\r\n\t\t\t\tbackgroundMesh.material.needsUpdate = true;\r\n\r\n\t\t\t\tsceneData.backgroundCacheKey = backgroundCacheKey;\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderList.unshift( backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.Renderer: Unsupported background configuration.', background );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( renderer.autoClear === true || forceClear === true ) {\r\n\r\n\t\t\t_clearColor.multiplyScalar( _clearColor.a );\r\n\r\n\t\t\tconst clearColorValue = renderContext.clearColorValue;\r\n\r\n\t\t\tclearColorValue.r = _clearColor.r;\r\n\t\t\tclearColorValue.g = _clearColor.g;\r\n\t\t\tclearColorValue.b = _clearColor.b;\r\n\t\t\tclearColorValue.a = _clearColor.a;\r\n\r\n\t\t\trenderContext.depthClearValue = renderer._clearDepth;\r\n\t\t\trenderContext.stencilClearValue = renderer._clearStencil;\r\n\r\n\t\t\trenderContext.clearColor = renderer.autoClearColor === true;\r\n\t\t\trenderContext.clearDepth = renderer.autoClearDepth === true;\r\n\t\t\trenderContext.clearStencil = renderer.autoClearStencil === true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderContext.clearColor = false;\r\n\t\t\trenderContext.clearDepth = false;\r\n\t\t\trenderContext.clearStencil = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Background;\r\n"],
  "mappings": "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",
  "names": ["tmp", "color", "color", "max", "min", "hue", "saturation", "attribute", "color", "w0", "w1", "cos", "sin", "step", "attribute", "min", "max", "length", "normal", "attribute", "tmp", "min", "max", "length", "attribute", "min", "max", "length", "attribute", "property", "hash", "output", "property", "cache", "data", "output", "output", "output", "output", "length", "output", "nodeObject", "output", "bool", "uint", "int", "float", "stack", "output", "varying", "attribute", "parent", "cache", "context", "output", "output", "varying", "code", "code", "output", "property", "cache", "data", "output", "hash", "output", "output", "output", "normalize", "normalize", "clamp", "uv", "output", "texture", "texture", "output", "snippet", "length", "property", "property", "property", "buffer", "_vector", "_vector2", "attribute", "_vector", "attribute", "buffer", "bufferAttribute", "output", "buffer", "stack", "size", "x", "y", "output", "stack", "context", "output", "anisotropy", "output", "uv", "depth", "depth", "buffer", "texture", "anisotropy", "uv", "lights", "hash", "context", "stack", "context", "output", "resolution", "texture", "depth", "mrt", "lights", "lightsNode", "property", "cache", "data", "Material", "output", "parent", "min", "max", "_vector", "attribute", "_v1", "_box", "_v1", "_v2", "lengthSq", "length", "_vector", "direction", "sign", "_quaternion", "_v1", "_m1", "_quaternion", "distance", "parent", "output", "element", "cache", "_v0", "_v1", "_v2", "direction", "attribute", "_m1", "_box", "_vector", "attribute", "normal", "tmp", "tmp2", "indices", "uv", "normal", "distance", "property", "uniform", "texture", "depth", "_v3", "distance", "direction", "uv", "roughness", "clamp", "outputDirection", "normalize", "output", "mrt", "output", "_vector2", "normal", "direction", "_normal", "_target", "_size", "uv", "_size", "property", "uv", "output", "output", "output", "texture", "uv", "step", "property", "userData", "color", "color", "threshold", "uv", "normalMap", "color", "clamp", "toneMapping", "color", "_size", "texture", "mrt", "cameraNear", "cameraFar", "pass", "texture", "uv", "blur", "direction", "_size", "temp", "uv", "uv", "color", "pass", "threshold", "uv", "sobel", "uv", "dof", "clamp", "dotScreen", "color", "uv", "rgbShift", "film", "color", "clamp", "uv", "lut3D", "anisotropy", "_quadMesh", "_size", "uv", "depth", "ao", "normalize", "clamp", "uv", "depth", "normal", "denoise", "uvNode", "output", "uv", "fxaa", "_quadMesh", "_clearColor", "_currentClearColor", "_size", "threshold", "direction", "uv", "transition", "color", "clamp", "threshold", "toneMapping", "context", "color", "toneMapping", "depth", "clamp", "normal", "pixelation", "element", "output", "code", "min", "max", "output", "length", "bufferAttribute", "output", "color", "_sphere", "_vector", "distance", "_projScreenMatrix", "_lightPositionWorld", "_lookTarget", "color", "distance", "color", "color", "color", "distance", "color", "distance", "color", "context", "_cache", "texture", "uv", "label", "_defaultValues", "_defaultValues", "_defaultValues", "_defaultValues", "RECIPROCAL_PI", "context", "stack", "_defaultValues", "_defaultValues", "_defaultValues", "roughness", "alphaT", "alphaT", "w2", "roughness", "normalView", "roughness", "specularColor", "specularF90", "roughness", "roughness", "roughness", "uv", "thickness", "ior", "normalize", "modelScale", "roughness", "clamp", "attenuationColor", "attenuationDistance", "diffuseColor", "specularColor", "specularF90", "dispersion", "iridescenceIOR", "normal", "clearcoat", "sheen", "iridescence", "anisotropy", "transmission", "context", "uv", "stack", "_defaultValues", "_defaultValues", "stack", "normal", "stack", "_defaultValues", "_defaultValues", "uv", "_defaultValues", "_defaultValues", "context", "modelViewProjection", "context", "_defaultValues", "uniform", "_box3", "_sphere", "_matrix", "_projScreenMatrix", "_box", "_sphere", "_vector", "_mesh", "_vA", "_vB", "_vC", "_uvA", "_uvB", "_uvC", "_inverseMatrix", "_ray", "_sphere", "_position", "_inverseMatrix", "_ray", "_sphere", "_v1", "_v2", "_vector3", "_sphere", "_inverseMatrix", "_ray", "_identityMatrix", "_v0", "_v1", "_normal", "normal", "hash", "tmp", "color", "_clearColor", "renderer", "scene"]
}
